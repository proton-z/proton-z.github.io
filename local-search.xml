<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ARC140</title>
    <link href="/2022/05/16/arc140/"/>
    <url>/2022/05/16/arc140/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>未补完</p><p><a href="https://atcoder.jp/contests/arc140">Link</a></p><p><a href="https://atcoder.jp/contests/arc140/tasks/arc140_a">A</a>让你最多改 <span class="math inline">\(k\)</span>个字符，最大化循环位移得到的本质不同的串。</p><p>枚举循环节，然后贪心判断即可。。复杂度 <spanclass="math inline">\(O(d(n)n)\)</span>。</p><p><a href="https://atcoder.jp/contests/arc140/tasks/arc140_b">B</a>题意你有俩操作必须轮流做，<span class="math inline">\(\mathrm{ARC \toR},\mathrm{ARC\to AC}\)</span>。</p><p>冷静思考一下发现最终有可能操作的一定是 <spanclass="math inline">\(R\)</span> 旁边的数。</p><p>1操作相当于把 <spanclass="math inline">\(\mathrm{AAAAAAARCCCCCC}\)</span>这样极长长度-1。</p><p>2操作相当于把这个串删掉。</p><p>现在问题转化为你有 <span class="math inline">\(n\)</span>个数，交替让一个数-1,和删掉数。</p><p>注意 <span class="math inline">\(2\)</span>操作是让势能减少更多的，我们需要通过1让2操作减掉的势能尽可能少。</p><p>可以发现如果这个数是1，1，2操作等价。</p><p>所以现在 <span class="math inline">\(1\)</span> 操作的任务就是在<span class="math inline">\(2\)</span> 删完 <spanclass="math inline">\(1\)</span> 前尽可能多创造更多 <spanclass="math inline">\(1\)</span>。（也就是首先减最小的，直到成为1）。</p><p>这样的正确性是得到保证的，考虑当 <spanclass="math inline">\(2\)</span> 操作没有 <spanclass="math inline">\(1\)</span>的时候，我们无能为力只能先-1，然后删除。</p><hr /><p><a href="https://atcoder.jp/contests/arc140/tasks/arc140_c">C</a>题意让你构造出排列使得 <spanclass="math inline">\(A_i=|P_{i}-P_{i-1}|\)</span>的LIS尽可能长，特殊地，钦定了 <span class="math inline">\(P_1\)</span>的值。</p><p>不难想到构造 能使任何一种方案LIS至少为 <spanclass="math inline">\(N-2\)</span> 。</p><p>如图 <img src="\img\2022-05-17-1.png" alt="img1" /></p><p>最大值 <span class="math inline">\(N-1\)</span> 只能在 <spanclass="math inline">\(P_i=N/2\)</span> 处取到，考虑这样的话 LIS就是[1,2,3,...N-1] 那么从后面考虑这个是被确定的。</p><hr /><p><a href="https://atcoder.jp/contests/arc140/tasks/arc140_d">D</a>给你一个基环树森林有的点没有向外连边，你需要给他们指定出边，问所有情况的连通块个数。</p><p>我没有往基环树那面想。。。。。这个基环树的性质十分重要。</p><p>由于最终是基环树森林，所以连通块个数=环个数，环个数，，这样转化成了有标号计数，（就是我们按照标号的顺序连边）</p><p>变成了 <span class="math inline">\(\prod (1+w_x)\)</span> 这种 egf乘法，直接做 <span class="math inline">\(O(n^2\log n+n^2)\)</span>好像分治乘法能做到 <span class="math inline">\(O(n\log^2n)\)</span>但现在不是很清楚如何去掉 <spanclass="math inline">\(n^2\)</span>。。。</p>]]></content>
    
    
    <categories>
      
      <category>whole round</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ABC251</title>
    <link href="/2022/05/15/abc251/"/>
    <url>/2022/05/15/abc251/</url>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/abc251/tasks">Link</a></p><p>A,B,C都是模拟题没啥好说的。</p><p><a href="https://atcoder.jp/contests/abc251/tasks/abc251_d">D</a>最开始想的是贪心做，以为信息熵足够贪心就行，然后发现不对。。。。。</p><p>然后看拿什么1,2,4,8,15什么的自然想到能不能把二进制拆开那么做。，这样数量太多了。所以大概就能想到按10进制分，就xx0000,xx00,xx这样三组恰好 297。</p><hr /><p><a href="https://atcoder.jp/contests/abc251/tasks/abc251_e">E</a>很简单的DP，拆下环就行。</p><hr /><p><a href="https://atcoder.jp/contests/abc251/tasks/abc251_f">F</a>想了一小会，是调整那样做，复杂度爆炸。</p><p>然后突然想起来tarjan无向图没有横叉边，然后第一问dfs显然了。。。。。</p><p>既然第一问是dfs，也不难想到第二问是bfs。</p><p>tarjan救命属于是。</p><hr /><p><a href="https://atcoder.jp/contests/abc251/tasks/abc251_g">G</a>简单题但是输给了基本功不行。</p><p>看成了闵氏和，第一次。。</p><p>首先最后的交一定只有 <span class="math inline">\(n,n\leq 50\)</span>条边，因为是平移原图型。</p><p>就是顺时针来讲，一条边（向量）的限制是”对应点在这个向量顺时针方向“，也就是叉积<span class="math inline">\(\leq0\)</span>。</p><p>然后我们需要找到平移最远的一个向量，这个是相当于点到直线距离，你可以叉积算面积然后除以底。</p><p>这样你就可以 <span class="math inline">\(O(mn+nq)\)</span>求解了。</p><hr /><p><a href="https://atcoder.jp/contests/abc251/tasks/abc251_h">Ex</a>典中点套路题。</p><p>贡献是 <span class="math inline">\(\binom{n-k}{i} \bmod 7\)</span>然后实际上我们对每个结果点，计算每一段区间的贡献。</p><p>大概记 <span class="math inline">\(d=n-k\)</span> ，就是要看一段区间<span class="math inline">\([l,r]\)</span> 的 <spanclass="math inline">\(\sum\binom{d}{i}\)</span> 。</p><p>这个东西可以<strong>直接</strong>lucas然后数位 DP,会多<spanclass="math inline">\(\mathrm{polylog}\)</span>。（好像甚至是2log的。。）</p><p>冷静想一下，实际上虽然我们要算 <spanclass="math inline">\(O(km)\)</span> 个区间，但是对于每个 <spanclass="math inline">\(i\)</span> 不同的 <spanclass="math inline">\(k\)</span> 只会加入 <spanclass="math inline">\(O(1)\)</span> 个值。</p><p>这样就直接lucas可以做到 <span class="math inline">\(km\log\)</span>的。</p><p>仔细思考一下发现我们从 <span class="math inline">\(l\)</span> 加到<span class="math inline">\(r\)</span>如果我们暴力枚举进位过程的话，那么进位次数是 <spanclass="math inline">\(O(r-l)\)</span> 的，考虑进位次数的上界是 <spanclass="math inline">\(\frac{d}{7}+\frac{d}{7^2}+\frac{d}{7^3}+\cdots\)</span>。</p><p>这样我们暴力模拟进位过程每次复杂度可以看成均摊 <spanclass="math inline">\(O(1)\)</span> 的。实际表现不慢。</p>]]></content>
    
    
    <categories>
      
      <category>whole round</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>串串超人与山姆大叔</title>
    <link href="/2022/05/13/Rec-string/"/>
    <url>/2022/05/13/Rec-string/</url>
    
    <content type="html"><![CDATA[<p>串串超人与山姆大叔</p><span id="more"></span><p>完成度，(6 of 8) and (0 of 7)。。。。。。</p><div class="note note-primary">            <p>working on</p>          </div><hr /><p><a href="https://www.luogu.com.cn/problem/CF547E">CF547E</a> 题意给你n个字符串，问一个字符串在一个区间出现的次数。</p><div class="note note-success">            <p>safe</p>          </div><p>较为容易的一道题，我的做法是先建出广义SAM,对于一个串对应一个节点。</p><p>那就按时间在广义SAM上加串（给中止点+1），然后一个询问拆成前缀减前缀即可。</p><p>复杂度 <span class="math inline">\(\mathcal{O(n\logn)}\)</span>。</p><hr /><div class="note note-warning">            <p>bad</p>          </div><p><a href="https://www.luogu.com.cn/problem/CF504E">CF504</a>题意给你一颗树，树上节点有字符，询问是对两个链询问 lcp长度。</p><p>挺屑的一道题，，，</p><p>一眼二分哈希，但是直接二分/倍增的话k级祖先不是很好处理。</p><p>那么我们就要请出解决链上问题的利器，链剖分。</p><p>重链剖分后，如果两个点在一条重链上那么会可以通过预处理 <spanclass="math inline">\(O(n)-O(1)\)</span> 求出k级祖先。</p><p>现在链被分为 <span class="math inline">\(O(\log n)\)</span>个区间，我们对两组区间求lcp。</p><p>这就有一个灵魂的问题了。。这个像two pointers的问题怎么<strong>实现</strong>，我一直不是很会这个东西的实现，，包括联合省选的D1T2。</p><p>解决办法是我们从左往右扫每次，每次左端点是对齐的，我们只需要选较小的右端点即可。</p><p>实现类似two pointers ，注意将一些功能函数化会事半功倍。</p><p>部分代码，供参考。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> p[top[x]][dep[x]-k];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> p[top[x]][dep[x]+k];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nxt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ori,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(lca(ori,x)!=x) <span class="hljs-keyword">return</span> down(x,k);<br>    <span class="hljs-keyword">return</span> up(x,k);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">app</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;i,<span class="hljs-keyword">int</span> &amp;l,<span class="hljs-keyword">int</span> &amp;r,<span class="hljs-keyword">const</span> vii &amp;a)</span></span>&#123;<br>    i++;<span class="hljs-keyword">if</span>(i&lt;a.size()) l=a[i].first,r=a[i].second;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ext</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vii &amp;a,<span class="hljs-keyword">const</span> vii &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(i&lt;a.size()&amp;&amp;j&lt;b.size())&#123;<br>        <span class="hljs-keyword">int</span> d1=dis(oa,r1),d2=dis(ob,r2),d=dis(oa,l1);<br>        <span class="hljs-keyword">int</span> k=min(d1,d2)-d;<br>        <span class="hljs-keyword">if</span>(w(l1,nxt(oa,l1,k))==w(l2,nxt(ob,l2,k)))&#123;<br>            <span class="hljs-keyword">if</span>(d1==d2) app(i,l1,r1,a),app(j,l2,r2,b);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d1&lt;d2)&#123;<br>                app(i,l1,r1,a);<br>                l2=nxt(ob,l2,k+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                app(j,l2,r2,b);<br>                l1=nxt(oa,l1,k+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个要维护4个点因为实在树上，尽管左端点rank一样但实际上可能不一样。</p><p>这里的 <span class="math inline">\(d1-d\)</span> 和 <spanclass="math inline">\(d2-d\)</span> 代表的是rank。</p><p>虽然但是，他还是好屑呀。</p><hr /><div class="note note-primary">            <p>Euclid</p>          </div><p><a href="https://www.luogu.com.cn/problem/CF204E">CF204E</a>题意，给n个字符串，问每一个字符串有多少子串在最少k个串中出现。</p><p>最开始不是很会，在几处都卡住了.......以为只能SA。。。。。。</p><p>首先我是山姆大叔的忠实信徒。</p><p>先建出广义SAM，考虑现在只有 <spanclass="math inline">\(O(\sum|s|)\)</span>个等价类了，我们要对每个等价类看他的出现次数。</p><p>这本质上我们要覆盖一棵“导出子树”，大概就是给出几个关键点，覆盖这个虚树。</p><p>这个比较厉害的树上差分出现了，首先任意dfs出来一个顺序。</p><p>按dfs序排序，然后现在整棵树的权值就是</p><p><span class="math inline">\(w(1)+\sum_{i\ge 2}w(i)-w(lca(i,i-1))\)</span>。这样的，为啥对？我们实际上维护的是树的最右链。这样的话那一定对了。</p><p>这样可以让我们在 <span class="math inline">\(O(|s|\log|s|)\)</span>的复杂度内加入贡献。</p><p>剩下的统计也是类似的。</p><hr /><div class="note note-secondary">            <p>wait for solving</p>          </div><p><a href="https://www.luogu.com.cn/problem/CF1012D">CF1012D</a></p><hr /><div class="note note-success">            <p>safe</p>          </div><p><a href="https://vjudge.net/contest/492996#problem/E">StringProblem</a> 题意给你一个串对于每一个前缀求出前缀的字典序最大子串。</p><p>首先你一定一定要发现答案是一个前缀的<strong>后缀</strong>。你发现就是对前<span class="math inline">\(i\)</span>个后缀排序，直接求出后缀数组即可。</p><p>山姆大叔呜呜呜。</p><hr /><div class="note note-success">            <p>safe</p>          </div><p><a href="https://vjudge.net/contest/492996#problem/F">SuffixAutomaton</a>也是比较简单的。题意吧所有子串先按len排，再按字典序拍问rank=i的串是啥。</p><p>我的做法是倒着SAM求出后缀树。这样可以dfs出来等价类的大小顺序。</p><p>然后你考虑按时间枚举长度，你会发现节点出现的时间是一个区间，这样也是可以化成两个操作。</p><p>然后那线段树维护一下，在上面二分即可。</p><hr /><div class="note note-success">            <p>safe</p>          </div><p><a href="https://www.luogu.com.cn/problem/CF914F">Substrings in aString</a> 题意是你要支持修改一个字符，和查询一个串在 <spanclass="math inline">\(s[l,r]\)</span> 出现次数。</p><p>前几天模拟赛的题提示我们字符串问题由于字符集大小有限，可以使用bitset维护每个字符出现的位置，通过&amp;和&lt;&lt;匹配给定串。</p><p>这样做就可以做到 <spanclass="math inline">\(\mathcal{O(\frac{n^2}{w})}\)</span>。</p><hr /><div class="note note-primary">            <p>Euclid</p>          </div><p><a href="https://www.luogu.com.cn/problem/CF700E">CF700E</a></p><p>waiting for update</p>]]></content>
    
    
    <categories>
      
      <category>string</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KM 二分图最大权匹配。</title>
    <link href="/2022/05/11/KM-simple-thought/"/>
    <url>/2022/05/11/KM-simple-thought/</url>
    
    <content type="html"><![CDATA[<!--入门解说--><p>可以说是抄的ix35的洛谷博客了。。。。。</p><h3 id="改写">改写</h3><p>首先要讲最大权匹配改写成线性规划形式。 <span class="math display">\[\begin{aligned}\max \sum_{i\leq m}w_ix_i\\s.t. \forall i\leq n,\sum_{j\leq m}w(i,j)x_j\leq 1\end{aligned}\]</span> <span class="math inline">\(x_i\)</span>代表着每条边选不选。</p><p><span class="math inline">\(w(i,j)\)</span> 表示 一条边 <spanclass="math inline">\(j\)</span> 的一端是不是 <spanclass="math inline">\(i\)</span>。</p><p>将这个东西转成对偶形式（暂时不会证明对偶等价于原问题/kk，待填） <spanclass="math display">\[\begin{aligned}\min \sum_{i\leq n}y_i\\s.t. \forall i\leq m,\sum_{j\leq n}w(i,j)y_i\geq w_i\end{aligned}\]</span> 含义变为 给每一点选一个正权值 <spanclass="math inline">\(y_i\)</span>。</p><p>使得对于每一条边，边权小于两端点权和。</p><hr /><h3 id="第一次转化">第一次转化</h3><p>二分图最大权匹配，我们要将他转化为，最大权完美匹配。</p><p>不存在负权，那就添加虚点，和对面点连 0 权边。</p><p>存在负权，最大匹配不可能包含负权边，无视负权即可。</p><p>存在负权完美匹配，没有边设为 <spanclass="math inline">\(-\infin\)</span></p><hr /><h3 id="第二次转化">第二次转化</h3><p>我们说，如果现在我们把 <spanclass="math inline">\(w_x+w_y=e(x,y)\)</span>满足的边保留，如果现在存在一个完美匹配，那么这个就是最大完美匹配。</p><p>原因：考虑完美匹配 <span class="math inline">\(\sum w_i\leq\sum_{x\in \mathrm{l}} w_x+\sum_{x\in\mathrm{r}}w_x\)</span></p><p>将相等边保留，恰好是一个取等条件。注意看上面的对偶形式，上界恰好就是我们要minimize的东西。</p><p>现在我们的目标是给 <span class="math inline">\(a,b\)</span>赋值使得满足相等边有完美匹配。</p><hr /><h3 id="调整法">调整法</h3><p>对于增广路，很神奇的是，有这样一种调整方法，我们将左部点<spanclass="math inline">\(-d\)</span>，将右部点 <spanclass="math inline">\(+d\)</span>，而初始增广点也是左部点 <spanclass="math inline">\(-d\)</span>。</p><p>这样如果当前二分图依然合法，那么我们的<spanclass="math inline">\(\sum w\)</span> 下降了 <spanclass="math inline">\(d\)</span>。进一步的，我们将左部点减小，那么很有可能产生新的增广边，使得匹配数增加。</p><p>显然不可能无条件减，bound就是 <spanclass="math inline">\(w_i+w_j-d\ge e(i,j)\)</span>，其中 <spanclass="math inline">\(i\)</span> 是增广路上的左部点,<spanclass="math inline">\(j\)</span> 是<strong>不在</strong>增广路上的右部点。</p><p><span class="math inline">\(d\leq w_i+w_j-e(i,j)\)</span> 这样<spanclass="math inline">\(d\)</span> 很有可能是 0，让我们无功而返。</p><p>那么我们就应该把整个增广网络拿出来，在进行上述判断。</p><p>此时我们想一下，如果d到达了非零上界 $ w_i+w_j-e(i,j)$此时必然会使增广路边长，匹配数变大。可以发现最多增广 <spanclass="math inline">\(O(n)\)</span> 次。</p><p>对于右部点记录 <span class="math inline">\(slack_i\)</span> 表示<span class="math inline">\(\min_{j} ( w_i+w_j-e(i,j))\)</span> 。</p><p>每次最后被增广的点 <span class="math inline">\(x\)</span>，选择一个最小的 <span class="math inline">\(slack_y\)</span> ，通过减去<span class="math inline">\(slack_y\)</span>，尝试将 <spanclass="math inline">\(y\)</span> 增广，注意此时可能 <spanclass="math inline">\(x\to y\)</span> 并不是相等路。</p><p>所以需要记录一下 <span class="math inline">\(slack\)</span> 的 <spanclass="math inline">\(argmin\)</span> 位置，而增广 <spanclass="math inline">\(y\)</span> 是从 <spanclass="math inline">\(argmin\)</span> 而并非 <spanclass="math inline">\(x\)</span> 而来（虽然 argmin 可能等于 x）。</p><p>中止条件就是成功使匹配数++。</p><p>注意：本质上我们在维护<strong>一堆</strong>增广路。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br><span class="hljs-built_in">memset</span>(s,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span>(s));<br><span class="hljs-built_in">memset</span>(pre,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(pre));<br>    <span class="hljs-keyword">int</span> cur;<br>cur=<span class="hljs-number">0</span>,mat[<span class="hljs-number">0</span>]=x;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>x=mat[cur];<br>vis[cur]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> pos=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=n+<span class="hljs-number">1</span>;i&lt;=n+n;i++) &#123;<br><span class="hljs-keyword">if</span> (vis[i]) &#123;<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">int</span> tmp=w[i]+w[x]-d[x][i];<br><span class="hljs-keyword">if</span> (tmp&lt;s[i]) pre[i]=cur;<br>            s[i]=min(s[i],tmp);<br><span class="hljs-keyword">if</span> (s[i]&lt;=s[pos]) &#123;pos=i;&#125;<br>&#125;<br>        <span class="hljs-keyword">int</span> dis=s[pos];<br>w[mat[<span class="hljs-number">0</span>]]-=dis;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> y=n+<span class="hljs-number">1</span>;y&lt;=<span class="hljs-number">2</span>*n;y++)&#123;<br>            <span class="hljs-keyword">if</span>(vis[y]) w[y]+=dis,w[mat[y]]-=dis;<br>            <span class="hljs-keyword">else</span> s[y]-=dis;<br>        &#125;<br>cur=pos;<br><span class="hljs-keyword">if</span> (!mat[pos]) &#123;<span class="hljs-keyword">break</span>;&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (cur) &#123;<br>mat[cur]=mat[pre[cur]];<br>cur=pre[cur];<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>也就是说我们并不能想当然的认为是按照bfs的顺序增广的，所以需要记录 pre（argmin）。</p>]]></content>
    
    
    
    <tags>
      
      <tag>线性规划</tag>
      
      <tag>simple thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SWERC 2021-2022</title>
    <link href="/2022/04/25/cf-icpc-1662-part/"/>
    <url>/2022/04/25/cf-icpc-1662-part/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1662">Links</a></p><p>和袁妹妹打的一场acm。感觉由于是7点开始，有点疲劳了，我自己状态不是很好，爬了。。。。。</p><p>赛时只做对了6道，实际上可以做出8，9道以上，两道是DS，而且我思路都不是很对。而且还是较为简单的“送分题”，DS真的应该多加练习。</p><p>只说我做的吧。。</p><p><a href="https://codeforces.com/contest/1662/problem/D">D</a>题。</p><p>题意是每次你可以插入或删除 <spanclass="math inline">\(\text{aa,bb,cc,abab,bcbc}\)</span> ，问你能不能将<span class="math inline">\(A\)</span> 串变为 <spanclass="math inline">\(B\)</span> 串。</p><p><span class="math inline">\(n\)</span> 竟然只开到了 <spanclass="math inline">\(100\)</span> 让我以为是dp什么的。。</p><p>但是存在 <span class="math inline">\(\text{a}\to\text{aabcb}\to\text{bcb}\)</span> 这种，不是很能dp。</p><p>仔细考虑一下发现这样一种变换 <spanclass="math inline">\(\mathrm{ab\to ababba\to ba}\)</span>所以暗示了我们本质是在交换。</p><p>只不过 <span class="math inline">\(\text{a,b,c}\)</span>不对称。所以变成 <span class="math inline">\(\text{b}\)</span> 随便动，<span class="math inline">\(\text{a,c}\)</span> 不能交叉动。</p><p>所以剩下的也很简单了，先把连着的消没，然后把 <spanclass="math inline">\(\text{b}\)</span> 放到一起，删掉。</p><p>看剩下的两个只包含 <span class="math inline">\(\text{a,c}\)</span>的串是否相同。</p><hr /><p><a href="https://codeforces.com/contest/1662/problem/F">F</a>题。</p><p>题意是你从 <span class="math inline">\(i\)</span> 走到 <spanclass="math inline">\(j\)</span> 的充要条件是 <spanclass="math inline">\(|i-j|\leq \min(p_i,p_j)\)</span> 。问 <spanclass="math inline">\(i\to j\)</span> 最短路。</p><p>性质想错了。。口胡了。。</p><p>实际上正解就是 bfs。</p><p>只需要满足 <span class="math inline">\(j\in[i,i-p_i],j+p_j\leqi\)</span> 很简单的线段树二分即可解决。</p><p>线段树二分新写法get：你把区间列出来，然后一个一个判断，如果存在答案，那就正常dfs他.</p><p>口胡.jpg</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//[x,y] first &lt;=w</span><br><span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>,d[<span class="hljs-number">100</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">divi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;<br>        d[++tot]=p;<span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x&lt;=mid) divi(p&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y);<br>    <span class="hljs-keyword">if</span>(y&gt;mid) divi(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,x,y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> w)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> l;<span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(t[p&lt;&lt;<span class="hljs-number">1</span>]&lt;=w) <span class="hljs-keyword">return</span> solve(p&lt;&lt;<span class="hljs-number">1</span>,l,mid,w);<br>    <span class="hljs-keyword">return</span> solve(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,w);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> w)</span></span>&#123;<br>    tot=<span class="hljs-number">0</span>;divi(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,x,y);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,p=d[i];i&lt;=tot;i++,p=d[i])&#123;<br>        <span class="hljs-keyword">if</span>(t[p]&lt;=w) <span class="hljs-keyword">return</span> solve(p,l[p],r[p],w);<br>    &#125;<br>    <span class="hljs-keyword">return</span> inf;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我觉得，，挺好写的，因为 divi 就是在找区间。</p><p>这个题赛后一遍过了，爽歪歪。、</p><hr /><p><a href="https://codeforces.com/contest/1662/problem/I">I</a>枚举当前能覆盖道的最后一个。然后二分。</p><p>不知道加强版是神木。</p><p><a href="https://codeforces.com/contest/1662/problem/L">L</a>题。优化simple的 <span class="math inline">\(O(n^2)\)</span> dp。</p><p>发现有绝对值小等。</p><p><span class="math inline">\(|A|\leq B \Longleftrightarrow A\leqB,-A\leq B\)</span> 然后等价二位数点。cdq,BIT什么的就好了。、</p><p>总结，这次和上次 GR都看出来了我时间一晚脑子就不好使，必须要利用上午时间，十一点前的时间、。</p><p><a href="https://codeforces.com/contest/1662/problem/G">G</a>题。。赛后竟然觉得很简单。。</p><p>结论容易猜到，实际上我们能感觉到应该是，一堆点都能到 <spanclass="math inline">\(u\)</span> ，然后 <spanclass="math inline">\(u\)</span> 能到达剩下的点这样最优。</p><p>然后有这样的性质 <span class="math inline">\(u\)</span>就无可厚非是重心了。</p><p>具体证明结论就是说</p><ol type="1"><li>首先不存在内向根（除非叶子），原因是你可以任选一个子树，把所有边反向，然后新增贡献显然。</li><li>外向根同理</li><li>想了一下感觉充要了？？不知道题解在说什么。。。。。。</li></ol><p>然后考虑为啥这样的 <span class="math inline">\(u\)</span>是重心。这个我胡的感觉不太对（猜的结论相当于）。实际上感觉有点显然，如果<spanclass="math inline">\(u\)</span>是这样的点，且不是重心，那么向重心方向的边，也一定指向中心方向，然后这个点就可以看作没用了，听显然了。</p><p>如果是重心我们需要分配子树大小 <span class="math inline">\(s\)</span>，使得最接近 <span class="math inline">\(n-1/2\)</span> 。</p><p>这里题解给出了一种 <span class="math inline">\(O(\frac{n\sqrtn}{w})\)</span> 的做法。</p><p><span class="math inline">\(O(\frac{n\sqrt n}{w} \log n)\)</span>可以用二进制分组背包来做。。。。。。</p><p>但实际上，考虑如果我们要选 <span class="math inline">\(k\)</span>个大小位 <span class="math inline">\(w\)</span> 的物品，可以按 <spanclass="math inline">\(k\)</span> 奇偶分类，如果 <spanclass="math inline">\(k\)</span> 是奇数，那么看作 <spanclass="math inline">\(1\)</span> 个 <spanclass="math inline">\(w\)</span> 和 <spanclass="math inline">\((k-1)/2\)</span> 个 <spanclass="math inline">\(2w\)</span> 。</p><p>偶数就是 <span class="math inline">\(k/2\)</span> 个 <spanclass="math inline">\(2w\)</span> ，那么对于 小于 <spanclass="math inline">\(\sqrt n\)</span> 的我们这么做，每一个只会被更新<span class="math inline">\(O(1)\)</span> 次。</p><p>剩下的都是 <span class="math inline">\(w&gt;\sqrt n\)</span> 的，也是根号个了。复杂度得到了。</p>]]></content>
    
    
    <categories>
      
      <category>whole round</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线性基求交</title>
    <link href="/2022/04/21/linear-base-simple-thought/"/>
    <url>/2022/04/21/linear-base-simple-thought/</url>
    
    <content type="html"><![CDATA[<p>线性基求交。</p><p>大概就是 <span class="math inline">\(A,B\)</span> 线性基求交。</p><p>答案 <span class="math inline">\(C\)</span> 一定满足 <spanclass="math inline">\(\forall x\in C,x\in A,B\)</span> 。</p><p>所以我们考虑 <span class="math inline">\(A\)</span>的每一个基，看他在没在 <span class="math inline">\(B\)</span>中出现。</p><p>如果出现，保留，否则考虑只可能是 <span class="math inline">\(x\inB,x=d_i \oplus \sum d_{k_j},k_j&lt;i\)</span> 这种。</p><p>所以这代表了 <span class="math inline">\(B\)</span> 和小于 <spanclass="math inline">\(i\)</span> 的 <spanclass="math inline">\(d_i\)</span> 一定能表示处 <spanclass="math inline">\(d_i\)</span>。</p><p>所以如果表示出来就加入 <span class="math inline">\(x=d_i \oplus \sumd_{k_j}\)</span> 就好了。</p><p>单次复杂度 <spanclass="math inline">\(\mathcal{O(\log^2)}\)</span></p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">base</span>&#123;</span><br>    ll b[<span class="hljs-number">70</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(base a)</span></span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> vis[<span class="hljs-number">70</span>];<span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">63</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(b[i])&#123;<br>                ll res=<span class="hljs-number">0</span>,ret=<span class="hljs-number">1</span>,x=b[i];<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br>                    <span class="hljs-keyword">if</span>((x&gt;&gt;j)&amp;<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">if</span>(!a.b[j])&#123;<br>                            a.b[j]=x;vis[j]=<span class="hljs-number">1</span>;ret=<span class="hljs-number">0</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        x^=a.b[j];<span class="hljs-keyword">if</span>(vis[j]) res^=a.b[j];<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(ret) b[i]=b[i]^res;<br>                <span class="hljs-keyword">else</span> b[i]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p><a href="https://uoj.ac/problem/698">UOJ698</a></p><p>这个题我赛时想到了，但是少加了个东西，被hack了，但是很简单。</p><p>首先线性基求前缀交，然后你就可以对这个二分了，复杂度 <spanclass="math inline">\(\mathcal{O(nB^2+qB\log^2n)}\)</span></p><p>然后实际上你可以发现，这些线性基都是子空间，如果把他们的元素重新交换什么的，你就可以把每次求交改成删数。</p><p>这样你通过最初的那个基，你就可以打上时间戳即可。</p><p>这个元素重新构造的操作是必要的，我赛事没干这个，就被hack，原因也很显然。</p><p>那么如何重构？，很简单你先把 <spanclass="math inline">\(B_{i+1}\)</span> 的元素先加入，然后在加入 <spanclass="math inline">\(B_i\)</span> 本身的元素。</p><p>所以复杂度 <spanclass="math inline">\(\mathcal{O(nB^2+qB)}\)</span></p><p>我一直卡一个题解说的二分，很难受，没想到考试写的就是正解。</p><hr /><p>线性基可以让我们在 <span class="math inline">\(O(\log B)\)</span>的时间内求出一个集合表示一个数 <span class="math inline">\(x\)</span>的方案数。。注意。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
      <tag>线性基</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>决策单调性随笔</title>
    <link href="/2022/04/15/dp-mono/"/>
    <url>/2022/04/15/dp-mono/</url>
    
    <content type="html"><![CDATA[<p>这个题让我入门了决策单调性（我爬了）。。。。。</p><p>说：谢谢出题人。</p><p>我：“谢谢出题人”。</p><p>首先，转化成 <span class="math inline">\(w_0+w_1,w_2,w_3,\cdots,w_n\)</span>。</p><p>然后有显然的 <span class="math inline">\((+,\min)\)</span>卷积，有:</p><p><span class="math display">\[f_x=\min_{i+j=x}(h_i+g_j)\]</span></p><p>设 <span class="math inline">\(x\)</span> 最优转移点是 <spanclass="math inline">\(p_x\)</span>，通过四边形不等式，证明决策单调性。</p><p><span class="math display">\[\begin{aligned}f_x=h_{p_x}+g_{x-p_x},&amp;f_y=h_{p_y}+g_{y-p_y}\\\text{if } x&gt;y,&amp;p_x&lt;p_y:\\h_{p_x}+g_{x-p_x}&lt;h_{p_{y}}+g_{x-p_{y}}&amp;,h_{p_y}+g_{y-p_y}&lt;h_{p_x}-g_{y-p_x}\\\Longrightarrow g_{x-p_x}+g_{y-p_y}&lt;&amp;g_{x-p_y}+g_{y-p_x}\end{aligned}\]</span></p><p>到这里，已经是四边形不等式的样子了： <spanclass="math inline">\(c(p_x,x)+c(p_y,y)&lt;c(p_y,x)+c(p_x,y)\)</span></p><p>不难发现他说的是反的四边形不等式，<spanclass="math inline">\((p_x,x)\)</span> 包含 <spanclass="math inline">\((p_y,y)\)</span>。</p><p>包含&lt;相交，矛盾了</p><p>所以满足四边形不等式即可。</p><p>所以此时 <span class="math inline">\(p_x&gt;p_y\)</span>。</p><p>移个项，<spanclass="math inline">\(g_{y-p_y}-g_{y-p_x}&lt;g_{x-p_y}-g_{x-p_x}\)</span>，</p><p>注意只需要保证 <spanclass="math inline">\(p_y&lt;p_x&lt;y&lt;x\)</span>,因为如果 <spanclass="math inline">\(y&lt;p_x\)</span> 那么必定决策单调。</p><p>所以含义是 ：</p><p><spanclass="math display">\[\sum_{i=y-p_x+1}a_i&lt;\sum_{i=x-p_x+1}a_i\]</span></p><p>也就是从 <span class="math inline">\(y-p_x+1,x-p_x+1\)</span> 分别选<span class="math inline">\(p_y-p_x\)</span> 个，<spanclass="math inline">\(a\)</span> 单调的话，显然，看成 <spanclass="math inline">\(g\)</span> 就是 <spanclass="math inline">\(g\)</span> 凸。</p><hr /><p>这里需要一些注意了，我们只需要保证 g有着凸性，他的决策就有单调性。（换句话说，<spanclass="math inline">\(f\)</span> 可以不具有凸性）</p><p>如果 g 没有完全凸性，可以（？）适当拆开合并？（我就做过一个在x=0处拆开的）</p><hr /><p>值得注意的是：我们只是在说明对于原始转移点 <spanclass="math inline">\(a&lt;b\)</span>，不可能存在 <spanclass="math inline">\(c&lt;d\)</span>，<spanclass="math inline">\(b\)</span> 转移到 <spanclass="math inline">\(c\)</span> 优于 <spanclass="math inline">\(a\)</span>,且 <spanclass="math inline">\(a\)</span> 转移到 <spanclass="math inline">\(c\)</span> 优于 <spanclass="math inline">\(b\)</span>。</p><p>同时也是这个支撑了整个“决策”单调性，只不过是普通转移，并非“决策”，转移要弱于决策，当然决策成立也可以说是转移的特性吧。</p><p>上面那句话说的是： <span class="math display">\[\begin{aligned}y&lt;x,a&lt;b\\f_x+w(x,a)&amp;&lt;f_y+w(y,a)\\\Longrightarrow f_x+w(x,b)&amp;&lt;f_y+w(y,b)\end{aligned}\]</span> 证明很水： <span class="math display">\[\begin{aligned}f_x+w(x,a)+{\textcolor[rgb]{0.5,0.8,0.7}{w(x,b)+w(y,a)}}&amp;&lt;f_y+w(y,a)+\textcolor[rgb]{0.5,0.8,0.7}{w(x,a)+w(y,b)}\\f_x+{\textcolor[rgb]{0.5,0.8,0.7}{w(x,b)}}&amp;&lt;f_y+\textcolor[rgb]{0.5,0.8,0.7}{w(y,b)}\\\end{aligned}\]</span> 绿色的的是四边形不等式。</p><p>至于如何实现四边形不等式呢？</p><p>给出以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> tl,<span class="hljs-keyword">int</span> tr)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> mn=<span class="hljs-number">1e18</span>,pos=tr;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=tl;j&lt;=min(tr,mid<span class="hljs-number">-1</span>);j++)&#123;<br>        <span class="hljs-keyword">if</span>(mid-j&gt;=w[x].size()) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">int</span> val=f[j]+w[x][mid-j];<br>        <span class="hljs-keyword">if</span>(val&lt;mn)&#123;<br>            mn=val,pos=j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        g[l]=min(g[l],mn);<span class="hljs-keyword">return</span>;<br>    &#125;<br>    dp(x,l,mid,tl,pos);dp(x,mid+<span class="hljs-number">1</span>,r,pos,tr);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>涵义： <code>dp(X,l,r,tl,tr)</code> 是当前的状态在 <code>l,r</code>这个范围，决策状态在 <code>tl,tr</code> 这个范围。</p><p>这是 <ahref="http://192.168.102.138/JudgeOnline/problem.php?cid=1608&amp;pid=0">这个题</a>部分代码，需要注意的是我们仅仅保证了 <spanclass="math inline">\([1,\mathrm{lim}]\)</span> 处的凸性，而未保证 <spanclass="math inline">\(0\)</span> 的决策也具有单调性，所以 <spanclass="math inline">\(0\)</span> 是一个特殊转移。</p><p>也就是为什么我们只能循环 <code>j</code> 到 <code>mid-1</code>.</p><hr /><p>半在线的话可以二分加队列。</p><p>实际上由于说的性质，对于点对 <spanclass="math inline">\((x,y),x&lt;y\)</span> 来说，如果 <spanclass="math inline">\(trans(x,p)\)</span> 劣于 <spanclass="math inline">\(trans(y,p)\)</span> 那么 <spanclass="math inline">\(i&gt;p,trans(x,i)\)</span> 将必不可能优于 <spanclass="math inline">\(trans(y,i)\)</span> 。</p><p>暗示存在单调性也就是可以二分找出这样的 <spanclass="math inline">\(p\)</span>。</p><p>维护一个队列，<span class="math inline">\(l\)</span>端是先前最优决策，如果此时比 <span class="math inline">\(l+1\)</span>劣，直接弹出。</p><p><span class="math inline">\(r\)</span> 段是时间最后决策，如果 <spanclass="math inline">\(now\)</span> 比 <spanclass="math inline">\(r\)</span> 要更加优秀（相比 <spanclass="math inline">\(r-1\)</span>），那就可以弹出 <spanclass="math inline">\(r\)</span> 了。</p><p>比较优秀和劣都是二分出端点。</p><hr /><p>update at 2022.4.15</p><p>这里就大概总结一下 Max,+ 这种 dp 的常见优化技巧？</p><ol start="0" type="1"><li>决策单调性，四边形不等式，在 min下记忆方法，包含大于交叉，交叉小于包含。也就是我们更期待交叉的值。</li><li>斜率优化，将 <spanclass="math inline">\(\mathrm{dp}(n)=\max(\mathrm{dp}(i)+v_i+w_iw_n)\)</span>，将<span class="math inline">\(\mathrm{dp}(i)+v_i\)</span> 看作 <spanclass="math inline">\(y\)</span>，<spanclass="math inline">\(w_i\)</span> 看作 <spanclass="math inline">\(x\)</span> ，此时变成过 <spanclass="math inline">\((x,y)\)</span> 斜率为 <spanclass="math inline">\(w_n\)</span>的直线截距问题，可以放到凸包上了。</li><li>李超树。</li></ol>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/14/draft/"/>
    <url>/2022/04/14/draft/</url>
    
    <content type="html"><![CDATA[<p><span class="math display">\[M\mid x(x-A)\Longrightarrow d_0\mid x,d_1\mid (x-A),(d_0\mid M,d_1\midM,M\mid d_0d_1)\]</span></p><p><span class="math display">\[g=\gcd(x,n)\\\gcd(g,x/g)=1,\gcd(g,n/g)=1\\x^{k^t-1}=1 \pmod {n/\gcd(n,x)}\]</span></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>lgv引理矩阵树</title>
    <link href="/2022/04/11/lgv-matrixtree-simple-thought/"/>
    <url>/2022/04/11/lgv-matrixtree-simple-thought/</url>
    
    <content type="html"><![CDATA[<p>1。哭哭，不是很会线代。。。</p><p>真的瞎说属于是了。。</p><h3 id="lgv">lgv</h3><p>lgv讲的是你有一个dag（有权），并且钦定了 <spanclass="math inline">\(n\)</span> 个源，<spanclass="math inline">\(n\)</span> 个汇。</p><p>路径权值定义成了边权的乘积。</p><p>你要先匹配路径端点，也就是对于 <spanclass="math inline">\((i,p_i)\)</span> 含义就是 <spanclass="math inline">\(i\)</span> 号源，匹配到 <spanclass="math inline">\(p_i%\)</span> 号汇。</p><p>你要计算的是 ，对于每一种匹配方式，大小为 <spanclass="math inline">\(|n|\)</span>的路径的集合，使得集合中路径两两无交，并且都是 <spanclass="math inline">\(i\)</span> 源到 <spanclass="math inline">\(p_i\)</span> 汇的路径 的 权乘积的<strong>有符号</strong>和。</p><p>有符号和就是每个排列要算上 <spanclass="math inline">\(\tau(p)\)</span>。 <span class="math display">\[\begin{aligned}\mathrm{ans}=\mathrm{det(M)}\\M_{i,j}=E(i,j)\end{aligned}\]</span> <span class="math inline">\(E(i,j)\)</span> 含义是从 <spanclass="math inline">\(i\)</span> 源到 <spanclass="math inline">\(j\)</span> 汇所有可行路径权值的和。</p><p>为什么呢？你看一下行列式本质上也是在枚举 <spanclass="math inline">\((i,p_i)\)</span>只不过，他把所有可行的路径权都乘起来了。</p><p>由于是带符号和，对于一个交集不为空的路径集合 <spanclass="math inline">\(\mathcal{P}\)</span>考虑源最小的，第一次相交的位置，比如说。</p><p><span class="math inline">\((a,p_a),(b,p_b)\)</span> 第一次交于 <spanclass="math inline">\(x\)</span>。</p><p><span class="math inline">\((a,x,p_a),(b,x,p_b)\)</span>我们把它映射到 <span class="math inline">\((a,x,p_b) ,(b,x,p_a)\)</span> 就是把路径翻折，想卡特兰那样，是可以构成双射的。</p><p>比较显然。因为钦定了最小的，不难发现由于 <spanclass="math inline">\(p_a,p_b\)</span> swap了，所以逆序对奇偶改变，所以抵消。</p><hr /><h3 id="矩阵树">矩阵树</h3><h4 id="无向图">无向图</h4><p>矩阵树不会证明、。。</p><p>无向图就是说生成树个数为 <span class="math inline">\((D-E)\)</span>的余子式 (degree-edge) ，带权的生成树和可以看成重边。</p><p>实际上我们应该忽略自环。</p><p>注意无向图对于一条边 <span class="math inline">\((x,y)\)</span> 会给<span class="math inline">\(E_{x,y},E_{y,x}\)</span> 两个贡献。</p><hr /><h4 id="有向图">有向图</h4><p>有向图情况就分为两种情况了。</p><p>根向生成树，边指向定好的根,答案为 <spanclass="math inline">\((D^{out}-E)\)</span>去除根的那一行那一列的余子式。</p><p>叶向生成树，边来自定好的根,答案为 <spanclass="math inline">\((D^{in}-E)\)</span>去除根的那一行那一列的余子式。</p><p>记忆方法，可以画一个2个点一条边的图看答案。</p><p><span class="math inline">\(E\)</span> 是有向图，所以 <spanclass="math inline">\((x,y)\)</span> 只会提供 <spanclass="math inline">\(E_{x,y}\)</span> 的贡献了。。。</p><hr /><h4 id="best-引理">best 引理</h4><p>一个欧拉图（有向）<span class="math inline">\(x\)</span>开始的<strong>欧拉回路</strong> 个数为：</p><p><span class="math inline">\(C\cdot\mathrm{deg}_x\prod(\mathrm{deg}_u-1)!\)</span></p><p><span class="math inline">\(C\)</span> 是 <spanclass="math inline">\(x\)</span> 为根的根/叶向树。</p><p>大概是构造了这样一个双射，一个根向树对应着 若干 欧拉回路。</p><p>我们把非树边随意排序，然后我们通过一个树+排列构造一个欧拉回路。</p><p>我们按定好的序走非树边，最后走那条树边。由于你求欧拉回路的时候就能保证一定存在，所以这么做一定构造出欧拉回路。</p><p>那么如何说明一个欧拉回路一定对应这一个树+序列？</p><p>每个点最后一次到的时候连边。只需要说出没有环即可。</p><p>如果有环说明终点在环上，但是很遗憾终点是根，并且根不能有出边。。。。双设成立。</p><p>回忆一下有向图有欧拉回路充要条件是每个点 入度=初度。</p><p>有欧拉路的充要条件是只存在两个点不满足上述条件，一个入-出=1，另一个是-1。</p><p>那么我们不难想到欧拉路个数实际上只需要连一条，并且钦定是树边即可。</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>records on</title>
    <link href="/2022/03/23/records-on/"/>
    <url>/2022/03/23/records-on/</url>
    
    <content type="html"><![CDATA[<center>Records on</center><center>妄图使用数学方法解决组合问题的的人类，</center><center>悔改吧,组合意义蕴含的能量远超你想象</center><p>实际上，如同 title 所说的，从现在开始，将要开始记录。</p><center>也正如那些古老的石碑，存在的意义不是证明，而只是记录</center><center>属于我的故事开始了。</center><figure><imgsrc="https://cdn.jsdelivr.net/gh/proton-z/cdn@3.1/2233/wallhaven-z83o6y.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>2022-3-24</p><p><a href="http://47.92.197.167:5283/contest/175/problem/1">T1</a></p><p>发现了，如果是合法解的话，那么一定可以拆分成下图这样的。</p><figure><img src="\img\2022-03-25-1.png" alt="img2" /><figcaption aria-hidden="true">img2</figcaption></figure><p>后面的可以随便×个 <span class="math inline">\(2^k\)</span>。</p><p>前面要求那个不到 <span class="math inline">\(0\)</span> 的子序列<span class="math inline">\(B\)</span> 要大于后面最大的。</p><p>其实后面的我们可以直接看成 <span class="math inline">\(B\)</span>把后面的全连起来了。</p><p>然后首先考虑怎么求，能划分成两个下降子序列的排列的个数。</p><p><strong>往后面加数真的不是很容易，那么不妨考虑按值域枚举，一个一个插入。这个很关键。</strong></p><p>这样，你考虑一下最后一个数能插到的地方，显然是一个连续段，所以不妨设dp状态。</p><p><span class="math inline">\(f_{i,j}\)</span> 表示插入了 <spanclass="math inline">\(i\)</span> 个，产生的最后连续段长度是 <spanclass="math inline">\(j\)</span>。你会发现我们如果向最后插入，我们钦定了第一个子序列必须选。</p><p>所以转移 <span class="math inline">\(f_{i,j}=\sum f_{i-1,k},k\geqj-1\)</span>。</p><p>所以化成后缀和，就变成了组合数（卡特兰），就完事了。</p><p>2022-3-24 这个codeforces感觉挺可惜的，但实际上我觉得主要还是自己没有特别熟悉cf，找一找手感，估计会好起来的。</p><p>训练量太少了。</p><p>怎么就突然 2022-3-27了。。。。。</p><p>2022-3-25 的 T3</p><p><strong>题目大意</strong>：一个树有两种颜色，每次修改操作为：一个颜色连通块+w,翻转一个点的颜色，链，子树+w，以及询问x所在连通块max。</p><p>和我最开始的预期差不多，链和子树可以轻易的使用重链剖分解决。</p><p>那么思考一下如何颜色相同连通块+,求max。</p><p>我们可以发现，对于一个树连通块，一定有一个顶点，那么所有修改的点都是这个点子树内的。</p><p>当然除了一些异色点分开了一些子树的话。</p><p>现在我们需要思考如何刻画在同一个联通块内的。</p><p>可以发现就是这个点到根异色点个数，就能很好描述这件事。</p><p>实际上，我们需要在x的子树内，将num等于num[x]的点全部修改。</p><p>这样我们本质上 [sz[x],sz[x]+dfn[x]-1]上内的num[x]=num[v]的v进行修改。</p><p>这是不好改的，但是你发现 num[x]=num[v] 本质上也就是 num[x]=min。</p><p>这样是可以做的，但是注意我们一九需要 修改num[x]所以我们pushdown的时候改变一下策略，先把 num 的tagpushdown这样可以保证现在p的num，和son[p] 的num是绝对正确的。</p><p>反过来想如果这个有tag的话，那么说明这个区间自从打tag开始就没有被修改了。</p><p>这么做的正确性便有了保障。</p><p>和xsy上一道题很像。。。。</p><hr /><p>约数的根号和？</p><p>这个大概就可以分析，因为sqrt积性，显然。。。 <spanclass="math display">\[\begin{aligned}\prod_i\sum_{j\leq a_i}(\sqrt{p^j})&lt;\prod_{i}\frac{\sqrt{p^{a_i+1}}}{\sqrt{p}-1}=\sqrt n\prod\frac{\sqrt{p}}{\sqrt p-1}\\\end{aligned}\]</span> 后面那个不是很会分析/kk,按照邓老师说的可能是（？）<spanclass="math inline">\(\mathrm{polylog}\)</span> 级别的？</p><hr /><p><a href="https://www.luogu.com.cn/problem/P2081">迷失游乐园</a></p><p>挺水的，大概树和基环树唯一差别，只是多了一条可能有贡献的边。</p><p>我们就枚举这个边的贡献，完事了，simple 换根dp......其实挺复杂的。</p><p><a href="http://47.92.197.167:5283/contest/180">2022-4-5</a></p><p>T3 很简单 f就是卡特兰，然后问你让 <spanclass="math inline">\(\binom{2n}{n}\)</span> 的 <spanclass="math inline">\(7\)</span> 因子最大化。</p><p>我们都知道 <span class="math inline">\(\binom{n}{m}\)</span> 的 <spanclass="math inline">\(p\)</span> 因子个数是 <spanclass="math inline">\(n+(n-m)\)</span> <spanclass="math inline">\(p\)</span> 进制下的进位数，所以换言之，我们要找到<span class="math inline">\(l\leq x\leq r\)</span> 使得 <spanclass="math inline">\(2x\)</span> 进位数最多。</p><p>你可以贪心找到 <span class="math inline">\(l,r\)</span>的lcp后一位，接下来有两种选择。</p><ol type="1"><li>xxxxxxx (<span class="math inline">\(l_k-1\)</span>)666666666666666666666 这样的</li><li>xxxxxxx(<spanclass="math inline">\(l_k\)</span>)3333333333333333333333334这样的</li></ol><p>我们考虑 1 是普遍都有的。</p><p>2需要我们在找到前缀3，看下一位是否&gt;=4。</p><p>比较卡我的地方是 高精度换进制。。。。。</p><p>复杂度 <span class="math inline">\(O(n^2/12)\)</span>当然是12个压一位，然后mod 7 直接加起来%7即可了。</p><p>T2 是原题。</p><p>大概就是先写出dp：(<span class="math inline">\(f_{i,j}\)</span>表示当你在i节点t时刻的最小期望长度) <span class="math display">\[f_{i,j}=\min{(f_{0,0}+j,\sum_{y,l\leq s\leq r}f_{y,j+s}\times p)}\]</span> 含义是当前状态你可以选择会到初始情况。也可以继续走下去。</p><p>不能dp的主要原因是 <span class="math inline">\(f_{0,0}\)</span>很讨厌</p><p>然后这种题的思路就是你把 <span class="math inline">\(f_{0,0}\)</span>看成类似主元的东东。然后你分析一下你的 如果你设 <spanclass="math inline">\(x=f_{0,0}\)</span>，那么把转移的 <spanclass="math inline">\(f_{0,0}\)</span>改成 <spanclass="math inline">\(x\)</span> 后的,<spanclass="math inline">\(f_{0,0}\)</span>实际上是一个一次函数，实际上如果你考虑 所有 <spanclass="math inline">\(\min\)</span> 的情况，他其实是一个直线取 min也就是下凸壳。</p><p>我们实际上也是想解方程 <span class="math inline">\(F(x)=x\)</span>这种的。你考虑实际含义只能有一个解，那么直线与凸壳交点也只能有一个了，可以二分。</p><p>T1</p><p>。。。。我竟然忘记了点分治。</p><p>重写一下点分治用途，点分治可以将经过一个点的链，分成 <spanclass="math inline">\(\log\)</span>级别种。所以在处理链问题，点分治有奇效。。。</p><hr /><p>2022-4-26？</p><p>待修改的整体二分？我们那就得按照时间来自然定序了，考虑的时候并不是cdq，当前我们找到了答案<span class="math inline">\([l,r]\)</span> ，而操作时间区间为 <spanclass="math inline">\([ql,qr]\)</span>，那么对于一个 <spanclass="math inline">\(i\)</span> 询问，我们只考虑前面当前合法的 (<spanclass="math inline">\([v_j\leq mid]\)</span>)的算上贡献，如果此时贡献足够了说明进到左递归区间，那就直接进入。</p><p>如果不够那说明进入有区间，注意右区间的都是 <spanclass="math inline">\(&gt;mid\)</span> 的此时必须将 <spanclass="math inline">\(\leq mid\)</span>贡献消去，并且由于天然的时间序，进入左侧的不可能也不应该贡献到这个询问。。</p><hr /><p>4-10</p><p><ahref="https://www.luogu.com.cn/problem/solution/P7949">左方之地</a></p><p>这个题，，主要的key是你看到有K个不同要第一时间想起差分。</p><p>没错，现在变成每次 <span class="math inline">\(\text{xor}\)</span>一个 <span class="math inline">\(\text{popcount}=k\)</span> 的数。</p><p>所有数都可以被表示成 一个集合 <span class="math inline">\(S\)</span>，<span class="math inline">\(x=\sum_{z\in S}\oplusz\)</span>。现在是想便利这 <span class="math inline">\(2^n\)</span>个状态，是每一次只改变一个。</p><p>倍增构造即可，本质上实在k维空间便利，你画一画三位什么的就容易了。</p><p>[ZJOI2010] 排列计数</p><p>我们容易建出一颗限制的树。这是一个二叉树。，可以发现一个点的左子树右子树是无关的，所以限制在一个点合并两个子树，实际上就是有标号合并。如果发现这点dp显然了。</p><hr /><p>[SCOI2010]幸运数字</p><p>其实一眼容斥，我们实际上就是找出 <span class="math inline">\(S\subsetU,\mathrm{lcm}(S)\)</span> 这种东西。</p><p>实际上幸运数字是 <span class="math inline">\(O(2^l)\)</span>级别的。</p><p>这个只是分析，并不严谨的放缩，为我们先假设 <spanclass="math inline">\(lcm(a,b)=a\timesb\)</span>，那么我们设这个集合里的串的长度和大概和 <spanclass="math inline">\(n\)</span> 差不多，所以实际上，合法的 <spanclass="math inline">\(lcm(S)\)</span>的个数是类似划分数的，很少的。并且我们对于一种划分方式，我们构造出来的也只不过是<span class="math inline">\(2^{l_i}\)</span>这种的。所以容斥其实复杂度可以接受，</p><p>现在我们只需要找出这些 <span class="math inline">\(lcm(S)\)</span>这个复杂度，就很迷惑了，不好分析，通过一些不那么优秀的爆搜，也可以看出实际上我们需要的<span class="math inline">\(lcm(S)\)</span> 甚至只有 <spanclass="math inline">\(10^4,10^5\)</span> 左右的。</p><p>但是并没有题解给出非爆搜做法，我也并不会别的非爆搜做法，，，</p><p>所以只能爆搜了，。。。。爆搜最重要的trick 是，你要枚举一个上升序列<span class="math inline">\(\prod a_i&lt;n\)</span>你不如枚举一个下降序列 <span class="math inline">\(\proda_i&lt;n\)</span>，原因是你合法的时候代价一样，不合法的时候，对于一个状态肯定是前缀更有可能<span class="math inline">\(&gt;n\)</span> ，所以要倒着枚举。</p><hr /><p><a href="https://loj.ac/p/6358">#6358. 前夕</a></p><p>这个题一言难尽呀。</p><p>我其实不是很认可一些”理所当然“的二项式反演。</p><p>所以给出一种更加复杂的做法。。。很拉。</p><p>首先我们肯定是要做 <span class="math inline">\(n\)</span>个元素的集合，交集大小是<span class="math inline">\(m\)</span>的个数，我们可以选出 <span class="math inline">\(m\)</span>个地方，然后问题变成了 <span class="math inline">\(n-m\)</span>个元素的集合，交集大小是 <span class="math inline">\(0\)</span>的选几个方案个数。 <span class="math display">\[f_n=2^{2^n}-1-\sum_{i\leq n}\binom{n}{i}f_{n-i}\]</span> 值得注意的是 <span class="math inline">\(2^{2^n}\)</span>要减去1，也就是空集情况。含义就是简单的容斥。</p><p>这么求解下去肯定是没出路的，显然移项然后二项式反演。</p><p>简单推导得到 ： <span class="math display">\[f_n=\sum_{i\leq n} \binom{n}{i}(-1)^{n-i}(2^{2^i}-1)\]</span> 然后问题变成 <span class="math inline">\(4\mid i\)</span>的求解，也不难想到单位根反演。</p><p><span class="math inline">\(2^{2^i}-1\)</span>形式很烂，但是我们发现有 <span class="math inline">\(-1\)</span>的轮换系数，实际上实在抵消的。（当然在 <spanclass="math inline">\(n=0\)</span> 并不会抵消，伏笔 ）</p><p>写出式子： <span class="math display">\[\begin{aligned}\sum_{i\leq n,4\mid n-i}\binom{n}{i}\sum_{j\leq i}\binom{i}{j}(-1)^{i-j}2^{2^j}\\\sum_{i\leq n}\sum_{1\leq t\leq3}\epsilon^{t(n-i)}\binom{n}{i}\sum_{j\leq i}\binom{i}{j}(-1)^{i-j}2^{2^j}\\\sum_{1\leq t\leq 3}\sum_{j\leq n}2^{2^j}\sum_{i\geq j}\binom{n}{i}\binom{i}{j}(-1)^{i-j}\epsilon^{t(n-i)}\\\sum_{1\leq t\leq 3}\sum_{j\leq n}2^{2^j}\sum_{i\leq n-j}\binom{n}{i+j}\binom{i+j}{j}(-1)^{i}\epsilon^{t(n-i-j)}\\\sum_{1\leq t\leq 3}\sum_{j\leq n}2^{2^j}\binom{n}{j}\sum_{i\leqn-j}\binom{n-j}{i} (-1)^{i}\epsilon^{t(n-i-j)}\\\sum_{1\leq t\leq 3}\sum_{j\leqn}2^{2^j}\epsilon^{t(n-j)}\binom{n}{j}((-\epsilon^{-t}){^{i}}+1)^{n-j}\\\end{aligned}\]</span> <span class="math inline">\(O(n)\)</span> 计算即可，实际上这个<span class="math inline">\(\epsilon\)</span> 就是 <spanclass="math inline">\(\mathrm{i}\)</span> ，或者说是 <spanclass="math inline">\(-1\)</span> 在 <span class="math inline">\(\bmod998244353\)</span> 下的平方根。原根pow一下就好。</p><hr /><p>2022-4-11 模拟赛</p><p>T2 简单的 min25筛，<span class="math inline">\(\mathrm{minp}\)</span> 这个转移只有两条边，一种直接 <spanclass="math inline">\(\times\phi\)</span> ,一种加上 <spanclass="math inline">\(\sigma_1\)</span>，直接维护两个东东就好了。</p><p>P.S. 递推版的min25确实慢死，我甚至怀疑他是不是 <spanclass="math inline">\(\mathrm{soft }\ O(n^{3/4})\)</span>什么的。。。</p><p>所以不如直接爆搜。。。。</p><p>T1 我觉得有点难？</p><p>排列很好说，我都看出来了逆序对是偶数是充要的，然后序列你就考虑你先把这个东西看成排列（重标号），如果本身就是偶数，必然合法，如果是奇数，也很简单，你进行一次移动<span class="math inline">\(ab\)</span> 但是经过 <spanclass="math inline">\(a\)</span> 这种，你会发现此时逆序对-1（1,1移动后不会贡献），所以不难发现序列一定有解。</p><p>没想出来本质上就是没看出来性质。。。。。。主要是你要发现实际上挪动两个可以看成一步一步挪动这两个，然后实际上你只不过将一个移动两步，这样你可以类似冒泡那样，把前<span class="math inline">\(n-2\)</span>个冒泡排好序，那么也就剩下了最后那两个，得出逆序对为偶数，序列也好考虑类似上文那样。</p><p>剩下直接 dp 不易，但是别忘了你的系数有特点第 <spanclass="math inline">\(i\)</span> 个数，只能填到 <spanclass="math inline">\(i+1\)</span>个位置，那么确定状态也简单了，你可以直接将空出的位置设入状态。</p><p>T3 鸽子了</p><p><span class="math inline">\(\tau\)</span></p><hr /><h2 id="osu"><ahref="http://www.accoders.com/problem.php?cid=2676&amp;pid=1">OSU</a></h2><p>首先拆开贡献，<span class="math inline">\(1\)</span> 自己一组，发现<span class="math inline">\(L^2+L\)</span> 可以理解成 <spanclass="math inline">\(L\)</span> 段内选 <spanclass="math inline">\(i,j(i\leq j)\)</span> 的概率和。</p><p>所以问题转化为怎么算 <span class="math inline">\(w(i,j),([i,j]\subset[l,r])\)</span>，其中 <span class="math inline">\(w(i,j)=\prodp_k\)</span> 。</p><p>题解给出了矩阵维护这个东西。。。。。。。我觉得很神。</p><p>但是实际上，区间的子区间，，这个东西可以分治（线段树），考虑线段树怎么合并即可了（分治，左节点，右节点，跨块的（lsum,rsum））。</p><hr /><h2 id="地震后的幻想乡"><ahref="https://www.luogu.com.cn/problem/P3343">地震后的幻想乡</a></h2><p>先说我的另类解法。</p><p>首先我的转化是将期望转化为 概率，也就是最小生成树最大边 &lt;=x的概率的和。</p><p>此时问题转化为了，对于 <span class="math inline">\(x\)</span>,如果一条边权 <span class="math inline">\(\leq x\)</span>保留，否则删掉，问最后联通的概率。</p><p>我是这样想的，实际上本质不同的联通情况是少的。</p><p>我大概就是在容斥，，首先加上系数 <spanclass="math inline">\(\times\)</span> 钦定一个连通块的概率 加上 系数<span class="math inline">\(\times\)</span>钦定两个连通块的概率......</p><p>而钦定k个连通块的概率就是，把跨块的边只能是 [x,1] 所以贡献是 <spanclass="math inline">\(x^{num}\)</span>。</p><p>所以我们枚举联通情况，维护出多项式，最后积分。</p><p>只剩下如何求容斥系数了。</p><table><thead><tr class="header"><th style="text-align: center;">钦定的连通块个数</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">容斥系数</td><td style="text-align: center;">1</td><td style="text-align: center;">-1</td><td style="text-align: center;">2</td><td style="text-align: center;">-6</td></tr></tbody></table><p>可以看出是 <spanclass="math inline">\((-1)^nn!\)</span>，我是考虑钦定为 <spanclass="math inline">\(n\)</span> 的情况，会被 <spanclass="math inline">\(\begin{bmatrix}n\\j\end{bmatrix}\)</span> 个钦定为<span class="math inline">\(j\)</span> 的算贡献。</p><p>所以系数的递推式： <span class="math display">\[\begin{aligned}f_i=-\sum f_j\times s(i,j)\\\end{aligned}\]</span> 不会证明。。。可能是斯特林反演惊恐</p><hr /><p>soulist做法。实际上和这个大同小异了。。。。。</p><p>我们要求出 <span class="math inline">\(\leq x\)</span>的连通子图概率和。这个可以DP。</p><p>设 <span class="math inline">\(\mathrm{dp}(s,i)\)</span> <spanclass="math inline">\(s\)</span> 表示和 <spanclass="math inline">\(1\)</span> 联通的情况, <spanclass="math inline">\(i\)</span> 表示这个状态选了几条边。</p><p>我们考虑容斥，先在 <span class="math inline">\(s\)</span>这个集合随意选边 也就是 <spanclass="math inline">\(\mathrm{dp(s,i)}\)</span> 初始化为 <spanclass="math inline">\(\binom{edge(s)}{i}\)</span>。</p><p>然后枚举包含 <span class="math inline">\(1\)</span>的极大集合，减去，其中补集边随意选即可。</p><hr /><p>清新的厉害题 <ahref="https://www.luogu.com.cn/problem/CF68D">cf68D</a></p><p>不知道怎么描述。。。就说这样一个“尽管我发现了但没做出来的”observation。</p><p>若 <span class="math inline">\(lv&lt;rv\)</span> 那么说明断 <spanclass="math inline">\(ls\)</span> 边的答案可以确定了，只需要进一步考察断<span class="math inline">\(rs\)</span> 边的答案。</p><p>反之同理，特别的 <span class="math inline">\(lv=rv\)</span>说明无论断 <span class="math inline">\(ls\)</span> 还是 <spanclass="math inline">\(rs\)</span> 答案都知道了。</p><p>这样随意维护课做到 查询 <span class="math inline">\(O(h^2)\)</span>的复杂度。。。。。</p><hr /><p>入门DS题 <a href="https://hydro.ac/d/bzoj/p/3489">simple rmq</a></p><p>看了题解。。。。首先，经典套路是维护每一个 <spanclass="math inline">\(r\)</span> 结尾的答案。</p><p>考虑一个 <span class="math inline">\(x_i\)</span> 有贡献的区间是<span class="math inline">\([pre_i+1,i]\)</span>这样的区间。当然我们需要下一个 等于 <spanclass="math inline">\(x_i\)</span> 的数出现时删掉贡献。</p><p>出现的时间是一个区间。离线固然好直接时间分治。</p><p>在线吗，那就使用主席树记录一下每一个 <spanclass="math inline">\(r\)</span>的信息，然后区间修改什么的即可。（维护max,区间取 max 不用 segbeats）</p><p>复杂度 <span class="math inline">\(O(n\log^2 n)\)</span>。</p><hr /><p>随机游走相关。</p><ol type="1"><li>设状态为到 <span class="math inline">\(x\)</span>停止的期望长度，容易dp</li><li>如果可以一直走，然后有一个终止位置集合，那么概率可以设成所有时刻，在这个点的概率，这样，初始起点集合只需要讲转移式子 <span class="math inline">\(+1\)</span> 就好。</li><li>网格图的主元法实际上，就是先进行了若干步“带入消元”，使得最后答案都表示成主元向量的线性表示。</li></ol><hr /><p>5,4 模拟赛 A</p><p>两个字符集 <span class="math inline">\(A,B,C\)</span>然后相邻不同的长度 <span class="math inline">\(2n+1\)</span> 串使 lcs=n。</p><p>主要你要发现，两个长度为2的区间是一定有相同的字符的。</p><p>然后你大概能猜到，这样来说，存在下阶 <spanclass="math inline">\(n\)</span> 。</p><p>然后就是如何构造的问题了。打个表，构造构造就好了。</p><p>难点在于 发现下界，以及实现上。</p><p>模拟赛B</p><p>不是很会。。。。。。。。。。。。。。。。</p><p>首先不是很懂为啥要这么考虑，，，，，，感觉很神</p><p>就是考虑 <span class="math inline">\(x\)</span>,<spanclass="math inline">\(y\)</span>对<strong>不合法</strong>区间的贡献。</p><p>就是把 z=lca找出来，然后分讨不合法区间是什么，实际上就是矩形覆盖矩形查1.</p><p>然后这个矩形覆盖有特性的，他是接地，和接左的 3-side矩形。</p><p>具体问题的话，子区间就很烦，所以转化成对一维进行”扫描线“，每时每刻维护线段树，下标<span class="math inline">\(i\)</span> 的含义是以 <spanclass="math inline">\(i\)</span> 为左端点，切右端点<spanclass="math inline">\(\leq T\)</span> 的区间的答案。</p><p>不难发现此时询问变成了对上述线段树的区间询问。</p><p>那么如何维护线段树呢，实际上由于 3-side，一种矩形可以逆着扫，然后变成区间覆盖类似的东西（因为不可能改变了）。每次只给没被覆盖的点加1 的权值。</p><p>另外一种矩形由于有一side接左，所以有贡献的区间一定是一段前缀，这个维护最下面边，然后线段树二分即可。</p><p>现在就剩一个问题了，那我们 <span class="math inline">\(n^2\)</span>个区间怎么搞。</p><p>可以在 <span class="math inline">\(z\)</span> 统计 <spanclass="math inline">\(x,y\)</span> 的贡献。经典dsu ontree，你可以真的启发式合并，然后枚举小的，然后统计大的贡献。</p><p>这样区间个数也是 <span class="math inline">\(O(n\log n)\)</span>的。能做了。</p><hr /><center>新航线</center><p>好疲惫</p>]]></content>
    
    
    
    <tags>
      
      <tag>record</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟赛补题解</title>
    <link href="/2022/02/11/2-21-pack/"/>
    <url>/2022/02/11/2-21-pack/</url>
    
    <content type="html"><![CDATA[<p><ahref="http://47.92.197.167:5283/contest/145">contest-2022-2-6</a></p><p><a href="http://47.92.197.167:5283/contest/145/problem/1">T1</a></p><p>题意简述：求树上最长回文串的长度,字符集大小为1000。</p><p>大概二分+点分治。</p><p>如果光二分，那么我们其实不好判断。</p><p>如果光点分治，那么我们也不好确定回文中心的位置。</p><p>那么就结合起来。</p><p>我们点分治的时候，dfs如果到达点 <spanclass="math inline">\(x\)</span> ，那么我们记录下 <spanclass="math inline">\(x\)</span>是否有可能成为经过分治中心的回文串。</p><p>就大概如果长度 <span class="math inline">\(&gt;mid\)</span>那么我们把他给从确定的回文中心回文地删掉。</p><p>剩下的一定是一个 <span class="math inline">\(y\to x\)</span>的链，把这个哈希掉。</p><p>如果是短链，我们就查询哈希值。</p><p><code>#include&lt;bits/extc++.h&gt;</code></p><p><code>using namespace __gnu_pbds;</code></p><p><code>gp_hash_table</code></p><p>没什么别的技巧。</p><hr /><p>先说 <ahref="http://47.92.197.167:5283/contest/145/problem/3">T3</a></p><p>题意，<span class="math inline">\(S\sub \mathbb{P}\)</span>,<spanclass="math inline">\(f(S)\)</span> 表示从 <spanclass="math inline">\(p\in S\)</span> 的 <spanclass="math inline">\(\leq n\)</span>的倍数最多选几个，使得一个不是另一个的倍数。</p><p>显然整除是偏序关系。</p><p>longest antichain = minimum chain cover.（其实我的做法没有用到。。。</p><p>这个好像比较经典。</p><p>如果是 <span class="math inline">\([1,n]\)</span>中，选出，那么答案必然是 <spanclass="math inline">\(n-n/2\)</span>，也就是选 <spanclass="math inline">\([n/2+1,n]\)</span>。</p><p>这个是极大的，因为任意一个 <span class="math inline">\(\leqn/2\)</span> 的数都在 <span class="math inline">\([n/2+1,n]\)</span>里面有倍数。（<span class="math inline">\(n/2\leq n-n/2\)</span>）。</p><p>又是合法的，因为 <span class="math inline">\(2\times(n/2+1)&gt;n\)</span>。</p><hr /><p>如果非得用minimum chaincover理解，可以只考虑最后这段，这些必须是一些链的结尾。</p><p>所以这是min的上界。然后可以覆盖，然后完事了。</p><p>这样我们得到了一个和题解不尽相同的式子。 <spanclass="math display">\[\begin{aligned}&amp;\sum_{S}\sum_{i=n/2+1}^n[p_j|i]\\&amp;\sum_{i=n/2+1}^n(2^{w(i)}-1)2^{all-w(i)}\\2^{all}(n-n/2)+2^{all}&amp;\sum_{i=n/2+1}^n2^{-w(i)}\end{aligned}\]</span> 发现 <spanclass="math inline">\(2^{w(ij)}=2^{w(i)+w(j)}=2^{w(i))}\times2^{w(j)}\)</span>。</p><p>面对积性函数我们现在有大概两条路。</p><ol type="1"><li>杜教筛/powerful number 求贝尔级数，观察性质</li><li>min25筛暴力筛</li></ol><p>我尚未发现 <span class="math inline">\(2^{-w(i)}\)</span>的贝尔级数有什么优秀的性质，所以第一条路走不太通。</p><p>min25只需要两步。</p><ol type="1"><li>不管你用什么方法，求出 <span class="math inline">\(n/i\)</span>这根号个位置的素数前缀和。</li><li>暴力组合。</li></ol><p>尽管在 <span class="math inline">\(f(p)\)</span> 出取值不是积性函数<spanclass="math inline">\(f(p)=1/2\)</span>，但是这个其实等价于素数个数，所以第一部解决。</p><p>第二步很显然。复杂度 <spanclass="math inline">\(O(n^{1-\epsilon})\)</span></p><hr /><p><a href="http://47.92.197.167:5283/contest/145/problem/2">T2</a></p><p>感觉尽管做法见过，但是很难想到。</p><p>首先大意让你求 <span class="math inline">\(A=B*A\)</span> 的矩阵对<span class="math inline">\((A,B),|B|\not =0\)</span>。</p><p>借着这个题记录一下矩阵乘法本质上就是对矩阵进行线性变换这个想法。<span class="math display">\[M=\begin{bmatrix}1&amp;0&amp;0&amp;\cdots&amp;0\\0&amp;1&amp;0&amp;\cdots&amp;0\\0&amp;0&amp;1&amp;\cdots&amp;0\\\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\0&amp;0&amp;0&amp;\cdots&amp;1\\\end{bmatrix}\]</span> 左乘这个矩阵代表着不变（单位阵）。</p><p>我们在 <span class="math inline">\(M_{i,j}\)</span> 处加上 <spanclass="math inline">\(v\)</span> 代表着给第 <spanclass="math inline">\(i\)</span> 行加上第 <spanclass="math inline">\(j\)</span> 行。</p><p>我们把 <span class="math inline">\(M_{i,i}\)</span> 改成 <spanclass="math inline">\(v\)</span> 代表将 <spanclass="math inline">\(i\)</span> 行乘上 <spanclass="math inline">\(v\)</span>。 <span class="math display">\[\begin{matrix}0&amp;\cdots&amp;1&amp;0&amp;\cdots&amp;0&amp;\cdots\\&amp;&amp;\vdots&amp;\vdots&amp;&amp;\vdots\\0&amp;\cdots&amp;0&amp;0&amp;\cdots&amp;1&amp;\cdots\\\end{matrix}\]</span> 这个其实就代表着 swap 两行。</p><hr /><p>满秩的矩阵构成群。（满秩的矩阵个个存在逆元），如果只考虑秩的话，我们不妨先消成三角阵考虑，此时因为满秩，操作矩阵也满秩，所以操作后的矩阵同样满秩。</p><p>那么问题可以转换成 <span class="math inline">\(X\)</span>代表全体矩阵，<span class="math inline">\(G\)</span> 代表满秩矩阵，<spanclass="math inline">\(G\)</span> 作用在 <spanclass="math inline">\(X\)</span> 上，<spanclass="math inline">\(X\)</span> 中的不动点。 <spanclass="math display">\[\sum_{x\in X}\sum_{g\in G}x\overline{\to}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>模拟赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary search</tag>
      
      <tag>点分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>burnside</title>
    <link href="/2022/02/07/burnside-simple-thoughts/"/>
    <url>/2022/02/07/burnside-simple-thoughts/</url>
    
    <content type="html"><![CDATA[<p>cmd讲的真的不是很清楚。</p><p>看soulist 的博客把，。</p><p>soulist NB!!!</p><p><ahref="https://www.luogu.com.cn/blog/Soulist/solution-p4980">LINK</a></p><p>拉格朗日定理</p><p>首先对于两个群 <span class="math inline">\(H\subset G\)</span>。</p><p>那么 <span class="math inline">\(|H|\)</span> 是 <spanclass="math inline">\(|G|\)</span> 的因数。</p><p>考虑给 <span class="math inline">\(H\)</span> 添 <spanclass="math inline">\(g\in G\)</span>，得到的 <spanclass="math inline">\(gH\)</span> 不相同时，不可能有交。</p><p>于是乎给 <span class="math inline">\(gH\)</span>就是相当于平移（可能不是平的，就是移动）。</p><hr /><p>轨迹·稳定子定理。</p><p>群 <span class="math inline">\(G\)</span> 作用在集合 <spanclass="math inline">\(X\)</span> 上。</p><p>轨迹和稳定子都是定义在集合元素 <span class="math inline">\(x\)</span>上。</p><p>轨迹 <span class="math inline">\(G(x)\)</span> 表示 <spanclass="math inline">\(x\)</span> 在任意 <span class="math inline">\(g\inG\)</span> 作用下能到达的地方。（就是cmd写的等价类，注意这个是 <spanclass="math inline">\(X\)</span> 的子集。）</p><p>稳定子 <span class="math inline">\(G^x\)</span> 表示 <spanclass="math inline">\(g\in G\)</span> 且满足能使得 <spanclass="math inline">\(x \xrightarrow{g} x\)</span> 。（注意这个 <spanclass="math inline">\(G^x\)</span> 是 <spanclass="math inline">\(G\)</span> 的子集）（甚至是子群）</p><hr /><p>在证明 轨迹·稳定子定理 之前，我们要说明 <spanclass="math inline">\(G^x\)</span> 是 <spanclass="math inline">\(G\)</span> 的子群。</p><p>主要考虑结合律即可 <span class="math inline">\((x \xrightarrow{f} x,x\xrightarrow{g} x )\Rightarrow x \xrightarrow{f\times g}x\)</span>。</p><p>单位元肯定存在，逆元逆过来整也行，封闭性就显然了。</p><hr /><p>接下来说明 轨迹·稳定子定理 。</p><p>对于 <span class="math inline">\(x\in X\)</span> 有如下公式成立：<span class="math display">\[|G^x|\times |G(x)| = |G|\]</span> 首先根据 <span class="math inline">\(G^x\subsetG\)</span>，根据拉格朗日定理： <span class="math display">\[|G^x|\times |\{H\mid H=gG^x\}| = |G|\]</span> 中间那坨表示 <span class="math inline">\(G^x\)</span> 不同乘上<span class="math inline">\(g\)</span>后生成的新群，也就是soulist说的陪群。</p><p>引入记号 <span class="math inline">\(g(x) ,g \in G\)</span>。</p><p><spanclass="math inline">\(x\xrightarrow{g}g(x)\)</span>。这个是定义。</p><p>那么证明是在构造双射： <span class="math display">\[g(x)\longleftrightarrow gG^x,g\in G\]</span> 如果 <span class="math inline">\(g(x)=f(x)\)</span> , <spanclass="math inline">\(g\times f^{-1}(x)=\epsilon(x)\in G^x\)</span>。则<span class="math inline">\(gf^{-1}G^x=G^x\LongleftrightarrowgG^x=fG^x\)</span>。</p><p>反之亦然。</p><p>所以 <span class="math inline">\(g(x)\)</span> 与 <spanclass="math inline">\(G^x\)</span> 陪群一一对应。</p><p>所以 <span class="math inline">\(|\{g(x)\}|=|G(x)|\)</span> 等于<span class="math inline">\(G^x\)</span> 陪群个数。</p><p>既得 <span class="math inline">\(|G(x)|\times|G^x|=|G|\)</span>.</p><p>这里比较反直观的是即使存在 <span class="math inline">\(G(x)\)</span>这个根集合 <span class="math inline">\(X\)</span> 有关的存在，但是 <spanclass="math inline">\(|G(x)|\times|G^x|\)</span>的值却等于群的大小。</p><p>这里似乎可以拿整数模 <span class="math inline">\(n\)</span>乘法群来类比理解。</p><p>模 <span class="math inline">\(n\)</span> 加法群也可以。</p><div class="note note-success">            <p>说句闲话</p>          </div><p>不严谨的理解方法，考虑 <span class="math inline">\(g\in G^x\)</span>的那个与 <span class="math inline">\(x\)</span> 有关的置换，可以到达<span class="math inline">\(G(x)\)</span> 个位置。</p><figure><img src="\img\2022-2-7-01.png" alt="img1" /><figcaption aria-hidden="true">img1</figcaption></figure><p>大概对于每一个轨道的，我们都可以让所有稳定子作用到轨道上，这些会是不同的<span class="math inline">\(g\)</span>。</p><p>考虑同一组稳定子作用后肯定是不同的，而且根据作用结果，不同组间一定不同，所以得证。</p><hr /><p>burnside引理。</p><p>通用的burnside引理也是对于群 <span class="math inline">\(G\)</span>作用在集合 <span class="math inline">\(X\)</span> 上说的。 <spanclass="math display">\[\begin{aligned}l=\frac{1}{|G|}\sum_{g\in G} c(g)\\c(g)=\sum_{x\in X} [x\xrightarrow{g}x]\end{aligned}\]</span> <span class="math inline">\(l\)</span>的含义为作用后的等价类的个数，也就是不同 <spanclass="math inline">\(G(x)\)</span> 的个数。（比较显然 <spanclass="math inline">\(\forall x\in G(t),G(x)=G(t)\)</span>。</p><div class="note note-success">            <p>两个元素可以互达当且仅当在同一轨道中。</p>          </div><p><span class="math inline">\(c(g)\)</span> 的含义是集合 <spanclass="math inline">\(X\)</span> 中在 <spanclass="math inline">\(g\)</span> 作用下的不动点的个数。</p><p>首先考虑如何算 <span class="math inline">\(l\)</span>,根据定义。<span class="math display">\[\begin{aligned}l=\sum_{x\in X} \frac{1}{|G(x)|}=&amp;\frac{1}{|G|}\sum_{x\inX}|G^x|=\frac{1}{|G|}\sum_{x\in X}\sum_{g\in G}[x\xrightarrow{g}x]\\l=&amp;\frac{1}{|G|}\sum_{g\in G}c(g)\end{aligned}\]</span></p><hr /><p>Polya定理。似乎polya就是burnside引理特殊情况。</p><p>有 <span class="math inline">\(n\)</span> 个有编号的球，将其染色，有<span class="math inline">\(m\)</span> 种颜色。</p><p>给定一个群 <span class="math inline">\(G\)</span>，如果一对染色状态<span class="math inline">\(s,t\)</span>,存在 <spanclass="math inline">\(g\in G,s\xrightarrow{g}t\)</span> 那么认为 <spanclass="math inline">\(s,t\)</span> 是同一个染色状态。</p><p>考虑我们现在的集合 <span class="math inline">\(X\)</span>是所有染色方案，群 <span class="math inline">\(G\)</span>。</p><p>对 <span class="math inline">\(X\)</span>,<spanclass="math inline">\(G\)</span> 求等价类的个数。</p><p>直接使用 burnside 引理： <span class="math display">\[l=\frac{1}{|G|}\sum_{g\in G}c(g)\]</span> 考虑 <span class="math inline">\(c(g)\)</span>的组合含义，染色方案在置换的角度下的<strong>不动点</strong>。</p><p>考虑这样只能把这个置换 <span class="math inline">\(g\)</span>中的所有环添成一个颜色，所以 <spanclass="math inline">\(c(g)=m^{cir(g)}\)</span>,<spanclass="math inline">\(cir(g)\)</span> 表示 <spanclass="math inline">\(g\)</span> 中环的个数。</p><p>经典问题是给一个长度为 <span class="math inline">\(5\)</span>的环，将其染色，问在可以顺时针转的角度下有多少不同的染色方案。</p><p>考虑这个限制的群。 <span class="math display">\[\{1,2,3,4,5\},\\\{2,3,4,5,1\},\\\{3,4,5,1,2\},\\\{4,5,1,2,3\},\\\{5,1,2,3,4\}\]</span> 这个群只有第一个是 <span class="math inline">\(5\)</span>个环，剩下的都是 <span class="math inline">\(1\)</span> 个环，考虑 <spanclass="math inline">\(5\in \mathbb{P}\)</span>。</p><p>所以答案是： <span class="math display">\[\frac{1}{5}(m^5+4m)\]</span> .</p><p>【完】Maybe?</p>]]></content>
    
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成函数做题做题记录</title>
    <link href="/2022/02/06/generating-fuc-notes/"/>
    <url>/2022/02/06/generating-fuc-notes/</url>
    
    <content type="html"><![CDATA[<p>生成函数记录。</p><span id="more"></span><h3 id="烷基计数">1 烷基计数</h3><p>无标号，有根树的计数问题。</p><p>当年手推容斥不burnside可牛逼死了。。。。</p><p>大概设 <span class="math inline">\(F(x)\)</span>为生成函数，由于有根只需要把儿子卷起来即可。</p><p><span class="math inline">\(F^3(x)\)</span> 会算重， <spanclass="math inline">\({1,2,3}\Longleftrightarrow2,1,3\cdots\)</span>,考虑本质上是<span class="math inline">\(3\)</span> 阶置换群作用在 <spanclass="math inline">\(F(x)\)</span> 上。</p><p>根据burnside引理。</p><p><spanclass="math inline">\(F(x)=\frac{1}{|G|}(\begin{bmatrix}3\\1\end{bmatrix}F(x^3)+\begin{bmatrix}3\\2\end{bmatrix}F(x^2)F(x)+\begin{bmatrix}3\\3\end{bmatrix}F^3(x))\)</span></p><p>牛顿迭代。</p><p>需要注意的是 <spanclass="math inline">\(F=F_0-\frac{G(F_0)}{G&#39;(F_0)}\bmodx^n,l=\lceil\frac{n}{2}\rceil\)</span>。</p><p>注意分子必须是恰好 <span class="math inline">\(\bmodx^n\)</span>,然后他的 <spanclass="math inline">\(0,1,\cdots,l-1\)</span> 都是 0，所以分母只需要<span class="math inline">\(\bmod n-l\)</span> 求逆即可。</p><hr /><h3 id="烷烃计数">2烷烃计数</h3><p>如果我们主观上给烷烃定根，那么他可以看成一个由四个烷基拼成的结构。</p><p>我们该如何定根？</p><p>树哈希的经历告诉我们重心往往有着更好的性质。</p><p>如此，对于无根树我们有了以下两种方法：</p><h4 id="最大子树小于-n-的一半">1最大子树小于 <spanclass="math inline">\(n\)</span> 的一半</h4><p>如果 <span class="math inline">\(n\)</span>是奇数那么一定只有一个重心。我们钦定在重心处计数，换句话说就是让根的四颗子树大小都<span class="math inline">\(\leq n/2\)</span>。</p><p>这样我们只是在‘烷基计数’的基础上在最后合并，这回变成了 <spanclass="math inline">\(4\)</span> 阶群作用在 <spanclass="math inline">\(F(x)\)</span> 上。</p><p>类似的使用 burnside，不难得出： <span class="math display">\[F(x)=\frac{1}{|G|}(6F(x^4)+3F^2(x^2)+9F(x^3)F(x)+6F^2(x)F(x^2)+F^4(x))\]</span> 对于 <span class="math inline">\(n\)</span>是偶数，根据计数方式，会多或者少算一些情况。</p><p>我不让 <span class="math inline">\(n/2\)</span>被算入，所以会少算，少算了存在 <span class="math inline">\(n/2\)</span>的。</p><p>可以看作两个大小为 <span class="math inline">\(n/2\)</span>的烷基拼起来。</p><p>组合数算算就好了。</p><h4 id="容斥">2容斥</h4><p>我们计算每个点为根的情况；减去每条边分割出两个子树的情况；加上存在两个重心，并且重心的子树同构的情况。</p><hr /><p>在有标号egf计数的时候，考虑尽管我们分配了标号，但是在标号所“依附”的计数对象重排时，会带来<span class="math inline">\(\frac{1}{k!}\)</span> 的重复计数。</p><p>当然也是这些使得在有标号计数时 <spanclass="math inline">\(e^x\)</span> 是多么重要。</p><hr /><h3 id="拉格朗日反演">拉格朗日反演</h3><p>拉反：条件是若 <span class="math inline">\(F,G\)</span>两个多项式常数项是 <span class="math inline">\(0\)</span>，一次方项不是<span class="math inline">\(0\)</span>，并且复合结果是 <spanclass="math inline">\(G(F(x))=x\)</span>，推出 <spanclass="math display">\[[x^n]G(x)=\frac{1}{n}[x^{n-1}](\frac{x}{F(x)})^n\]</span> 证明：</p><p>首先 <span class="math inline">\(G(x)=\sum a_ix^i\)</span>，那么：<span class="math display">\[\begin{aligned}G(F(x))=\sum a_iF^i(x)&amp;=x\\\text{d}\sum a_iF^i(x)&amp;=\text{d}x\\\sum_{i\ge 1} a_i\times i\times F^{i-1}(x)F&#39;(x)&amp;=1\\F^{-n}(x)\sum_{i\ge 1} a_i\times i\times F^{i-1}(x)F&#39;(x)&amp;=1\cdotF^{-n}(x)\\\end{aligned}\]</span> 此时提取 <span class="math inline">\([x^{-1}]\)</span>项，考虑 <span class="math inline">\(lhs\)</span> 会有很多项被舍弃无视。<span class="math display">\[\sum_{i\ge 1} a_i\times i(F^{i-1-n}(x)F&#39;(x))\]</span> 观察括号里这一项，当 <span class="math inline">\(i\neqn\)</span> 时，等于 <spanclass="math inline">\(\frac{1}{i-n}(F^{i-n}(x))&#39;\)</span></p><p>当 <span class="math inline">\(i\ge n\)</span> 时显然没有 <spanclass="math inline">\([x^{-1}]\)</span> 项。</p><p>当 <span class="math inline">\(i&lt;n\)</span> 时，考虑 <spanclass="math inline">\(\frac{1}{F^{n-i}(x)}\)</span> 在求导后一定不能有<span class="math inline">\(\frac{1}{x}\)</span> 项，考虑大概只有 <spanclass="math inline">\(\ln\)</span> 求导能得到 <spanclass="math inline">\(\frac{1}{x}\)</span>，这显然不符合 <spanclass="math inline">\(F(x)\)</span> 形式。</p><p>所以 <span class="math inline">\(lhs\)</span> 只剩下了 <spanclass="math inline">\(a_n\times n \times F^{-1}(x)F&#39;(x)\)</span>。<span class="math display">\[\begin{aligned}[x^{-1}]a_n\times n\times F^{-1}(x)F&#39;(x)&amp;=[x^{-1}]F^{-n}(x)\\F^{-1}(x)F&#39;(x)&amp;=\frac{a_1+2\times a_2x+3\timesa_3x^2+\cdots}{a_1x+a_2x^2+a_3x^3+\cdots}\\\\F^{-1}(x)F&#39;(x)&amp;=\frac{1}{x}\cdot \frac{a_1+2\times a_2x+3\timesa_3x^2+\cdots}{a_1+a_2x^1+a_3x^2+\cdots}\end{aligned}\]</span> 考虑后面那个式子由于可逆并且仅有的 <spanclass="math inline">\(x^0\)</span> 次项也是 <spanclass="math inline">\(1\)</span> 不难发现 <spanclass="math inline">\([x^{-1}]=1\)</span>。</p><p>综上： <span class="math display">\[a_n\times n=[x^{-1}]F^{-n}(x)\]</span> 换种写法也就是: <span class="math display">\[\begin{aligned}[x^n]G(x)=\frac{1}{n}[x^{-1}]\frac{1}{(F^n(x))}\\[x^n]G(x)=\frac{1}{n}[x^{n-1}](\frac{x}{F(x)})^n\\\end{aligned}\]</span></p><hr /><h4 id="大朋友与多叉树">大朋友与多叉树。</h4><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream考虑限制儿子个数相当于构造了 <spanclass="math inline">\(G(x)=\sum\)</span></p><hr /><p>记录一下多点求值和一道模拟赛题吧！</p><p>感觉范德蒙德矩阵我根本没有学明白（（（（（（（（，现在先咕咕咕，有时间在gao。<span class="math display">\[\begin{bmatrix}&amp;1,&amp;x_1,&amp;\cdots,&amp;x_1^{n}\\&amp;1,&amp;x_2,&amp;\cdots,&amp;x_2^{n}\\&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\&amp;1,&amp;x_{n}^{}&amp;\cdots &amp;x_{n}^{n}\end{bmatrix}\vec{a}=\vec{y}\]</span> 那么多线求值是想快速的求矩阵乘法。</p><p>这个有一种非常神仙的叫做转置定理，大概说的就是如果一系列的线性变换能快速的求解，那么这一系列的变换的转置变换也能快速求解。</p><p>我们发现了对于 <span class="math inline">\(M^{T}\)</span>的乘法有一定的性质，即： <span class="math display">\[\begin{bmatrix}&amp;1,&amp;1,&amp;\cdots,&amp;1\\&amp;x_1,&amp;x_2,&amp;\cdots,&amp;x_{n}\\&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\&amp;x_1^{n},&amp;x_{2}^{n}&amp;\cdots &amp;x_{n}^{n}\end{bmatrix}\vec{a}=\vec{y}\]</span> 写成生成函数形式 <span class="math display">\[\sumy_i\lambda^i=\sum_{i}\sum_{j}x_j^ia_j\lambda^i=\sum_{j}a_j\sum_{i}x_j^i\lambda^i=\sum_{j}a_j\frac{1}{1-x_j\lambda}\]</span> 对这个东西求解可以使用经典的维护 <spanclass="math inline">\(\frac{L_a(x)}{L_b(x)},\frac{R_a(x)}{R_b(x)}\)</span>加法后合并成 <spanclass="math inline">\(\frac{L_aR_b(x)+L_b(x)R_a(x)}{L_b(x)R_b(x)}\)</span>。</p><p>这样我们有分治的 <span class="math inline">\(n\log^2n\)</span>的做法了。</p><hr /><p>在转置意义下，我们的加法卷积变成了减法卷积。（（转置定理这块咕咕咕了</p><p>这样不难发现 <code>+</code> 卷积，变成了 <code>-</code> 卷积。</p><p>即 <span class="math inline">\(F\ominusG(x)=\sum_{k}(\sum\limits_{a-b=k}f_a\times f_b )x^k\)</span>。</p><p>这样我们从 <span class="math inline">\(\ominus\)</span>考虑这个问题便有了合适的理由了。</p><p><spanclass="math inline">\(F(a_i)=[x^0]F\ominus\frac{1}{1-a_ix}\)</span>，求值看作一行<span class="math inline">\(\oplus\)</span>卷积，那么转置意义下就是一列，也就是 <spanclass="math inline">\(\ominus\)</span> 卷积。</p><p>另有 <span class="math inline">\(F\ominus (G\times H)=(F\ominusG)\ominus H\)</span>。考虑 <span class="math inline">\(A^T\timesB^T=(A\times B)^T\)</span>。</p><p>那么类似的考虑分治求解： <span class="math display">\[G_{l,r}(x)=F\ominus(\prod_{i=l}^r \frac{1}{1-a_ix})\]</span> 从上向下分治 <spanclass="math inline">\(G_{l,mid}=G_{l,r}\ominus\prod_{i=mid+1}^r1-a_ix\)</span></p><p>接下来我们并未完全完成，因为精度呢？</p><p>对于一次 <span class="math inline">\([x^0]F\ominus\frac{1}{1-ax}\)</span> 精度显然只需要 <span class="math inline">\(\bmodx^1\)</span>。</p><p>那么一个 <span class="math inline">\(G_{l,r}\)</span> 精度只需要<span class="math inline">\(\bmod x^{r-l+1}\)</span>，归纳法证明，<spanclass="math inline">\(G_{l,mid}\)</span> 精度需要 <spanclass="math inline">\(\bmod x^{mid-l+1}\)</span></p><p>而 <span class="math inline">\(\prod_{i=mid+1}^r 1-a_ix\)</span>精度是 <span class="math inline">\(x^{r-mid}\)</span>, 所以最后 <spanclass="math inline">\(G_{l,r}\)</span> 需要的是 <spanclass="math inline">\(\bmod x^{r-mid+mid-l+1} =\ \bmodx^{r-l+1}\)</span></p><p>所以此时才完事，根据主定理（咕咕咕我不会）复杂度 <spanclass="math inline">\(O(n\log ^2n)\)</span>。</p><hr /><p>至于模拟赛那道题。。。。。就是对范德蒙德矩阵的转置求逆。。。。。。。。</p><h1 id="大概写出生成函数">大概写出生成函数</h1><p>考虑限制儿子个数相当于构造了 <spanclass="math inline">\(G(x)=\sum_{i\in D}x^i\)</span>。</p><p>所以有复合方程 <spanclass="math inline">\(G(F(x))=F(x)+x\)</span>，加的 <spanclass="math inline">\(x\)</span> 是单独成树的叶子。</p><p>让 <span class="math inline">\(G&#39;(x)=G(x)-x\)</span>，所以方程<span class="math inline">\(G&#39;(F(x))=x\)</span>,<spanclass="math inline">\(G&#39;(x),F(x)\)</span> 互为复合逆，直接拉反求<span class="math inline">\(F(x)\)</span> 一项即可。</p><p>考虑为什么能拉反 <spanclass="math inline">\([x^0]G&#39;(x)=0\)</span>组合意义不能算叶子，或者说叶子系数是常量 <spanclass="math inline">\(0\)</span>。</p><p><span class="math inline">\([x^1]G&#39;(x)\neq0\)</span>这个实在说不能一直填非叶子节点的中间节点，否则这个是发散的。</p><hr /><h3 id="link"><ahref="http://www.accoders.com/problem.php?cid=2579&amp;pid=6">Link</a></h3><p>问1类斯特林数。</p><p><span class="math inline">\(n\gets n+1\)</span>。</p><p><span class="math inline">\([x^t]x^{\overline{n}}\bmod p\)</span>。<span class="math display">\[\begin{aligned}n&amp;=pa+b\\x^{\overline{n}}&amp;=(x^{\overline{p}})^a\times x^\overline{b}\\x^{\overline p}&amp;=x^p-1 \bmod p\\x^{\overline{n}}&amp;=(x^p-1)^a\times x^\overline{b}\\\end{aligned}\]</span> 此时我们应该考虑如何计数了。</p><p>如果此时 <span class="math inline">\(F(x)\)</span> 表示 <spanclass="math inline">\(f(i)=\sum_{x\in S} [x\bmod p=i]\)</span>的生成函数。</p><p>我们惊喜地发现前后独立了。</p><p>因为前面最近的两项距离是 <spanclass="math inline">\(p\)</span>，而后面的次数 <spanclass="math inline">\(b&lt;p\)</span>。</p><p>似乎可以模意义乘法卷积。</p><p>前面的呢？</p><p>把 <span class="math inline">\(a\)</span> 拆成 <spanclass="math inline">\(p\)</span> 进制的 <spanclass="math inline">\(A_i\)</span>。</p><p>又是一堆次方相互独立。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Goodbye Xinchou</title>
    <link href="/2022/02/05/uoj-goodbye2021/"/>
    <url>/2022/02/05/uoj-goodbye2021/</url>
    
    <content type="html"><![CDATA[<p>.只写了A,B,C.</p><p>A是个trivial的题。</p><p><a href="https://uoj.ac/contest/74/problem/702">B</a>张飞卷精兵。</p><p>大概就是考虑到这个 <span class="math inline">\(2^n\)</span>恰好形成了一个 <span class="math inline">\(n\)</span> 层的满二叉树。</p><p>考虑我们如果钦定左儿子胜利的话，那么我们本质上确定了每个的符号。</p><p>但是如何才能合法呢？</p><p>如下图，这是一颗决策树。</p><figure><img src="/img/2022-2-5-01.png" alt="img1" /><figcaption aria-hidden="true">img1</figcaption></figure><p>每个节点最后应该是一直走左儿子得到的。</p><p>如图：</p><figure><img src="/img/2022-2-5-02.png" alt="img2" /><figcaption aria-hidden="true">img2</figcaption></figure><p>既然我们已经订好了这些东西，我们已经确定了每个数怎么填合法(在根的区间最大)，也已经知道如果给出一种填数方案，答案是什么。接下来只需要确定策略即可。</p><p>这是我们忽然发现，如果这是一个 <spanclass="math inline">\(1,2,\cdots,2^n\)</span> 的序列，那么 <spanclass="math inline">\(2^n\)</span> 没人能打得过。(<spanclass="math inline">\(\sum_{i=1}^{2^n-1}2^i=2^{2^n}-1\)</span>)</p><p>所以我们对这个决策树剥根。发现剥完根，会出现一堆“孤儿”，此时我们希望答案最小，也就是这些孤儿的权值尽可能大，这正和我们需要在根最大这个限制不谋而合，我们取出<span class="math inline">\(n\)</span> 个最大的数减去。</p><figure><img src="/img/2022-2-5-03.png" alt="img3" /><figcaption aria-hidden="true">img3</figcaption></figure><p>我们再次剥去根后，会产生新的一些子树，但是此时我们便依旧希望这些尽量小。</p><p>考虑我们其实陷入了与原问题同样的境地，仔细思考，不难发现我们把最大的数放入最大的子树这个贪心也是没问题的。</p><p>因为我们能够尽可能多的减去较大的数，这样一定更优，考虑(<spanclass="math inline">\(\sum_{i=1}^{2^n-1}2^i=2^{2^n}-1\)</span>）。</p><p>所以我们现在递归到了若干子问题。</p><p>此时深度一样的子树地位相同，所以 <spanclass="math inline">\(\mathcal{O(n^2)}\)</span> 的暴力呼之欲出。</p><p>观察性质/暴力维护个数均可以做到 <spanclass="math inline">\(\mathcal{O(n)}\)</span> 的。</p><hr /><p><a href="https://uoj.ac/contest/74/problem/703">C</a> 赵云八卦阵</p><p>被xor教育(1/100)</p><p>首先我们不难发现删除无用。</p><p><span class="math inline">\(\text{[a,b,c]}\to \text{[a,b xor a,c]}\to\text{[a,bxor a,c xor b xor a]}\to \text{[a,b,c xor b xor a]}\to\text{[a,b,c xor a]}\)</span></p><p>接下来问题转变为每个数可以是前缀异或出来的，问最长上升子序列。</p><p>普通的 <span class="math inline">\(f_i\)</span> 表示到 <spanclass="math inline">\(i\)</span> 最长是 <spanclass="math inline">\(f_i\)</span> 的 dp没有了出路。</p><p>考虑 <span class="math inline">\(f_{i,j}\)</span> 表示到 <spanclass="math inline">\(i\)</span> 长度是 <spanclass="math inline">\(j\)</span> 的子序列末尾最小是 <spanclass="math inline">\(f_{i,j}\)</span>。</p><p>使用线性基转移较为容易做到 <spanclass="math inline">\(\mathcal{O(n^2\log w)}\)</span>。</p><p>这是考虑，我都线性基了，那么不是基底的数有啥用呀？</p><p>对呀如果我们能用前面的表达出 <span class="math inline">\(b_i\)</span>那么这个 <span class="math inline">\(b_i\)</span> 岂不就等价于 <spanclass="math inline">\(0\)</span>？？</p><p>的确的。</p><p>发现最终只有 <span class="math inline">\(\log w\)</span>段，那么一个很自然的 <span class="math inline">\(n\log^2w\)</span>的dp呼之欲出。</p><p>其实也没有那么显然把，就是考虑我们记录 <spanclass="math inline">\(f_i\)</span> 表示到当前，长度为 <spanclass="math inline">\(i\)</span> 的子序列最后的最小是 <spanclass="math inline">\(f_i\)</span>。</p><p>单点转移就考虑如果 <span class="math inline">\(f_i\)</span>加入了一个会怎么样,由于是xor，<span class="math inline">\(f_i\)</span>能被新的基表达出来，那么我们只需要找到一个大于 <spanclass="math inline">\(f_i\)</span> 而且包含当前 <spanclass="math inline">\(b_k\)</span> 的最小的在基里的数。</p><p>这个可以把基消成对角基来处理。 <span class="math display">\[\begin{bmatrix}1&amp;0&amp;0&amp;\cdots&amp;0&amp;\vec b_0\\0&amp;1&amp;0&amp;\cdots&amp;0&amp;\vec b_1\\0&amp;0&amp;1&amp;\cdots&amp;0&amp;\vdots\\\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots\\0&amp;\cdots&amp;\cdots&amp;\cdots&amp;1&amp;\vec b_{n}\\0&amp;\cdots&amp;\cdots&amp;\cdots&amp;\cdots&amp;\vec b_i\end{bmatrix}\]</span> 这样如果当前这位 第 <span class="math inline">\(k\)</span>位是 <span class="math inline">\(0\)</span>我们直接把低于这位的抹0，然后把这位变成 <spanclass="math inline">\(1\)</span>。</p><p>否则我们也直接抹0，加上1，然后考虑无论前方什么样子，如果能组成 <spanclass="math inline">\(b_k\)</span> 那是最好的，不用管了。</p><p>否则我们把 <span class="math inline">\(b_k\)</span>这个0再变成1，这样一定合法， 为什么最小？考虑本质上我们只是加了一个<span class="math inline">\(b_k+1\)</span> 位，当然最小了。</p><p>整段转移类似，但是需要一个类似 <spanclass="math inline">\(\min(\mathrm{rank}_i+(j-i))\)</span>的区间排名最小值，需要那单调队列维护一下。</p><p>这时我们只需要插入对角基的时候更新排名。</p><p>这也是比较容易实现的，大体上我们看他原来的和需要消去 <spanclass="math inline">\(b_k\)</span>的并，如果是奇数那么我们必须要让他正确，填上一个 <spanclass="math inline">\(b_k\)</span>，否则不变，这样下来判断奇偶性就可以用 <code>__builitin_parity</code><span class="math inline">\(O(1)\)</span> 计算，当然<code>__builtin_popcount</code> 也行</p><p>所以总复杂度 <span class="math inline">\(O(n\log n)\)</span>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一道神仙题</title>
    <link href="/2022/01/12/ORZORZ-probelm/"/>
    <url>/2022/01/12/ORZORZ-probelm/</url>
    
    <content type="html"><![CDATA[<p>神仙神仙题。</p><p><ahref="http://192.168.102.138/JudgeOnline/problem.php?cid=1611&amp;pid=1">LINK</a></p><p>非常的NB，首先，考虑答案的上界。</p><h3 id="上界">上界</h3><p>考虑大概就是这么一个情况，我们不希望过多的“小”的最后剩下了，使得出现不得不放置&gt;=3个的。</p><p>而小的和小的很可能达不到 <spanclass="math inline">\(\mathrm{sum}/A\)</span>，所以考虑我们可以取出最大的和最小的。</p><p>由于平均数的特性，大的加小的一定在平均数之上，我们删去最小的，和最大的部分，转化为子问题。</p><p>所以不难发现我们构造出来上界 <spanclass="math inline">\(n-1\)</span>。</p><p><strong>值得注意的：</strong>这个构造的确不是最优的，我们武断的删除最大值部分可能不是最优的，但是合法的，这足够了。</p><p>我们默认了A也就是答案的值，我们现在本质上在判断每一个A是否合法。</p><p>我们使用语言描述一下我们的 observation。</p><p>当我们有 <span class="math inline">\(x\)</span>瓶饮料时，我们能构造出来一种只需要 <spanclass="math inline">\(x-1\)</span> 个瓶子的方案。满足 <spanclass="math inline">\(\sum_{x \inS}x=(|S|-1)\frac{sum}{A}\)</span>。</p><hr /><p>现在我们可以暴力枚举答案了，那么接下来该怎么判断每一个A是否合法呢？</p><p>考虑实际上，我们选出一个饮料的子集,<spanclass="math inline">\(S\)</span>,使得 <spanclass="math inline">\(\sum_{x\in S}x=(|S|-1)\frac{sum}{A}\)</span>，这个的涵义与上述构造方案相同。</p><p>此时我们需要证明的是，任意的选饮料的情况能被上述方法表示出了。</p><p>根据题解的证明，我们将一种饮料在两个杯子里看作一种“分裂”，那么我们把“分裂”的两个结点(两个杯子)连边，会形成若干个连通块。</p><p>我们需要说明，将这些连通块再次分组，可以使得每一个组内，饮料集合<span class="math inline">\(S\)</span>，满足 <spanclass="math inline">\(\sum_{x\in S}x=|S-1|\frac{sum}{A}\)</span>。（只要能分出来一定就是 <span class="math inline">\(N-A\)</span>个组（（（（ N是饮料个数，A是瓶子个数</p><p>首先点数为 <span class="math inline">\(|V|=A\)</span>,边数 <spanclass="math inline">\(|E|\leq 2A-N\)</span>。</p><hr /><h3 id="有点乱是吧">有点乱是吧</h3><p>题解写的非常乱套，所以我一步一步说：</p><p>“首先你看如果这个连通块是树，那么 <spanclass="math inline">\(n\)</span> 个点 <spanclass="math inline">\(n-1\)</span> 条边（合并）”</p><p>我们可以认为最初有 <span class="math inline">\(2n\)</span>种饮料(每个瓶子里放两种)，然后一次合并减少一种，所以现在这个共有 <spanclass="math inline">\(2n-(n-1)=n+1\)</span> 种饮料。</p><p>这个自然合法。</p><p>我们希望每一个<strong>组</strong>内饮料数-瓶子数=1.</p><hr /><p>等一下？？？？</p><p>如果一个图想联通，必须满足 <span class="math inline">\(|E|\geq|V|-1\)</span>,饮料数 <spanclass="math inline">\(\text{drinks}=2|V|-|E|\leq|V|+1\)</span></p><p>这个用语言描述就是如果现在有 <spanclass="math inline">\(B_i=|V|\)</span>个相关的瓶子（联通），那么饮料数不应该超过 <spanclass="math inline">\(D_i=|V|+1\)</span>。</p><p>考虑我们应让 <spanclass="math inline">\(\sum_{i=1}B_i=A,\sum_{i=1}D_i=N\)</span>。</p><p><span class="math inline">\(B_i-D_i\ge -1\)</span>。</p><p><span class="math inline">\(\sumB_i-D_i=A-D&lt;0\)</span>，这个表明如果我们有一个 <spanclass="math inline">\(B_i-D_i\ge0\)</span> 那么我们始终有 <spanclass="math inline">\(-1\)</span> 让他变小。</p><p>所以得证，我不确定。</p><hr /><p>做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？做法呐？</p><p>呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐呐？</p><p>注意限制！！当A固定的时候，找到的一组应该满足 <spanclass="math inline">\(\sum_{x\inS}x=(|S|-1)\frac{sum}{A}\)</span>，后面的看作常量，那就是每一个数减去<spanclass="math inline">\(\frac{sum}{A}\)</span>，然后就是每一组应该满足<span class="math inline">\(\sum_{x\inS}x=-\frac{sum}{A}\)</span>。我们限制就任意选一组 <spanclass="math inline">\(\{x_i\}\)</span>即可，考虑如果有交，那么互相交换即可。好有道理的样子呢！</p><p>AC了woc,绝世好题。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>simple thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>link-cut-tree</title>
    <link href="/2021/12/24/link-cut-tree-simple-thoughts/"/>
    <url>/2021/12/24/link-cut-tree-simple-thoughts/</url>
    
    <content type="html"><![CDATA[<p>主要写一写今天写的两个题目总结。</p><span id="more"></span><ol type="1"><li><a href="https://hydro.ac/d/bzoj/p/3779">bzoj3779</a></li></ol><p>重组病毒，首先看到他的操作相当于，lct换根，lct access。</p><p>于是我们观察，这个子树和用lct不好维护呀我去。</p><p>所以不要硬想lct了，不然NOI day1t1惨案了！！！！要先想性质！！！</p><p>发现这个颜色数，而且这个颜色是一段一段的，所以不难想到可以维护有几次转换颜色。</p><p>也就是<strong>lct虚边个数</strong>。</p><p>于此引入lct为时不晚。。</p><p>那考虑lct access 复杂度是均摊单次 <span class="math inline">\(O(\logn)\)</span> 的。所以我们暴力跳实链，更改虚实边，算更改产生的贡献。</p><p>发现由于链只有上下两种方向的，所以权值改变的点一定在 dfs序上的一个区间。。。然后线段树？线段树。。。。。</p><p>然后只需要找到这条实链上“下一个”（更浅的点即可），这样splay随便坐一坐即可。</p><p>我本来很是疑惑可不可以不用lct，但是发现换根操作真的太麻烦了，所以有换根操作时“适当”考虑lct是可以的。</p><p>总结：</p><ol type="1"><li><p>lct进行splay操作时<strong>一定要</strong>pushdown。</p></li><li><p>实链虚链（除了最后那条）都是直上直下的。（存疑）</p></li><li><p>最后一点，切记，在树的形态没有发生改变时（除了换根）千万不要随便想lct，现在我看NOI2021day1t1已经有点想lct了。切记切记。</p></li><li><p>另外，当跳需要实链而不是access的时候，千万要三思这个是不是lct，复杂度不对！！！。</p></li></ol><p>希望下次碰到NOIday1t1那种题，别被误导，一切题不管多么像，一定先想性质。</p><p>当静态树的时候，除了极其特殊情况 重链剖分yyds!</p><hr /><p>下面这个题就丝毫不会误导人。。。。。。</p><p>确实挺有意思的。。。。。</p><p><a href="https://hydro.ac/d/bzoj/p/2759">bzoj2759</a></p><p>这个题首先看到树的形态这么多变，所以可以放心的lct......</p><p>这个题的话，我们考虑我们随意钦定一个环上的点为根，然后维护转移矩阵。</p><p>这样尽管我们无法维护时时所有点的值，我们也可以当作每一个点有一个点权，然后每次询问是查询链。。。</p><p>接下来考虑如何求解根节点，以及如何维护基环树，（有点繁呀）。</p><p>我大概就是照着别人的代码“抄袭”的。</p><p>首先基环树就是在<strong>钦定的根节点</strong>断环成链。然后只需要多维护一个转移到根节点的边即可。</p><p>具体解方程我们就查询这条到根节点的边的<strong>另一端</strong>的点的表达式，然后解方程即可。</p><p>换边时候，先切掉一条边，如果基环断裂，那就先加入基环，然后在加入一条边。</p><p>不细想会感觉这个很难的样子，实则不然，考虑由于是基环树，如果现在断了基环，那么相当于一棵树被割裂开了。（n个点，n-2条边）</p><p>而且是这棵新树的“有向根”没有了父亲，所以把这个新树和原来的根连接即可，原来的根不在是根，而新树的根会获得一条“基环边”。</p><p>如果没有段基环，就是把子树独立出去了，这是很simple的情况。</p><p>所以这个题还是挺有意思的把。。。。。。。。。。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
      <tag>link cut tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1610F</title>
    <link href="/2021/12/22/cf1610F/"/>
    <url>/2021/12/22/cf1610F/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://www.luogu.com.cn/blog/Garyhuang1234567890/solution-cf1610f">更加牛逼的大佬的题解！</a></p><p><a href="https://www.luogu.com.cn/problem/CF1610F">link</a></p><p>我朝，这个题解太牛逼了。</p><p>当然官方题解也有很多值得学的地方，但是这个第二个大佬的题解更接近我现在的思维模式。</p><h3 id="先说大佬的方法">先说大佬的方法</h3><p>首先考虑一个点当且仅当 <span class="math inline">\(\sumw_{u,v}\)</span> 是奇数是才有机会是。</p><p>当然这样的点有偶数个（考虑一条边俩贡献）。</p><p>所以欧拉回路的想法油然而生，我们希望所有。</p><p>但是我们是带权的，所以直接跑不行，那么最牛逼的地方来了，直接分开考虑<span class="math inline">\(1\)</span>,<spanclass="math inline">\(2\)</span>。</p><p>把 <span class="math inline">\(1,2\)</span> 边建成两个图。</p><p>那么如果一个点 <span class="math inline">\(x\)</span> 的 <spanclass="math inline">\(1\)</span> 的边，<spanclass="math inline">\(2\)</span>的边都是偶数，那么他没机会了，不用管了。</p><p>如果他 <span class="math inline">\(1\)</span> 边奇数，<spanclass="math inline">\(2\)</span>边偶数，我们就建一个虚电，虚边，代表那个 <spanclass="math inline">\(+/-1\)</span>。</p><p>如果他 <span class="math inline">\(1\)</span> 边奇数，<spanclass="math inline">\(2\)</span> 边奇数，那么就必须有一个 <spanclass="math inline">\(1\)</span> 边和 <spanclass="math inline">\(2\)</span> 边匹配，那么我们建出一条 <spanclass="math inline">\(x_1\)</span> 到 <spanclass="math inline">\(x_2\)</span> 的边，代表走进来的 <spanclass="math inline">\(1\)</span> 边匹配走出去的 <spanclass="math inline">\(2\)</span> 边。</p><p>如果他 <span class="math inline">\(1\)</span> 边偶数，<spanclass="math inline">\(2\)</span>边奇数，我们不想管他，但是他得匹配，所以也给他的 <spanclass="math inline">\(2\)</span> 边建虚边。</p><p>这个组合构造思维牛逼炸了。</p><hr /><p>接下来是欧拉回路的另一种视角，消“环”。</p><p>在这里体现的就是类似增量法的思维。</p><p>找到 <span class="math inline">\(x,y,z\)</span> 使得 <spanclass="math inline">\(w(x,y)=w(y,z)\)</span> 那么我们认为对于 <spanclass="math inline">\(y\)</span> 这两条边抵消了，但是对于 <spanclass="math inline">\(x\)</span>,<span class="math inline">\(z\)</span>并不是，所以我们加入 <span class="math inline">\((y,z,w(x,y))\)</span>这条边，继续增量构造。</p><p>正确性就是最后一定是一堆二度点组成的图形，如果有一度点，就是链，否则是环，这样好考虑了，所以原问题有解。</p><p>值得注意的是我们并不是在匹配，而更加类似在“消除贡献”，所以正确性比较显然了。。。。</p><p>是一个好题！</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闵可夫斯基和</title>
    <link href="/2021/12/22/Minkowski-addition-simple-thoughts/"/>
    <url>/2021/12/22/Minkowski-addition-simple-thoughts/</url>
    
    <content type="html"><![CDATA[<p>闵可夫斯基和。[正在施工]</p><p>一般人都是由这样一个<ahref="https://www.luogu.com.cn/problem/P4557">例题</a>引入学习的，那我们也用这个例题引入，记录。</p><span id="more"></span><p>last update: 2021-12-11 16:35</p><hr /><p>给定两个凸多边形点集，多次询问向量 <spanclass="math inline">\(q\)</span>，问在点集 <spanclass="math inline">\(B\)</span> 每个点都移动 <spanclass="math inline">\(q\)</span>，两个点集还能有交吗？</p><p>对于别的题解，他们大都在花大量笔墨写闵可夫斯基和是什么东西，我觉得这是愚蠢的。</p><p>因为我并不能从这个题直观看出来他在求什么的“和”。</p><p>考虑这个题，判断两个凸多边形相交情况是较难的，所以我们打算预处理出来可以使这两个多边形有交的向量集合<span class="math inline">\(Q\)</span>。</p><p>有交的基本情况一定是多边形 <spanclass="math inline">\(\mathcal{A,B}\)</span>,的某个顶点接触到了另一个的顶点（边相交可以沿边平移）。</p><p>所以我们把两个顶点间的向量求出来。如图：</p><figure><img src="\img\2021-12-22-01.png" alt="img1" /><figcaption aria-hidden="true">img1</figcaption></figure><p>这样我们列出这些向量：</p><figure><img src="\img\2021-12-22-02.png" alt="img1" /><figcaption aria-hidden="true">img1</figcaption></figure><p>接下来只能感性理解了，对于几个向量，在里面的“影响力”肯定没有在外面的大。</p><figure><img src="\img\2021-12-22-03.png" alt="img1" /><figcaption aria-hidden="true">img1</figcaption></figure><p>或者这么说明两个向量之间的向量一定合法，有交（毕竟原先的多边形也是凸的，不太可能首末状态有交，中间无交），所以最终的答案一定是一个凸包。</p><hr /><p>那么问题转换为我们要求这个向量集合组成的凸包 ： <spanclass="math inline">\(S=\{q_a-q_b\mid q_a\in A,q_b\in B\}\)</span>。</p><p>此时闵可夫斯基和这个概念便可以解释上述问题。</p><p>闵可夫斯基和能计算 <span class="math inline">\(S=\{q_a+q_b\mid q_a\inA,q_b\in B\}\)</span>。</p><p>所以对于此题，把 <span class="math inline">\(B\)</span>取反，计算闵可夫斯基和即可。</p><hr /><p>求闵可夫斯基和的方法就是把“边向量”极角排序，然后顺次相连。</p><p>证明不是很会，以后再更。</p><p>每一个新凸包点都是原先两个凸包的点的和。</p><p>注意这些向量加法是原先向量平面上的“点”，而不是边向量，边向量只不过是用来求闵可夫斯基和的。</p><hr /><p>前面没啥问题把。。。。后面：</p><h3 id="假了寄了">假了，寄了</h3><p>Max卷积如果不是有更好的凸的性质，<strong>几乎不可能</strong>很快的做出，包括使用闵可夫斯基和。</p><p>抱歉可能假了。</p><hr /><p>其实并没有完全假，</p><p>主要就是考虑凸的性质更加厉害。</p>]]></content>
    
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>min25筛法，powerful number 筛法</title>
    <link href="/2021/12/20/seive-simple-thoughts/"/>
    <url>/2021/12/20/seive-simple-thoughts/</url>
    
    <content type="html"><![CDATA[<p>Min25筛法，以及PN筛的不完全理解。</p><h3 id="min25-筛法">Min25 筛法</h3><p>个人感觉这种筛法挺暴力的。</p><p>我现在还记得lxn跟我说这种筛法最重要的部分是筛素数前缀和。</p><p><span class="math inline">\(F(n)=\sum_{p\in\mathbb{P},p\leqn}f(p)\)</span>。</p><p>这个该怎么做呢？？？容斥就好了，我们第一次把所有的都算进去 <spanclass="math inline">\(\sum_{p\leqn}f(p)\)</span>，然后从小往大枚举质数，一个一个筛去。</p><p>也就是 <span class="math inline">\(F(n)\gets F(n)-(F(\lfloorn/p\rfloor)-\sum_{x&lt;p,x\in\mathbb{P}}f(x))f(p)\)</span>。就是这么简单,减去是我们需要保证现在每个数最小质因子就是<spanclass="math inline">\(p\)</span>,一定有不符合的<strong>素数</strong>减去即可。注意我们能这么做的前提是在质数处是完全积性函数。</p><p>然后这部分只需要 <spanclass="math inline">\(\tilde{O}({n^\frac{3}{4}})\)</span> 即可。</p><p>然后对于单点求前缀和；</p><p><span class="math inline">\(F(n,p)\)</span> 表示最小质因子 <spanclass="math inline">\(&gt;p\)</span> 的签注和，那么我们枚举最小质因子<span class="math inline">\(p^e\)</span>。此时因为在 <spanclass="math inline">\(f(p^e)\)</span> 处积性，所以直接：</p><p><span class="math inline">\(F(n,p_0)\gets F(\lfloorn/p^e\rfloor,p)f(p^e)\)</span></p><p>另外的我们需要算上 <span class="math inline">\(p\)</span> 和 <spanclass="math inline">\(p^k\)</span> 贡献。</p><p>因为 <span class="math inline">\(p\)</span>可能有值域个，所以我们需要预处理素数的和，但是 <spanclass="math inline">\(p^2\)</span> 只有根号个，我们暴力计算即可。</p><p>值得注意的是我们在定义上最好避开 <spanclass="math inline">\(x=1\)</span> 这个特殊情况，eg我们定义 g的初始状态时候要定义的是 <spanclass="math inline">\(\sum_{i=2}^nf(i)\)</span>，这样可以有效的避免素数算重。我们只需要在考虑完合数时候直接算出质数即可。</p><hr /><p>PN筛。</p><p>想对积性函数 <span class="math inline">\(f(x)\)</span> 求前缀和。</p><p>设 <span class="math inline">\(g(x)\)</span> 为 <spanclass="math inline">\(x\in\mathbb{P}\)</span> 时候的拟合函数，<spanclass="math inline">\(g(p)=f(p),p\in\mathbb{P}\)</span>。</p><p>所以我们设 <span class="math inline">\(h=\frac{f}{g}\)</span>这里是狄利克雷除法。</p><p>也就是说 <span class="math inline">\(h\otimes g=f\)</span>。</p><p>考虑 <span class="math inline">\(f(p)=h(p)g(1)+g(p)h(1)\)</span>，而<span class="math inline">\(g(p)=f(p)\)</span>，可得 <spanclass="math inline">\(h(p)=0\)</span>，进而得到，<spanclass="math inline">\(h(p)\)</span> 的非 powerful number 出取值是0.<span class="math display">\[\begin{aligned}\sum_{i=1}^{n}f(i)=\sum_{i=1}^{n}\sum_{d\midi}g(d)h(i/d)=\sum_{d=1}^{n}h(d)\sum_{i=1}^{n/d}g(d)\\\end{aligned}\]</span> 发现 <span class="math inline">\(h\)</span> 我们只需要考虑powerful number 处的点值。</p><p>接下来就是 <span class="math inline">\(g\)</span>的前缀和，所以接下来就仁者见仁义者见义了。</p><p>具体配凑可以根据贝尔级数来配凑。</p><p>贝尔级数一句话就是如果再每个 <span class="math inline">\(\bmodp\)</span> 下级数相乘相等，那么整体上迪利克雷卷积就相等。</p><p>一个构造拟合函数的 trick是迪利克雷卷积=质数处加法。</p><p><span class="math inline">\(f=d*d,f(p)=d(p)+d(p)=4\)</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本多项式</title>
    <link href="/2021/12/13/basic-poly/"/>
    <url>/2021/12/13/basic-poly/</url>
    
    <content type="html"><![CDATA[<p>本文简单介绍一下基本多项式理论。</p><p>持续更新中。</p><span id="more"></span><p>因为是简单介绍，只说明做法，不给予严格证明，以及前人是如何想出的这个方法。</p><h3 id="多项式乘法">多项式乘法</h3><h4 id="多项式乘法与和卷积">多项式乘法与和卷积</h4><p><spanclass="math inline">\(A=\sum\limits_{i=0}^{n}a_ix^i,B=\sum\limits_{i=0}^{n}b_ix^i\)</span>。</p><p>显然有 <span class="math inline">\(A\timesB=\sum\limits_{i=0}^n\sum\limits_{j=0}^na_ib_jx^{i+j}=\sum\limits_{d=0}^n\sum\limits_{i+j=d}^na_ib_jx^d\)</span>。</p><p><span class="math inline">\(C=A\timesB,C(d)=\sum\limits_{i+j=d}^na_ib_jx^d\)</span>。</p><p>这玩意就是和卷积，可见和卷积与多项式乘法有着千丝万缕的关系。</p><h4 id="快速傅里叶变换">快速傅里叶变换</h4><p>众所周知，一个 <span class="math inline">\(n-1\)</span>次多项式（函数）可以用 <span class="math inline">\(n\)</span>个不同的点唯一确定出来。</p><p>而如果考虑两个多项式 <spanclass="math inline">\(f,g\)</span>，当<spanclass="math inline">\(x=x_0\)</span> 时，<spanclass="math inline">\(f\times g\ (x_0)=f(x_0)\times g(x_0)\)</span>。</p><p>这个很好理解。</p><p>所以点值表达乘积就是直接将相同横坐标的 <spanclass="math inline">\(y\)</span> 乘。</p><p>那么如何将多项式 <span class="math inline">\(f\)</span>转成点值。</p><p>代入复数，用 <span class="math inline">\(n\)</span> 次单位根做 <spanclass="math inline">\(x\)</span>。</p><p>即 <span class="math inline">\(x^n=1\)</span> 的 <spanclass="math inline">\(n\)</span> 个复数解，记录以 <spanclass="math inline">\(x\)</span> 轴正方向，逆时针第一个复根为 <spanclass="math inline">\(w\)</span>，所有单位根就是 <spanclass="math inline">\(w^0,w^1,\cdots,w^{n-1}\)</span>。</p><p>目标：求 <span class="math inline">\(\forall \i,F(k)=\sum\limits_{j=0}^{n-1}a_j(w^i)^j\)</span>。</p><p>我们将次方奇数偶数分开考虑 <spanclass="math inline">\(F(k)=\sum\limits_{j=0}^{n}a_j(w^k)^j=\sum\limits_{j=0}^{n/2-1}a_{2j}(w^k)^{2j}+w^k\sum\limits_{j=0}^{n/2-1}a_{2j+1}(w^k)^{2j}\)</span>。</p><p><spanclass="math inline">\(F(k)=\sum\limits_{j=0}^{n}a_j(w^k)^j=\sum\limits_{j=0}^{n/2-1}a_{2j}(w^{2k})^{j}+w^k\sum\limits_{j=0}^{n/2-1}a_{2j+1}(w^{2k})^{j}\)</span>。</p><p>由于 <span class="math inline">\((w^k)^2=(w^{k+n/2})^2\)</span>（<span class="math inline">\(w^n=1\)</span>)。</p><p>所以 <span class="math inline">\(F(k)\)</span> 与 <spanclass="math inline">\(F(k+n/2)\)</span> 只差一点点，就是 <spanclass="math inline">\(w^k\)</span> 项的正负号 （<spanclass="math inline">\(w^k=-w^{k+n/2}\)</span>）。</p><p>原本你要求 <span class="math inline">\(F(w^0),F(w^1),\cdotsF(w^{n-1})\)</span>,现在只要求 <spanclass="math inline">\(F(w^0),F(w^1),\cdots F(w^{n/2-1})\)</span>。</p><p>范围直接缩小一倍。那么对于接下来的 <spanclass="math inline">\(F_0(w^{2k}),F_1(w^{2k})\)</span>（系数是奇数(1)还是偶数(0)）也可以递归下求。</p><p>递归效率缓慢，能够优化。</p><p>发现本质上每次将 <spanclass="math inline">\(k\)</span>,缩小一半的操作其实是想要最后把 <spanclass="math inline">\(w^0\)</span> 算出，然后计算出别的。</p><p>可以如图按照一定顺序把 <span class="math inline">\(a_i\times(w^0)^i\)</span> 按顺序排开，然后合并。</p><p>大概。。。</p><p>这个顺序<strong>通过观察</strong> 发现是二进制反过来，所以能快速求出。</p><p>代码解读一下。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> pie=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(<span class="hljs-built_in">complex</span> *a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;lim;i++) <span class="hljs-keyword">if</span>(i&lt;rev[i]) swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> mid=<span class="hljs-number">1</span>;mid&lt;lim;mid=mid&lt;&lt;<span class="hljs-number">1</span>)<span class="hljs-comment">//从下向上合并，mid 代表合并之前每块的长度</span><br>&#123;<br><span class="hljs-function"><span class="hljs-built_in">complex</span> <span class="hljs-title">wn</span><span class="hljs-params">(<span class="hljs-built_in">cos</span>(p/mid),<span class="hljs-built_in">sin</span>(p/mid))</span></span>;<span class="hljs-comment">// 合并后那个的w^k,模长都是1，用角度表示。</span><br>                                          <span class="hljs-comment">// 比如说 mid=lim/2 时,wn这个的角度就是 pie/(lim/2)=(2*pie)/lim</span><br>          <span class="hljs-comment">// 就是最初的单位根。</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> r=mid&lt;&lt;<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>;j&lt;lim;j+=r)<span class="hljs-comment">//跳块，r就是合并后块长</span><br>&#123;<br><span class="hljs-function"><span class="hljs-built_in">complex</span> <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-number">1.0</span>,<span class="hljs-number">0.0</span>)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;mid;k++,w=w*wn) <span class="hljs-comment">//w 就是你乘的 w^k (因为你更新得更新 w^0,w^k,w^2k,... 处的点值)</span><br>&#123;<br><span class="hljs-built_in">complex</span> x=a[k+j],y=w*a[k+j+mid];<br>a[k+j]=x+y;<br>a[k+j+mid]=x-y;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>一般人不用点值表达，所以必须要有逆傅里叶变换。</p><p><strong>不难发现</strong> 由于范德蒙德矩阵在 <spanclass="math inline">\(A_{i,j}=w^{ij}\)</span> 有着巨NB的性质，<spanclass="math inline">\(A^{-1}_{i,j}=w^{-ij}\)</span>。 （前面那个 <spanclass="math inline">\(-1\)</span> 的意思是逆矩阵）</p><p>所以只要把上文代码中的 <code>wn(cos(p/mid),sin(p/mid))</code> 改成<code>wn(cos(-p/mid),sin(-p/mid))</code> 即可。</p><p>证明是个构造证明，我也不会从暴力手算 <spanclass="math inline">\(A_{i,j}\)</span> 逆矩阵出发证明，而只会验证 <spanclass="math inline">\(A\times B=\epsilon\)</span>,<spanclass="math inline">\(B\)</span> 即为你构造的那个逆矩阵。</p><h4 id="快速数论变换">快速数论变换</h4><p>把单位根换成原根有相同性质。</p><hr /><p>再此贴出现在的Poly模板；</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ret=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) ret=ret*a%mod;<br>        a=a*a%mod;b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;=mod) x-=mod;<br>&#125;<br><span class="hljs-keyword">int</span> *rev[<span class="hljs-number">23</span>],*wn[<span class="hljs-number">23</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> mid=<span class="hljs-number">1</span>,lg=<span class="hljs-number">0</span>;mid&lt;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">20</span>);mid&lt;&lt;=<span class="hljs-number">1</span>,lg++)&#123;<br>        wn[lg]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[mid+<span class="hljs-number">1</span>];<br>        wn[lg][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> w=qpow(<span class="hljs-number">3</span>,(mod<span class="hljs-number">-1</span>)/(mid&lt;&lt;<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;mid;k++)&#123;<br>            wn[lg][k]=wn[lg][k<span class="hljs-number">-1</span>]*w%mod;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//O2 is Necessary!!!</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poly</span>&#123;</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; a;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">poly</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">poly</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v)</span></span>&#123;a=v;&#125;<br>    <span class="hljs-comment">//construct a exactly x^n poly</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">poly</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;a.resize(n+<span class="hljs-number">1</span>);&#125;<br>    <span class="hljs-comment">//return the exactly degree of the poly</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> a.size()<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//reconstruct a exacly x^n poly</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lim)</span></span>&#123;<br>        a.resize(lim+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//the expected degree is x^&#123;lim-1&#125; </span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ntt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lim)</span></span>&#123;<br>        resize(lim<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">int</span> len=__lg(lim);<br>        <span class="hljs-keyword">if</span>(rev[len]==<span class="hljs-literal">nullptr</span>)&#123;<br>            rev[len]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [lim+<span class="hljs-number">1</span>];<br>            rev[len][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;lim;i++) &#123;<br>                rev[len][i]=(rev[len][i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)?(lim&gt;&gt;<span class="hljs-number">1</span>):<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;lim;i++) <span class="hljs-keyword">if</span>(rev[len][i]&lt;i) swap(a[rev[len][i]],a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> mid=<span class="hljs-number">1</span>,lg=<span class="hljs-number">0</span>;mid&lt;lim;mid&lt;&lt;=<span class="hljs-number">1</span>,lg++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;lim;j+=(mid&lt;&lt;<span class="hljs-number">1</span>))&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;mid;k++)&#123;<br>                    <span class="hljs-keyword">int</span> x=a[j+k],y=a[j+k+mid]*wn[lg][k]%mod;<br>                    a[j+k]=(x+y);<span class="hljs-keyword">if</span>(a[j+k]&gt;=mod) a[j+k]-=mod;<br>                    a[j+k+mid]=(x-y);<span class="hljs-keyword">if</span>(a[j+k+mid]&lt;<span class="hljs-number">0</span>) a[j+k+mid]+=mod;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//the expected degree is x^&#123;lim-1&#125;</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">intt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lim)</span></span>&#123;<br>        resize(lim<span class="hljs-number">-1</span>);<br>        reverse(a.begin()+<span class="hljs-number">1</span>,a.end());<br>        ntt(lim);<br>        <span class="hljs-keyword">int</span> inv=qpow(lim,mod<span class="hljs-number">-2</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;lim;i++) a[i]=a[i]*inv%mod;<br>    &#125;<br>    <span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span>&amp; <span class="hljs-keyword">operator</span> [](<span class="hljs-keyword">int</span> x)&#123;<br>        <span class="hljs-keyword">return</span> a[x];<br>    &#125;<br>    <span class="hljs-keyword">inline</span> poly <span class="hljs-keyword">operator</span> +(<span class="hljs-keyword">const</span> poly&amp;b)&#123;<br>        <span class="hljs-keyword">int</span> sza=size(),szb=b.size();<br>        <span class="hljs-keyword">int</span> lim=max(sza,szb);<br>        <span class="hljs-function">poly <span class="hljs-title">c</span><span class="hljs-params">(lim)</span></span>;<br>        rep(i,<span class="hljs-number">0</span>,lim) &#123;<br>            <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(i&lt;=sza) x=a[i];<br>            <span class="hljs-keyword">if</span>(i&lt;=szb) y=b.a[i];<br>            c[i]=(x+y),up(c[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    <span class="hljs-keyword">inline</span> poly <span class="hljs-keyword">operator</span> -(<span class="hljs-keyword">const</span> poly&amp;b)&#123;<br>        <span class="hljs-keyword">int</span> sza=size(),szb=b.size();<br>        <span class="hljs-keyword">int</span> lim=max(sza,szb);<br>        <span class="hljs-function">poly <span class="hljs-title">c</span><span class="hljs-params">(lim)</span></span>;<br>        rep(i,<span class="hljs-number">0</span>,lim) &#123;<br>            <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(i&lt;=sza) x=a[i];<br>            <span class="hljs-keyword">if</span>(i&lt;=szb) y=b.a[i];<br>            c[i]=(x-y+mod),up(c[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    <span class="hljs-keyword">inline</span> poly <span class="hljs-keyword">operator</span> *(<span class="hljs-keyword">const</span> poly&amp;b)&#123;<br>        poly c=b,d=(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">int</span> len=c.size()+(d.size());<br>        <span class="hljs-keyword">int</span> lim=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(lim&lt;=len) lim&lt;&lt;=<span class="hljs-number">1</span>;<span class="hljs-comment">//lim -&gt; x^&#123;lim-1&#125;</span><br>        d.ntt(lim),c.ntt(lim);<br>        rep(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>) c[i]=c[i]*d[i]%mod;<span class="hljs-comment">//,cerr&lt;&lt;c[i]&lt;&lt;&quot; &quot;;cerr&lt;&lt;endl;</span><br>        c.intt(lim);<br>        c.resize(len);<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    <span class="hljs-keyword">inline</span> poly <span class="hljs-keyword">operator</span> *(<span class="hljs-keyword">int</span> b)&#123;<br>        poly c=(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;x:c.a) x=(x*b)%mod;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    <span class="hljs-comment">//this is the first time You typing the Poly template,Ignore the constant factor！！！！！！</span><br>    <span class="hljs-comment">//mod x^lim</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> poly <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lim)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(lim==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-function">poly <span class="hljs-title">x</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;x[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],mod<span class="hljs-number">-2</span>);<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<br>        poly c=(*<span class="hljs-keyword">this</span>),ans;<br>        c.resize(lim<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">int</span> l=(lim+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        poly inv=c.inv(l);<br>        ans=(inv*<span class="hljs-number">2</span>)-(inv*inv)*c;<br>        ans.resize(lim<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-comment">//mod x^lim</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> poly <span class="hljs-title">Sqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lim)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(lim==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-function">poly <span class="hljs-title">ret</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;ret[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br>        poly c=(*<span class="hljs-keyword">this</span>);c.resize(lim<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">int</span> l=(lim+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        poly F0=c.Sqrt(l);<br>        poly INV=F0.inv(lim-l+<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//consider that iff (F0*F0-c)\bmod x^l=0,you can calculate till lim-l+1</span><br>        <span class="hljs-keyword">auto</span> ret=F0-(F0*F0-c)*INV*((mod+<span class="hljs-number">1</span>)&gt;&gt;<span class="hljs-number">1</span>);<br>        ret.resize(lim<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    init();<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><hr /><p>对于EGF的阐释性的理解。</p><p>注意我们说的OGF,EGF都是对于一个数列说的。</p><p><span class="math inline">\(f\rightarrow F\)</span>。</p><p><span class="math inline">\(f\)</span> 的EGF定义为 <spanclass="math inline">\(\sum \frac{f_i}{i!}\cdot x^i\)</span>。</p><p>EGF 的好的性质主要体现在多项式每个系数除了对应的 <spanclass="math inline">\(i!\)</span>。</p><p>而CMD_BLK 说的二项卷积是对于 <span class="math inline">\(f,g\)</span>两个数列的卷积。</p><p>对于他们生成的函数/多项式，卷积依旧是经典的加法卷积。</p><p>如果考虑原本数列在卷积后变成什么了。</p><p>这么理解： <spanclass="math inline">\([x^i]1*[x^j]1=\binom{i+j}{i}\)</span>,把1变成原先每一项的含义即可。</p><p>讲道理prufer序列真的不是特别直观。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多项式</tag>
      
      <tag>gf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些简单题目总结</title>
    <link href="/2021/12/13/Top-Simple-problem/"/>
    <url>/2021/12/13/Top-Simple-problem/</url>
    
    <content type="html"><![CDATA[<p>一些简单问题。</p><p>可以一句话题解。</p><h3 id="problem-1">problem 1</h3><p><a href="https://codeforces.com/contest/1579/problem/G">G. MinimalCoverage</a></p><p>题意给一堆木棍长度 <span class="math inline">\(a_i\)</span>。</p><p>让你保证首尾相连，问你最少覆盖多少长度。</p><div class="note note-success">            <p>Solution</p>          </div><p><span class="math inline">\(f_i\)</span> 表示 <spanclass="math inline">\(i\)</span> 是否能被选。</p><p>转移很简单 <span class="math inline">\(f_i\gets f_{i\pma}\)</span>。</p><p>可以二分，可以哦直接 dp。</p><p><span class="math inline">\(\texttt{Complexity :}\mathcal{O(n^2\log_2 n/n^2)}\)</span>。</p><hr /><h3 id="problem2">problem2</h3><p>省选2020 day2t1</p><p><a href="https://www.luogu.com.cn/problem/P7518">gem</a></p><div class="note note-success">            <p>Solution</p>          </div><p>暂时只会淀粉质一种做法。</p><p>对于一堆点 x,y。</p><p>我们在他俩恰好在分治中心两颗子树时，统计答案。</p><p>只会统计一次，显然。</p><p>能往上走越多越好，维护 <span class="math inline">\(f(x)\)</span> 表示<span class="math inline">\(x\)</span> 开始（第一个是 <spanclass="math inline">\(w[x]\)</span>）最多走多远，到分治中心停止。</p><p>在记录一个 <span class="math inline">\(x\)</span> 到分治中心上最靠近<span class="math inline">\(x\)</span> 的一个 <spanclass="math inline">\(w[1]\)</span> 在哪里。</p><p>这样解决了往上爬。</p><p>往下爬。统计 x,y我也在y处统计。</p><p>二分 y 的答案。看 y上面最靠近 y 的 mid 是哪个，在维护一个反着走的<span class="math inline">\(g(x)\rightarrowrevf(x)\)</span>，。然后判断能不能和往上爬的接上 。</p><hr /><p>tips : 需要注意 y是分治中心时的处理的方法。</p><p>需要准确维护 mask(x)，就是当前链最靠下的 x 位置。</p><p>可以把 <span class="math inline">\(w(x)\rightarrow[1,n]\)</span>，映射。</p><p>分治中心的特殊处理需要格外注意。</p><hr /><p><ahref="https://atcoder.jp/contests/abc224/tasks/abc224_g">abc224</a></p><div class="note note-success">            <p>Solution</p>          </div><p>可以用 dp。</p><p>首先你只可能先选随机操作，然后在选+1操作。</p><p>那么我们考虑dp方程。</p><p><span class="math display">\[{f}(x)=\min\begin{cases}    \sum\limits_{i=1}^{n}\frac{f(i)}{n}+b\\    (T-x+1)a\end{cases}\]</span></p><p>发现这个方程上面 <spanclass="math inline">\(\sum\limits_{i=1}^{n}\frac{f(i)}{n}+b\)</span>是定值，下面是一次函数，那么取上面那段必然是一个前缀，取下面那段必然是剩余的。</p><p>那么 rephrase 题意可以变成：确定 <spanclass="math inline">\(x\)</span> 使得 <span class="math inline">\(s\geqx\)</span> 的直接 +1,否则 随机直到 <span class="math inline">\(s\geqx\)</span>。</p><p>那么答案 <span class="math inline">\(E_x(a\cdot k+b\cdotw)=E_x(a\cdot k)+E_x(b\cdot w)\)</span> 分别计算对于 <spanclass="math inline">\(x\)</span> 随机到 <spanclass="math inline">\(s\geq x\)</span> 的期望 和 当<spanclass="math inline">\(s\geq x\)</span> 时到 <spanclass="math inline">\(T\)</span> 的期望。</p><p>发现用 <span class="math inline">\(x\)</span> 似乎比较繁琐，重定义<span class="math inline">\(x\gets （T-x+1）\)</span>。</p><p>前面那段 <spanclass="math inline">\(b\frac{n-x}{n}\sum_{i=1}^{\infty}i(\frac{n-x}{n})^{i-1}\)</span>。</p><p>这个设后面的是 <span class="math inline">\(S\)</span>，<spanclass="math inline">\(S=\frac{x}{n}S+\sum(\frac{n-x}{n})^i=\frac{n-x}{n}S+\frac{1}{1-\frac{n-x}{n}}=\frac{n-x}{n}S+\frac{n}{x}\)</span>。</p><p>所以 <span class="math inline">\(S=(\frac{n}{x})^2\)</span>，所以<span class="math inline">\(E_x(b\cdot w)=b\frac{n}{x}\)</span>。</p><p>后面那段比较 simple，直接 <span class="math inline">\(E_x(a\cdotk)=a\sum_{i=0}^{x-1} \frac{i}{x}=a\frac{(x-1)}{2}\)</span>。</p><p><spanclass="math inline">\(E_x=b\frac{n}{x}+a\frac{x-1}{2}\)</span>。这个类似均值不等式，对号函数，直接x 最小值大概落在根号附近的一个整点，暴力算即可。</p><p>注意 <span class="math inline">\(S\leq T\)</span> 时要考虑直接 +1是否更优。</p><hr /><p><a href="http://codeforces.com/problemset/problem/177/F2">CF177F2Script Generation</a></p><p>limit the width of the DFS-tree.</p><p>Interesting Problem</p><p>However the result whick you have DFS is not ordered,so binary searchworks well.</p><p>By the way,dreamoon's code style is pretty good.</p><hr /><p>欢迎来到老cage碍世界。</p><p>今天小编带大家来了解 BZOJ5267 fwt。</p><p>fwt到底是怎么一回事呢？让我们一起来看看吧。</p><p>说起fwt，相信大家一定很熟悉，但是 BZOJ5267fwt什么呢？就让小编带大家一起了解吧。</p><p>其实，fwt就是分治，大家可能会惊讶，fwt竟然就是暴力分治！</p><p>你可能会感到疑惑，我靠，那你怎么计算原先的 <spanclass="math inline">\(sum\)</span>？</p><p>其实，显然 <span class="math inline">\(sum(j+mid,j+2\cdotmid-1)=f_{now}(j+2\cdot mid-1)-f_{now}(j+mid-1)\)</span>。</p><p>这究竟是为什么呢？小编也十分疑惑。(考虑 <spanclass="math inline">\(x\leq j+2\cdot mid-1\)</span> 的 <spanclass="math inline">\(x\)</span> 都是 <spanclass="math inline">\(j+2\cdot mid-1\)</span> 的子集，<spanclass="math inline">\(j+mid-1\)</span> 同理)。</p><p>这就是fwt了，不知道大家有什么想法呢？欢迎在屏幕下方留言哦</p><hr /><p><ahref="https://atcoder.jp/contests/abc229/tasks/abc229_g">abc黄题写了好久</a></p><p>本来以为挺简单的东西，就是把Y找出来，然后对 <spanclass="math inline">\(\sum|x_i-i|\)</span> 算min，显然排序中位数，着我没看出来不降，我直接上的线段数二分，啊啊啊啊啊啊啊，我是伞兵。。。。啊啊啊啊啊啊，俩log拉死了。。。。</p><hr /><p>k染色等价于k个独立集。</p><hr /><p>单位根反演： <spanclass="math inline">\([k|n]=\displaystyle\sum_{i=0}^{k-1}w_k^{in}\)</span>。记忆方法，考虑<span class="math inline">\(w_k^{m}=1\Leftrightarrow k|m\)</span>。</p><p>考虑只要 <span class="math inline">\(k\not=1\)</span> 那么转一圈就是<span class="math inline">\(0\)</span>，<spanclass="math inline">\(\sum_{i=0}^{k-1}w_k^{i}=\frac{1-w_k^{k}}{1-w_k}=0\)</span>，乘法就会使把一个环分成很多小环。。</p><hr /><p>卡特兰数递推式，这个对于现在的你还没有那么简单。 <spanclass="math display">\[c_0=1\\C_k=\sum_{a+b=k-1}C_aC_{b}\]</span>含义是枚举第一个括号内部是什么。注意，由于钦定了第一个括号，这样不会算重。我觉得这个钦定的想法还是很巧妙的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cf1608E/F</title>
    <link href="/2021/12/13/cf1608E-F/"/>
    <url>/2021/12/13/cf1608E-F/</url>
    
    <content type="html"><![CDATA[<p>cf-round1608的E/F</p><p>G看起来好神仙，不是很想补了。</p><span id="more"></span><hr /><p><a href="https://codeforces.com/contest/1608/problem/E">E</a></p><p>是个有一定难度的数据结构。</p><p>做这种题的时候，注意到我们只需要满足每个矩形内的<strong>所选颜色</strong>个数大于等于答案即可。</p><p>所以为了思考方便，这样我们可以主动去掉一些边界线。（其实也可以考虑如果有边界限制住恰好，这个感觉其实很生硬，就有点像凸性什么的，其实就是自己给自己加难度，所以不应该限制边界。）</p><p>上面这句话就是这道题的全部的 key point。</p><p>剩下的就是主观感受了，我们只可能有如下两种情况：</p><ol type="1"><li><p>三块平行的矩形</p></li><li><p>一个半平面，剩下的另一个半平面被分成了两个1/4平面。</p><figure><img src="\img\2021-12-13-01.png" alt="img1" /><figcaption aria-hidden="true">img1</figcaption></figure></li></ol><p>这样问题变得容易多了。</p><p>考虑这个大于等于答案这个条件就非常像 binary search...</p><p>所以二分答案，接下来 case 1可以3次lower_bound 非常简单的解决。</p><p>case2可以lower_bound 出来一个半平面，然后剩下的 <spanclass="math inline">\(O(n)\)</span> 枚举点应不应该在半平面里。</p><p>注意颜色有序，可以旋转，综上复杂度为 <spanclass="math inline">\(O(36n\log n)\)</span></p><hr /><p><a href="https://codeforces.com/contest/1608/problem/F">F</a></p><p>感觉好神仙。</p><p>朴素的情感，对原数列计数没有出路（因为你考虑这个对Mex记录状态的难度和对排列记录状态的难度差不多），所以直接对<spanclass="math inline">\(\text{Mex}_{i\leq k}\{a_i\}\)</span>计数。</p><p>考虑当 Mex 变化时如何转移。</p><p>若 Mex 从 <span class="math inline">\(a\)</span>,变为 <spanclass="math inline">\(b\)</span> ,那么对于当前这一位 <spanclass="math inline">\(i\)</span>，必然有 <spanclass="math inline">\(a_i=a\)</span>。（这个<spanclass="math inline">\(a_i\)</span> 是原数列）。</p><p>而且 <span class="math inline">\([a+1,b-1]\)</span>这些数必须在前面都出现过。</p><p>这样又是一个类似可重集合计数，还是比较难，所以观察 Mex性质，只需要管第一次出现的位置即可，又发现小于 <spanclass="math inline">\(a\)</span> 的位置早就没有价值了。</p><p>所以设出状态 <span class="math inline">\(f_{i,j,k}\)</span>表示添到第 <span class="math inline">\(i\)</span> 位使得 <spanclass="math inline">\(\text{Mex }=j\)</span> 并且有 <spanclass="math inline">\(k\)</span> 个数大于 <spanclass="math inline">\(j\)</span>。（这么设 <spanclass="math inline">\(k\)</span> 就相当于看有几个第一次出现）</p><p>我们<strong>现在</strong>并不关系这 <spanclass="math inline">\(k\)</span> 个到底是什么，但是我们关心除了这 <spanclass="math inline">\(k\)</span> 个数，都是什么/和这 <spanclass="math inline">\(k\)</span> 个数中的哪一个相等。</p><p>所以 Mex 从 <span class="math inline">\(a\)</span> 到 <spanclass="math inline">\(b\)</span> 的转移 (<spanclass="math inline">\(a&lt;b\)</span>) 也非常简单： <spanclass="math display">\[f(i,a,k)\to f(i+1,b,k-(b-a-1))\times k^\underline{b-a-1}\]</span> 含义是我们必须选出 <span class="math inline">\(b-a-1\)</span>个大于 <span class="math inline">\(a\)</span> 的数让他们组成 <spanclass="math inline">\([a+1,b-1]\)</span>这些数，注意是排列（后面的下降幂）。</p><p>转移数量级是 <span class="math inline">\(O(k)\)</span>的，要想办法把他变成 <span class="math inline">\(O(1)\)</span> 的。</p><p>把转移写成求和，可以发现有一维独立出来了，直接记录即可，注意一下<span class="math inline">\(a&lt;b\)</span>的限制即可，这里不是本题的重点。</p><hr /><p>剩下只需要考虑 Mex 不变的情况，这里比较simple，我们只有两种选择：</p><ol type="1"><li>添一个不是第一次出现的。</li><li>添一个第一次出现的。</li></ol><p>对应的转移大概就是： <span class="math display">\[\begin{aligned}1. f(i,a,k)&amp;\to f(i+1,a,k)\times(a+k)\\2. f(i,a,k)&amp;\to f(i+1,a,k+1)\end{aligned}\]</span>注意第二个转移没有系数的原因就是我们<strong>现在</strong>并不关心这<span class="math inline">\(k\)</span> 个数具体是什么。</p><p>综上：总状态数 <span class="math inline">\(O(n^2k)\)</span> ，转移量<span class="math inline">\(O(1)\)</span>，总复杂度 <spanclass="math inline">\(O(n^2k)\)</span></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cf1609F</title>
    <link href="/2021/12/06/cf1609F/"/>
    <url>/2021/12/06/cf1609F/</url>
    
    <content type="html"><![CDATA[<p>写这个的目的是为了记录一下一种关于单调栈的新理解方式。</p><p>单调栈存在的目的就是为了维护后缀的min/max。</p><p>一个单调增的维护的是后缀min，反之是后缀max。</p><p>如果单调栈内的元素是 <span class="math inline">\(p_1,\cdots,p_n\)</span>，可以理解成<spanclass="math inline">\((p_1,p_2],(p_2,p_3),\cdots,(p_i,p_{i+1}],\cdots\)</span>段区间。</p><p>在维护min/max的过程中，单调栈自然带有着撤回的性质，考虑我们本质上是在维护上述区间，区间覆盖可以理解为减去原先的，加上后来的。</p><hr /><p>这道题让我深层认识到了单调栈，当我只想着“区间覆盖时”，et2006大佬的博客让我醍醐灌顶呀，真的只是在撤销。</p><p><a href="https://codeforces.com/contest/1609/problem/F">link</a></p><p>这道题的思路很简单，如果真的理解了单调栈会很快做出来。</p><p>首先拆了popcount变为若干子问题。</p><p>分治感觉麻烦，直接考虑以 <span class="math inline">\(r\)</span>结尾时的答案。移动<span class="math inline">\(r\)</span>时候直接算贡献。</p><p>需要维护的只有 [min popcount = b] + [max popcount = b]。</p><p>复杂度竟然被单调栈均摊了，nbnb。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笛卡尔树，单调栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDOI2015 约数和</title>
    <link href="/2021/12/03/old-good-days-SDOI2005sumthefactor/"/>
    <url>/2021/12/03/old-good-days-SDOI2005sumthefactor/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>这里准备D死Cage.</p>          </div><p>题外话，这个题是我2019首次AC的，现在都2021年末了，我竟然又沦落到看题解的地步了。</p><hr /><p><a href="https://www.luogu.com.cn/problem/P3327">link</a></p><p>问： <span class="math display">\[\sum_{i}^n\sum_{j}^m d(i\cdot j)\]</span> 问题逃不开的就是如何解决 <span class="math inline">\(d(i\cdotj)\)</span>。</p><div class="note note-warning">            <p>Wrong Solution 1</p>          </div><p>我首先是错误的考虑了 <span class="math inline">\(d\)</span>的积性，并没有意识到 <span class="math inline">\((i,j)\not =1\)</span>时这个东西是多么难处理，这个导致我浪费了30mins。</p><p>但是，我认识到了 <span class="math inline">\(d\)</span>的积性是如此的<strong>难处理</strong>，或者说成他的积性是如此的<strong>弱</strong>。</p><hr /><div class="note note-warning">            <p>Wrong Solution 2</p>          </div><p>接下来我开始考虑能否用约数性质，很显然如果枚举约数 <spanclass="math inline">\(t\)</span> 那么枚举量就会<strong>飙升</strong>到<span class="math inline">\(nm\)</span> 级别，仍然很难处理。</p><hr /><p>尽管我也想到这个积性可不可以拆开做文章，但是讲道理因为第一次错误认识积性，我现在有<span class="math inline">\(d\)</span> 积性 ptsd。所以没想。</p><p>所以我挂了，写下了这篇<strong>总结</strong>性质的题解。</p><hr /><div class="note note-success">            <p>More Acceptable Solution 2</p>          </div><p>首先我们还是得从拆 <span class="math inline">\((i\cdot j)\)</span>考虑。</p><p>我们先硬着头皮把他当成完全积性，看会发生什么。</p><p>Compare <span class="math inline">\(d(i\cdot j)\)</span> with <spanclass="math inline">\(d(i)\cdot d(j)\)</span>。</p><p>一个很自然的感觉是我应该会算重，但是在考虑算重之前，我们想一想为什么会不算漏。</p><p>我们现在是枚举 <span class="math inline">\(i,j\)</span>的因子，然后在乘起来，我们考虑对 <span class="math inline">\(i\cdotj\)</span> 进行质因数分解。<span class="math inline">\(i\cdot j =\prodp_i^{a_i}\)</span></p><p>对于 <span class="math inline">\(i\cdot j\)</span> 的一个因子 <spanclass="math inline">\(t\)</span> ，有 <spanclass="math inline">\(t=\prod p_i^{b_i},b_i&lt;a_i\)</span>，考虑 <spanclass="math inline">\(a_i\)</span> 肯定是被分给了 <spanclass="math inline">\(i\)</span>,<spanclass="math inline">\(j\)</span>了。</p><p>所以很简单的逻辑，我们优先从 <span class="math inline">\(a\)</span>中选因子 <span class="math inline">\(p_i\)</span>，如果选光了还达不到，就在 <span class="math inline">\(b_i\)</span>选。</p><p>所以一定不会算漏，接下来考虑如何不算重。</p><hr /><p>考虑现在本质上是在钦定一个因子如何划分，为了不算重我们就应钦定一些东西。</p><p>这里比较自然的，我们想到，我要像证明”不会算漏“那样，尽可能在第一个数中选。</p><p>所以如果第一个数还能选 <span class="math inline">\(p_i\)</span>，此时却在第二个数中选，这就被认为不合法。</p><p>形式化的如果第一个数是 <span class="math inline">\(i\)</span> 选因子<span class="math inline">\(a\)</span>,第二个数 <spanclass="math inline">\(j\)</span> 选因子 <spanclass="math inline">\(b\)</span>，那么需要满足 <spanclass="math inline">\((\frac{i}{a},b)=1\)</span>。</p><hr /><p>如此，我们成功的拆开了 <span class="math inline">\(d(i\cdotj)\)</span> 。</p><p>得到了那个家喻户晓<del>臭名昭著</del> 的式子： <spanclass="math display">\[d(i\cdotj)=\sum_{a|i}\sum_{b|j}[(\frac{i}{a},b)=1]=\sum_{a|i}\sum_{b|j}[(a,b)=1]\]</span> 这个题接下来就变成傻逼题了。 <span class="math display">\[\begin{aligned}\sum_{i,j}\sum_{a|i}\sum_{b|j}\gcd(a,b)=1\\\sum_{a,b}\sum_{a|i}\sum_{b|j}\gcd(a,b)=1\\\sum_{a,b}[\gcd(a,b)=1]\lfloor\frac{n}{a}\rfloor\lfloor\frac{m}{b}\rfloor\\\sum_d\mu(d)\sum_{d|a,d|b}\lfloor\frac{n}{a}\rfloor\lfloor\frac{m}{b}\rfloor\\\end{aligned}\]</span> 如何快速求： <span class="math display">\[\sum_{a=1}^{n/d}\lfloor\frac{n}{da}\rfloor\]</span></p><p><span class="math display">\[\sum_{a=1}^{n/d}\lfloor\frac{n}{da}\rfloor=\sum_{a=1}^{n/d}\lfloor\frac{\frac{n}{d}}{a}\rfloor\]</span></p><p>合理发现这个东西是个关于 <span class="math inline">\(n/d\)</span>的函数，直接 sqrt预处理即可。</p><p>done.</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mu反演</tag>
      
      <tag>怀旧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>edu118</title>
    <link href="/2021/12/02/cf-round-edu118/"/>
    <url>/2021/12/02/cf-round-edu118/</url>
    
    <content type="html"><![CDATA[<p>讲道理这场我的体验是挺魔幻的。</p><span id="more"></span><p>讲道理这应该是个简单场，然后被我玩出了4切，哈哈哈哈，不愧是我这个SB.</p><p>A写了能有5min我直接大受震撼。</p><p>B,C无感，写的慢是我SB。</p><p>D开到的时候你告诉我就6,7个人对？？此时 DEF 都只有6,7个人对。。。</p><p>然后发现这不SB dp?但是调了好久好久，伞兵样例 * 1</p><p>E开到时候也就100-人对？？？</p><p>然后一眼，这部伞兵bfs???但是调了好久，伞兵样例 * 2</p><p>F最后剩20min，看DX 7min切了，以为是性质题，，，</p><p>想了个容斥dp(<spanclass="math inline">\(\mathcal{O(n^2)}\)</span>)。</p><p>然后写了一遍，，就，，就过样例了？？？？？？交一法直接跑到了 pretest13。。。。挺魔幻的，要是DE也这样就好了。。。</p><p>开始狂想性质，能不能根号。。然后卒。。。</p><hr /><p>最后 D因为 <span class="math inline">\(ret-1\)</span> 没有取模导致<code>expected 998244352</code>,<code>Output -1</code>惨案。</p><p>F发现dp了个寂寞，树上合并了个寂寞，都是生成函数直接乘法，我直呼自己SB，并且心中对那些粘板子的直接开骂。</p><hr /><p>挺魔幻的把，应该因为昨天太困了。。。。。</p><p><a href="https://codeforces.com/contest/1613">Link</a></p><p><a href="https://codeforces.com/contest/1613/problem/A">A</a></p><p>一个比较简短的做法就是，我们先把他们后面公共的0减去，然后看剩下那个<spanclass="math inline">\(10^k\)</span> 的 <spanclass="math inline">\(k\)</span> 是不是小于6,如果是暴力，如果不是肯定是乘上了大。</p><p><a href="https://codeforces.com/contest/1613/problem/B">B</a></p><p>这题铁伞兵。</p><p>给你<strong>互不相同</strong>的 <spanclass="math inline">\(n\)</span> 个数，让你找出 n/2 个<strong>互不相同</strong> 满足 <span class="math inline">\(x\in S,y\inS,x\bmod y \not \in S\)</span>。</p><p>直接sort，然后输出 <span class="math inline">\(a_i\ \ \ a_1\)</span>原因显然。</p><p><a href="https://codeforces.com/contest/1613/problem/C">C</a></p><p>直接binary serach 即可。。。。细节没啥。。。</p><p><a href="https://codeforces.com/contest/1613/problem/A">D</a></p><p>被伞兵榜吓到了。。。。。</p><p>考虑 SG(a) = x，这个a还合法的情况只有俩。</p><ol type="1"><li><span class="math inline">\([1,x-1]+\{x+1\}\)</span></li><li><span class="math inline">\([1,x-1]\)</span></li></ol><p>然后直接套路转移 <span class="math inline">\(f(x)\)</span>表示前面选的子序列使得SG=x的方案数。</p><p>注意 case 1是转移不了了，他就憋死了。</p><p>所以开俩dp数组，有点细节需要考虑。</p><h1 id="取模一定要取干净">取模一定要取干净！</h1><hr /><p><a href="https://codeforces.com/contest/1613/problem/E">E</a></p><p>这题更是纯傻逼。</p><p>考虑最终状态，其实是个方程，如果 <spanclass="math inline">\((i,j)\)</span>能一步到达的地方最多有一个不能迫使他回去，那 <spanclass="math inline">\((i,j)\)</span> 就能被迫使回去。。</p><p>然后，然后你发现这个直接bfs是，是对的。。。。。。</p><p>草了。</p><hr /><p><a href="https://codeforces.com/contest/1613/problem/F">F</a></p><p>这个真说难度应该就是个 Easy+ 的。。。</p><p>首先，应该不难有容斥的想法。</p><p>然后发现我擦，这容斥了个马呀，现在就算容斥所形成的连通块连上了也屁事没有。</p><p>所以不难想到这个其实本质上就是要你对每一个 <spanclass="math inline">\(i\leq n\)</span> 算随便选 <spanclass="math inline">\(i\)</span> 个点，不存在俩有一个爹的方案数。</p><p>所以一个比较愚笨的dp出来了，（你要用dp std就直接对你进行一个对SB的辱骂） <span class="math display">\[f_x(i)=\sum_{j\leq i} f_y(j)f_x(i-j)\]</span> 很经典的树dp合并，然后最后你要 <spanclass="math inline">\(f_x(i)=f_x(i)+f_x(i-1)\)</span>因为你只可以在这个点连一条边，哈哈。</p><p>然后你发现woc，这他马不就是: <span class="math display">\[F_x=\prod_{x\rightarrow y} F_y\times(1+\text{son}\cdot x)\]</span> 你会发现你dp了个寂寞，你只想要根的答案，所以根的答案就是 <spanclass="math inline">\(\prod(1+\text{son}\cdot x)\)</span>。</p><p>然后，然后暴力卷，分治着卷，卷死他们！！！！！！</p>]]></content>
    
    
    <categories>
      
      <category>whole round</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>arc096C | Everything on it</title>
    <link href="/2021/12/02/arc096C/"/>
    <url>/2021/12/02/arc096C/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://atcoder.jp/contests/arc096/tasks/arc096_c">link</a></p><p>不解释题意。</p><span id="more"></span><hr /><p>我肯定是作麻烦了，我冷静一下。。</p><p>这题花了我一个下午。。。</p><p>好你马气人。</p><p>把限制列出来 ：</p><ol type="1"><li>任意两个子集互不相同</li><li>1,2,3...n 每个至少出现2次。</li></ol><p>容斥是很朴素的想法，考虑第一个不好容斥，第二个相对更好容斥。</p><p>我们现在转化成 钦定 <span class="math inline">\(j\)</span>个地方出现次数少于 <span class="math inline">\(1\)</span>。</p><p>可以写出下面这个式子，我会解释每一项的含义。 <spanclass="math display">\[\sum_{j\ge 0}(-1)^j\binom{n}{j}\sum_{k=0}^{j}\sum_{t=0}^{k}\binom{j}{k}\begin{Bmatrix}k\\t\end{Bmatrix}2^{2^{n-j}}\times(2^{n-j})^t\]</span></p><ol type="1"><li><p>首先 <span class="math inline">\(j\)</span>是钦定少于1次的位置个数。</p></li><li><p><span class="math inline">\(\binom{n}{j}\)</span> 代表从 <spanclass="math inline">\(n\)</span> 个中选 <spanclass="math inline">\(j\)</span> 个作为钦定的。</p></li><li><p>k枚举的是恰好使用1个的被钦定的位置。</p></li><li><p>t枚举的是有多少个集合使用这k个位置。</p></li><li><p><span class="math inline">\(\binom{j}{k}\)</span>含义是得从钦定的 <span class="math inline">\(j\)</span> 个选出使用的<span class="math inline">\(k\)</span> 个。</p></li><li><p><spanclass="math inline">\(\begin{Bmatrix}k\\t\end{Bmatrix}\)</span>含义是把这 <span class="math inline">\(k\)</span> 个位置无序划分给这<span class="math inline">\(t\)</span> 个集合。</p><p>到此，我们已经成功的把钦定位置的集合关系确定好了。</p></li><li><p><span class="math inline">\(2^{2^{n-j}}\)</span>代表剩下没有钦定的位置能组成 <spanclass="math inline">\(2^{n-j}\)</span>个不同集合，每个集合都可以选。</p></li><li><p><span class="math inline">\((2^{n-j})^t\)</span> 含义是我们给这<span class="math inline">\(t\)</span>个无序集合，定下来他们在非钦定位置中集合关系。这样不会产生重复的集合。因为你的斯特林数是划分成非空集合。</p></li></ol><p>这样我们这道题就做完 90%了。</p><p>我的做法十分无脑，我把斯特林数拆开了。。。。。</p><p>正确的处理方法是用组合意义把这样一个东西 <spanclass="math display">\[\sum_{k=0}^{j}\binom{j}{k}\begin{Bmatrix}k\\t\end{Bmatrix}=\begin{Bmatrix}j+1\\t+1\end{Bmatrix}\]</span> 这个考虑放一个垃圾桶专门收空元素。这个真不会硬推了,kk</p>]]></content>
    
    
    <categories>
      
      <category>math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IN-EX principle</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有关 Dilworth 定理的简单证明</title>
    <link href="/2021/12/01/partital-set-simple-thoughts/"/>
    <url>/2021/12/01/partital-set-simple-thoughts/</url>
    
    <content type="html"><![CDATA[<p>本文大量参考了<ahref="https://blog.csdn.net/weixin_45313881/article/details/103514639">这篇</a>博客，如果您是这篇博客的主人，认为我这么“转载”不妥，请联系我删除我这篇博客。</p><p>由于我现在是一名高中生，可能下面的表述不是十分严谨，如果您想看一片比较严谨的证明可以去<a href="https://en.wikipedia.org/wiki/Dilworth%27s_theorem">wiki</a>查看</p><hr /><h3 id="part-1-定理内容">part 1 定理内容</h3><p>Dilworth 定理 (Dilworth's theorem) 主要说明了覆盖一个 dag最少需要的不交的链的<strong>条数</strong>等于最长的反链长度。</p><p>此处的覆盖指的是点覆盖。</p><ul><li>反链指的是选取一个集合 <span class="math inline">\(S\)</span>，<span class="math inline">\(S\)</span>中任意两个点不可互达，如图所示，点 1,2,3 构成了一个反链集合 <imgsrc="/img/11-27-01.png" alt="img" /></li></ul><p>注意这里的链、反链的定义没有要求是<strong>连续的</strong>,在此图中我们仍可以选择类似{1,4},{3},{2,5} 这三条链的集合来覆盖这个图上的<strong>点</strong>。</p><hr /><h3 id="part-2-证明">part 2 证明</h3><p>我们考虑如何描述一个链划分。</p><p>建出二分图 <spanclass="math inline">\((U,V,E)\)</span>。对于一个dag到达关系，即偏序关系<span class="math inline">\((x,y)\)</span>,<spanclass="math inline">\(x\prec y\)</span>，我们从 <spanclass="math inline">\(U\)</span> 的 <spanclass="math inline">\(x\)</span> 点，向 <spanclass="math inline">\(V\)</span> 的 <spanclass="math inline">\(y\)</span> 点连一条边。</p><p>现在大抵的思想是先把 <span class="math inline">\(|U|=|V|\)</span>个散点拿出，然后根据偏序关系连边。</p><p>这样可以观察出由于一个点只能在一个链中，所以可以想到合并两条相接的链可以看作在二分图上匹配。</p><p>对于一个匹配,<span class="math inline">\(M\)</span>,如果 <spanclass="math inline">\(x\)</span> 是匹配点，记 <spanclass="math inline">\(p_x\)</span> 是 <spanclass="math inline">\(x\)</span> 的另一个匹配点。</p><p>我们考虑沿着某个没有匹配的 <span class="math inline">\(x\inV\)</span> 开始，接下来跳转到 <span class="math inline">\(y=x\inU\)</span> ，即当前编号为 <span class="math inline">\(x\)</span>在左边集合即 <span class="math inline">\(U\)</span> 的点。</p><p>如果当前点可以匹配到 <span class="math inline">\(p_x\)</span>那么接着匹配，此时我们在这个链集合加入了边 <spanclass="math inline">\(x\rightarrow p_x\)</span>。</p><p>考虑由于偏序关系，不可能产生环，所以以一个点开始的匹配关系，在原图一定可以与一条链一一对应。</p><p>考虑我们希望最小化链的个数，也就是最大化链中的边的个数，所以我们希望最大化匹配的个数。</p><p>所以最小链覆盖的个数是 <span class="math inline">\(\text{min chaincover = }|V|-|M|\)</span>,<span class="math inline">\(M\)</span>为构建出的二分图的一个最大匹配。</p><hr /><p>接下来我们考虑最小链覆盖 <span class="math inline">\(C\)</span>一定大于等于最长反链长度。</p><p>考虑反证法，如果 <span class="math inline">\(|C|&lt;|L|\)</span>,同时 <span class="math inline">\(L\)</span> 中元素在 <spanclass="math inline">\(|C|\)</span>必然属于两两不同的链，显然这样不可能。</p><p><span class="math inline">\(|L|\leq |C|\)</span>。</p><p>考虑 <span class="math inline">\(L\)</span> 的下界，我们期望 <spanclass="math inline">\(L\)</span>尽可能大，这个上界可以达到，另外我们知道 最大匹配 =最小点覆盖，所以对于一个 <spanclass="math inline">\(M\)</span>，我们构造出对应的点覆盖，然后我们选取不在 点覆盖中的点，这个下界是 <span class="math inline">\(n-|M|\)</span>，因为可能有的点即在左面又在右面。。。</p><p>直接确定答案。</p><hr /><p>个人感觉这个东西的难度很大，或者说我个人认为这个定理十分美丽。</p><p>感觉有人就是看了个结论，或者，只是看了代码很短就写这个。。。很是没意思讲道理。。。</p><p>并且我觉得你知道是反链后，dp也不是第一次看就能看出来的，，也没有那么显然吧。</p><p>给出一个例题吧。（模板题。。。）</p><p><ahref="https://www.luogu.com.cn/problem/P3974">TJOI2015组合数学</a></p><p>大概就是把权值拆成点，由于自然形成 dag，直接把问题转换最长反链。</p><p>由于顺序是二维偏序，最终的反链形状就是下图这样。</p><figure><img src="\img\2021-12-01-01.png" alt="img1" /><figcaption aria-hidden="true">img1</figcaption></figure><p>而我们选一个点本质上是在给两个矩形区域涂黑。然后别的点只能在白色位置选。</p><figure><img src="\img\2021-12-01-02.png" alt="img2" /><figcaption aria-hidden="true">img2</figcaption></figure><p>两边不好考虑，只做一边，另一边作为转移顺序。</p><p>记 <span class="math inline">\(f_{i,j}\)</span> 表示选点 <spanclass="math inline">\((i,j)\)</span> 在右下角产生的最长反链长度。</p><p>发现本质上是枚举每次转移点，所以维护矩形 Max 即可。</p><p>常见的，不知所云的 dp 都是把这个 f 含义转换成矩形 Max 的。</p><p>我不太相信<strong>很多人</strong>多能直接感受到这个dp是在矩形 Max，就像我不相信<strong>很多人</strong>能直接感受到完全背包本质上是在压缩转移路径一样。</p><p>may be done.</p><hr /><h3id="失败的cf出题经历与一道模拟赛题">失败的cf出题经历与一道模拟赛题。</h3><p>给出数 <span class="math inline">\(n\)</span> 你要求出在 <spanclass="math inline">\(n\)</span> 因子这个整除空间中最长反链。</p><p>首先不难发现一种构造就是把 质因子个数和(<spanclass="math inline">\(d=\prod{p_i^{a_i}},\deg(d)=\sum{a_i}\)</span>)相等的一组 作为反链。</p><p>互不能到达显然了。</p><p>可能只是题解的一个解说，题解要证明 <spanclass="math inline">\(n\)</span>的因子一定可以分解成若干个不交的对称因子链。</p><p>对称因子链：<spanclass="math inline">\(d_1,d_2,\cdots,d_h\)</span>，满足 <spanclass="math inline">\(\deg(d_1)+\deg(d_h)=\deg(n),d_i=d_{i-1}\timesp\)</span></p><p>使用归纳法证明。</p><p>设 <span class="math inline">\(n=m\times p^\lambda\)</span>。</p><p>所以假设 <span class="math inline">\(m\)</span> 可以分解了，对于一条<span class="math inline">\(m\)</span> 的对称因子链,<spanclass="math inline">\(d_1,d_2\cdots ,d_h\)</span>。</p><p>我们打算将这 <span class="math inline">\(h\)</span> 个数“扩容”因子<span class="math inline">\(p\)</span>。</p><p>构造 <spanclass="math inline">\(d_1,d_1p,d_1p^2,\cdots,d_1p^\lambda,d_2p^\lambda,\cdotsd_hp^\lambda\)</span>.</p><p><span class="math inline">\(d_2,\cdotsd_2p^{\lambda-1},d_hp^{\lambda-1}\)</span></p><p><span class="math inline">\(\cdots\)</span>.</p><p>如果将 <span class="math inline">\(\deg(d_i)\)</span> 和 <spanclass="math inline">\(p\)</span>的次数，各看成一维，那么构造情况如下图。</p><figure><img src="\img\2022-04-21-1.png" alt="img1" /><figcaption aria-hidden="true">img1</figcaption></figure><p>（实际上，由于 <span class="math inline">\(h\)</span> 可能不等于<span class="math inline">\(\lambda\)</span>所以可能是长方形，最里层的那个可能是 <spanclass="math inline">\(d_i,d_{i+1},\cdots d_h\)</span>。）</p><p>此时我们给出了一种构造方案。注意对称因子链使得每条链都经过 <spanclass="math inline">\(\deg(n)/2\)</span> ，所以此时链的个数是 <spanclass="math inline">\(\deg(x)=\deg(n)/2\)</span> 的个数。</p><p>考虑 dilworth 的含义是反链长度小于等于任意链覆盖个数。</p><p>只要能够取等，那么该反链就是<strong>最长反链</strong>，该链覆盖就是<strong>最小链覆盖</strong>。</p><p>而恰好，开头说了这个可以构造出，互不整除的结构。</p><p>所以成立。</p><p>得出结论一种合法的最长反链构造就是 <spanclass="math inline">\(\deg(x)=\deg(n)/2\)</span> 的全体 <spanclass="math inline">\(x\)</span> 。</p><p>试看看，构造的结论是什么？</p><p>当然是 <spanclass="math inline">\(\deg(x)=\frac{n+n+n}{2}\)</span>，所以ban掉了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARC120 - partial solution</title>
    <link href="/2021/11/29/Arc120-partial-solution/"/>
    <url>/2021/11/29/Arc120-partial-solution/</url>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/arc130">Link</a></p><p>打的不是十分满意。所以写一个全场总结。</p><hr /><p><a href="https://atcoder.jp/contests/arc130/tasks/arc130_a">A</a></p><p>题意：给出串 <span class="math inline">\(S\)</span>，定义 <spanclass="math inline">\({S}_i={S}[0,i-1]+{S}[i+1,n]\)</span> 让你求出<span class="math inline">\({S}_i={S}_j\)</span> 的 <spanclass="math inline">\((i,j)\)</span> 个数。</p><p>挺显然的在比较 <span class="math inline">\(i,j\)</span> 时，lcp,lcs可以直接忽略掉。</p><p>就考虑中间一段，发现这个是长度为 <spanclass="math inline">\(n-1\)</span> 的 border，显然 period 是 <spanclass="math inline">\(1\)</span>，也就全相等。</p><p>问题转化为有多少对 <span class="math inline">\((i,j)\)</span> <spanclass="math inline">\(S(i)～S(j)\)</span> 全相等，简单计数。</p><p>我竟然没看出来 period = 1,写的二分哈希，我是SB。</p><hr /><p><a href="https://atcoder.jp/contests/arc130/tasks/arc130_b">B</a></p><p>题意：每次给一行/一列染色成 C，最后问每一种颜色出现几次。</p><p>其实挺显然的，如果先染 <span class="math inline">\(x\)</span> 列为c，接下来在把 <span class="math inline">\(x\)</span>列染成别的，这样相当于没有给他染成c，所以这么算出来每一行/列，最后一次被染色的时间，颜色。</p><p>遮掩显然了，染一列肯定能给一行带来 -1 的贡献，不管什么颜色。</p><p>简单算即可。</p><p>写麻烦了。。。。。。。</p><hr /><p><a href="https://atcoder.jp/contests/arc130/tasks/arc130_c">C</a></p><p>挺无聊的题目。。。。</p><p>大概就是让你将两个数位上不含 <span class="math inline">\(0\)</span>的正整数重新排列数位，使得 <span class="math inline">\(A+B\)</span>的数位的数字和最小。</p><p>显然让进位尽可能多，显然我们让进位的那些连起来不劣于不连起来，显然只要不是进位最低位，我破门只需要让<span class="math inline">\(a_i+b_i\ge 9\)</span> 即可。</p><p>贪心选数对 <span class="math inline">\(\ge 9\)</span>，大概就是让<span class="math inline">\(a_i+b_i\ge 9\)</span> 同时最小化 <spanclass="math inline">\(b_i\)</span>。这样可以说明如果只能用更小的 <spanclass="math inline">\(a_i\)</span> 那么不会更优，因为当前的 <spanclass="math inline">\(a_i\)</span> 被浪费了。</p><p>然后枚举 <span class="math inline">\(\ge 10\)</span>的最低位。。。。。完了。</p><p>我也不知道自己赛时写的有什么问题。。。。。</p><p>挺无聊的。。。。。。。。。。。。。。。。。</p><hr /><p><a href="https://atcoder.jp/contests/arc130/tasks/arc130_d">D</a></p><p>这个题还好。</p><p>题意：给定一棵树，让你给设定一个排列，<spanclass="math inline">\(p_i\)</span> 就是点 <spanclass="math inline">\(i\)</span> 的权值，使得对于任意两对点 <spanclass="math inline">\((x,y),(x,z)\)</span> 满足 <spanclass="math inline">\(p_x&lt;p_y \text{ and } p_x&lt;p_z\)</span> 或者<span class="math inline">\(p_x&gt;p_y\text{ and }p_x&gt;p_z\)</span>。</p><p>在 C 没调完时看了这个题。却卡在了最后一步组合合并上，真是个傻瓜。</p><p>一般人最先想的应该就是树dp，而不是什么容斥奇奇怪怪的，我也不知道能不能做的东西。</p><p>朴素的情感，排列很难计数，原因，并不知道那些出现过，如没有特殊性质，应该只有bitmask能较好处理。</p><p>可以大抵发现，这个题一个子树内部的状态只有最上的点有关条件。</p><p>可以看作自树独立，那么我们只不过在给子树 <spanclass="math inline">\(x\)</span> 的 <spanclass="math inline">\(p:[1,sz_x]\)</span> 重新在 <spanclass="math inline">\(P:[1,sz_{fa}]\)</span>中选择排列，显然相对大小不变。</p><p>根据 <span class="math inline">\(3000\)</span> 的数据范围，谁都能猜到<span class="math inline">\(f_{x}(i)\)</span> 表示的是 <spanclass="math inline">\(x\)</span> 子树，且 <spanclass="math inline">\(x\)</span> 是第 <spanclass="math inline">\(i\)</span> 大的。</p><p>想一想，树dp用子树排列理解定然是较难的，我们还是应该那合并子树理解。</p><p>现在大概就算要考虑以下 <spanclass="math inline">\(f_x(i),f_y(j)\)</span> 合并会产生什么贡献。</p><p>有两种情况 <span class="math inline">\(p_x&gt;p_y\)</span>,<spanclass="math inline">\(p_x&lt;p_y\)</span>，对称只管一边。</p><p><span class="math inline">\([1,2,\cdots,i,i+1,\cdotssz_x]\)</span>，与 <span class="math inline">\([1,2,\cdots j,\cdotssz_y]\)</span> 归并。</p><p>在枚举 <span class="math inline">\(i\)</span> 前面有几个 <spanclass="math inline">\(y\)</span> 集合的。</p><p>设其为 <span class="math inline">\(k\)</span>,那么对于 <spanclass="math inline">\(F(k+i)\)</span> 贡献即为 <spanclass="math inline">\(\binom{k+i-1}{i-1}\times\binom{sz_x+sz_y-(k+i)}{sz_x-i}\)</span>。</p><p>前缀和优化即可。</p><p>复杂度很经典的 <span class="math inline">\(\mathcal{O(n^2)}\)</span>注意以下合并时候的边界。</p><hr /><p><a href="https://atcoder.jp/contests/arc130/tasks/arc130_e">E</a>现在毫无思路咕咕咕。</p><hr /><p><a href="https://atcoder.jp/contests/arc130/tasks/arc130_f">F</a></p><p>这个题我竟然能想到？？虽然是赛后想了好半天。。</p><p>首先，对于一个上凸的区间来说，加入我们都不取整，那么应该比较自然的能看出来那一段应该是一段直线。（一股琴生味？）</p><p>考虑四个点，如果 <span class="math inline">\(x,y,z,w\)</span>在一个上凸壳上。</p><p>一直操作 <span class="math inline">\(y,z\)</span>两个点，那会让这个凸壳越来越不凸，最终变成一条直线。</p><p>如图所示。</p><figure><img src="\img\2021-11-29-01.png" alt="img1" /><figcaption aria-hidden="true">img1</figcaption></figure><p>这里说的上凸指斜率单调减，下凸反之，斜率单调增。</p><p>到此我们我们能使一段上凸的区间变成直线，考虑对于任意一个不下凸的函数，那么一定可以找到一段上凸的。</p><p>那么考虑，我们每次将一个上凸的变成直线，这似乎就是在求下凸壳。</p><hr /><p>既然不取整的是凸壳，那么考虑下取整会让这个直线变成什么。</p><p>不难发现，就算下取整也不能让斜率不单调。</p><figure><img src="\img\2021-11-29-02.png" alt="img2" /><figcaption aria-hidden="true">img2</figcaption></figure><p>如图，如果中间那个是不取整的直线，我们不可能让他变成上面的黑色折线，而应该变成下面的紫色的折线。</p><p>所以就算是取整，一段本应该是直线的区间，也最多被分成两段折线。</p><figure><img src="\img\2021-11-29-03.png" alt="img3" /><figcaption aria-hidden="true">img3</figcaption></figure><hr /><p>显然两段斜率分别为 <span class="math inline">\(\lceilk\rceil\)</span>，<span class="math inline">\(\lfloor k\rfloor\)</span>。</p><p>所以本质上我们希望两段原先的直线，现在的折线能接上必然要求 <spanclass="math inline">\(\lfloor k_1\rfloor\)</span> 严格小于 <spanclass="math inline">\(\lfloor k_2\rfloor\)</span>。</p><p>所以按照凸包那么下取整斜率求一求，就好了。</p><p>那么显然我们有也能知道两端斜率分别有几个点，所以暴力求一求就好了。</p><p>感觉挺有意思的，难度不知道是不是有点虚高，都虚高到了 Cu 题了。</p>]]></content>
    
    
    <categories>
      
      <category>whole round</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cf1606F</title>
    <link href="/2021/11/16/cf1606F/"/>
    <url>/2021/11/16/cf1606F/</url>
    
    <content type="html"><![CDATA[<p>题意</p><p><a href="https://codeforces.com/contest/1606/problem/F">Link</a></p><hr /><ol type="1"><li>考虑询问 <span class="math inline">\((x,k)\)</span> 等价于以 <spanclass="math inline">\(u\)</span> 为根，每个点 <spanclass="math inline">\(v\)</span> 权值 <spanclass="math inline">\(\mathrm{child}(v)-k-1\)</span>，找出 <spanclass="math inline">\(u\)</span> 所在的连通块，权值最大的。</li><li>如果固定 <span class="math inline">\(k\)</span> 有很 simple 的dp。</li><li>考虑我们必定以权值为正的结尾，所以考虑建出权值 &gt;=0的虚树，其中虚树大小是 <spanclass="math inline">\(\mathcal{O(n)}\)</span> 级别。 考虑 <spanclass="math inline">\(\mathrm{val}(x)=\mathrm{child}(x)-k-1\geq0\)</span>。 <span class="math inline">\(k\leq\mathrm{child}-1\)</span>，这样 <spanclass="math inline">\(\sum_k{\mathrm{val}(k)\geq0}=\mathcal{O(E)}=\mathcal{O(n)}\)</span></li><li>这样dp便很显然了。</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0,1随机变量k小值期望</title>
    <link href="/2021/11/12/random-kth-simple-thoughts/"/>
    <url>/2021/11/12/random-kth-simple-thoughts/</url>
    
    <content type="html"><![CDATA[<p>[0,1]随机变量的k小值期望。</p><p>答案： <span class="math inline">\(\frac{k}{n+1}\)</span></p><p><ahref="https://www.cnblogs.com/ET2006/p/kth-expected-value-gamma-beta.html">ET2006大佬大力积分</a></p><p><ahref="https://www.cnblogs.com/penth/p/9743303.html">不认识的大佬的大力积分</a></p><p><ahref="https://www.cnblogs.com/totorato/p/10219713.html">不认识的大佬的组合理解</a></p><p>我学到了什么？</p><h3 id="分步积分">分步积分</h3><p>对不起我不懂微积分，写的<strong>一定</strong>不严谨。</p><p><span class="math display">\[\begin{aligned}(f(x)g(x))&#39;=f(x)&#39;g(x)+f(x)g(x)&#39;\\f(x)&#39;g(x)=(f(x)g(x))&#39;-f(x)g(x)&#39;\\\int_{a}^{b} f(x)g(x)&#39;\text{d}x=\int_{a}^{b}(f(x)g(x))&#39;\text{d}x - \int_{a}^{b} f(x)&#39;g(x)\text{d}x\\\end{aligned}\]</span></p><p>更换一下符号。</p><p><span class="math display">\[\begin{aligned}\int_{a}^{b} f(x)g(x)\text{d}x=f(x)\int g(x)\mid_{a}^{b} - \int_{a}^{b}[f&#39;(x)\int g(x)]\text{d}x\\\end{aligned}\]</span></p><p>我还是不会<span class="math inline">\(\Gamma,\Beta\)</span>函数，对不起对不起，</p><hr /><h3 id="组合方法">组合方法</h3><p>添加一个指示变量 <span class="math inline">\(v_{n+1}\)</span> 那么k-th 期望可以看成 <span class="math inline">\(v_{n+1}\)</span> 比 k-th小的概率。</p><p>大于概率是 <span class="math inline">\(1-v_k\)</span> , 小于概率是<span class="math inline">\(v_k\)</span>。合理。</p><p>问题被转化，考虑如果我们定出来一个序的话，剩下的无序的东西就全部等价了。</p><p>那么最后一个前面没有有 k 个数的排列数显然是 <spanclass="math inline">\(n!\cdot k\)</span> ，而全部的排列数也显然是 <spanclass="math inline">\((n+1)!\)</span>,概率显然是 <spanclass="math inline">\(\frac{k}{n+1}\)</span>。</p><p>格外需要注意，我们本质上是把一个连续问题转换为离散的，这个是等价的显然。</p><p>然后单独考虑离散的也一定是正确的。</p><p>合理。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AGC052 - partly solution</title>
    <link href="/2021/11/03/AGC052-partly/"/>
    <url>/2021/11/03/AGC052-partly/</url>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/agc055">Link</a></p><p>暂时只会了ABC（这就是similar to ABC 吗？）</p><hr /><p><a href="https://atcoder.jp/contests/agc055/tasks/agc055_a">A</a></p><div class="note note-warning">            <p>题目无关的。</p>          </div><p>本来想写的是『简单题，考场傻逼』了。</p><p>但想想，我真的能在不看题解时想到吗？</p><p>这真的不好说，在我看题解的那一瞬间，"我能想到"，和"我想不到"两个不确定的状态会瞬间坍塌成"我曾经想不到"这一个状态，时间不会回溯，没看过题解的我也不复存在......</p><div class="note note-primary">            <p>solution</p>          </div><p>这个题解写的很简单，主要说一下为什么下界是 5。</p><p>分成 3 块，<spanclass="math inline">\([1,n],[n+1,2n],[2n+1,3n]\)</span>。</p><p>ABC每一个数必须在不同的块中取。</p><p>和IOI2021 D1T1 的结论类似，只要满足 <spanclass="math inline">\(v_A,v_B,v_C=n\)</span> 那么一定有匹配，使得匹配数<span class="math inline">\(\leq 5\)</span>。</p><p>其次只要每次取，得到的局面一定是更优的，所以一次取最多的一定不劣，正确性显然。</p><p>为什么有 <span class="math inline">\(\leq 5\)</span> 的匹配数？</p><p>考虑显然匹配数 <span class="math inline">\(\leq6\)</span>，现在考虑取一个 <span class="math inline">\(ABC\)</span>，一定是有一块内的 A/B/C 被取光那么对应的轮换肯定取不了所以上界是 5.</p><hr /><p><a href="">B</a></p><p>waiting</p><hr /><p><a href="https://atcoder.jp/contests/agc055/tasks/agc055_c">C</a></p><p>感觉还是挺好玩的。</p><p>大概正式AGC时想到了 70% 左右。</p><p>我没大看懂Anton的题解,说一下我的心路历程？</p><hr /><div class="note note-primary">            <p>solution</p>          </div><p>首先发现如果当前 LIS 长度是 <spanclass="math inline">\(lis\)</span>，那么显然 <spanclass="math inline">\(A\)</span> 的值域是 <spanclass="math inline">\([lis-1,lis]\)</span>。</p><p>当然也可能是单点，这个特殊考虑（只要考虑了就问题不大）。</p><hr /><ul><li><p>如果某点 k 在 P 的 LIS 上且是必选的，那么他一定满足 <spanclass="math inline">\(A_k=lis-1\)</span> 的，我们叫它 1 类点。</p></li><li><p>否则有两种情况：这个点在一条我们钦定的 P 的 LIS 上，我们叫他 2类点；或者他压根不再钦定的 LIS 上，我们叫他 3 类点。这两种情况都是 <spanclass="math inline">\(A_k=lis\)</span>。</p></li></ul><p><strong>Q</strong>: 感觉似乎就是钦定 1 类点即可？</p><p><strong>A</strong> :大概是； 我们确实确定出 lis + 0/-1了，但是不完全，现仍需考虑2类点贡献，他们给 <spanclass="math inline">\(lis\)</span> 的值加上了贡献，使 <spanclass="math inline">\(lis\)</span> 变长。</p><hr /><p>考虑 2 类点 k 什么时候能出现，肯定是他前后也有满足 <spanclass="math inline">\(\text{pre}_{k}\leq p\leq\text{nxt}_k\)</span>。</p><p>前后不好考虑，所以钦定选最靠前的 LIS，那么现在只需要考虑每个 k到其后继的点中是否有满足 <span class="math inline">\(\text{pre}_k\leqx\)</span> 的即可。</p><p>如果有，k 就是 2 类点，否则就是 1 类点。</p><p>也就是说 2 类点 k后面必然跟着一个点；这个限制其实很松，具体来说我们可以认为在确定出 1类点后只要 k 和 k 后面第一个一类点间有空位就可以当 2 类点。</p><hr /><p>写的可能有点杂，梳理一下，我们把问题转化为什么了？</p><ul><li><p>给定空位 n,最长长度m,你可以把点染成1，2两种颜色，要求2类点必须两个两个在一起，问多少种<strong>不同</strong>染色方式。</p></li><li><p>注意 <strong>不同</strong> 的定义是 1 类点位置不同<strong>或者</strong> 2 类点 + 1 类点个数不同。</p></li></ul><p>枚举1，2类点各选几个后，这个 dp其实比较显然了，但是我通过一些优化只能做到 <spanclass="math inline">\(\mathcal{O(n^3)}\)</span> 比较不行。。。</p><p>考虑这个 2 类点“绑定”限制本质是：两个点之间的空位如果是偶数那么没关系，如果是奇数那么就只能-1（减去1）..</p><p>设枚举的是有 <span class="math inline">\(a\)</span> 个 1 类点，<spanclass="math inline">\(b\)</span> 个 2类点。</p><ul><li>相当于我们有 <span class="math inline">\(a+1\)</span> 个空位，我们枚举特殊的奇数个数，然后把他们选出了，他们并不会产生贡献。</li><li>接下来把 2 类点随意插入，相当于把 <spanclass="math inline">\(left\)</span> 拆成 <spanclass="math inline">\(a+1\)</span> 个 <strong>非负</strong> 整数。</li><li>如此我们顺理成章的确定了 1 类点位置。</li></ul><p>答案即为 <spanclass="math inline">\(\binom{a+1}{odd}\times\binom{left+a}{a}\)</span></p><p>还是挺有意思的，是吧。</p><p>UBUNTU 20.04 输入法是傻逼，一堆错字！！！</p>]]></content>
    
    
    <categories>
      
      <category>whole round</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>codeforces round 750 [div2]</title>
    <link href="/2021/10/25/cf-round750-div2/"/>
    <url>/2021/10/25/cf-round750-div2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1582">Link</a></p><hr /><p><a href="https://codeforces.com/contest/1582/problem/A">A</a></p><p><span class="math inline">\(a,b,c \bmod 10\)</span> 然后暴力。</p><p>注意如果 <span class="math inline">\(a,b,c\geq 10\)</span>那么模完还要加上10。</p><p>10只不过是一个大偶数。</p><hr /><p><a href="https://codeforces.com/contest/1582/problem/B">B</a></p><p>暴力看 <span class="math inline">\(0,1\)</span> 个数。</p><hr /><p><a href="https://codeforces.com/contest/1582/problem/C">C</a></p><p>枚举删什么字符，然后看是否回文，回文就在两个之间添加该字符。</p><hr /><p><a href="https://codeforces.com/contest/1582/problem/D">D</a></p><p>构造 <span class="math inline">\(b,s.t. \sum a_ib_i=0\)</span>。</p><p>两两配对 <spanclass="math inline">\(b_i=a_{i+1},b_{i+1}=-a_{i}\)</span> 即可。</p><p>考虑如果奇数的话也就差一个没有完成配对的，那么暴力钦定他和第一个配对。</p><p>这样会多出一个 <span class="math inline">\(a_1\)</span>。似乎可以大于 <span class="math inline">\(10^9\)</span>。</p><p>现在我们要证明这个是对的，也就是我们并不能卡掉他。</p><p>发现两两配对的时候是可以除 <span class="math inline">\(\gcd\)</span>的。</p><p>那么现在我们不妨假设 <span class="math inline">\(a_i\not=a_{i+1}\)</span> 因为反证法，如果有一对相等那么就剩下 <spanclass="math inline">\(n-2\)</span> 个和这两个 <spanclass="math inline">\(1\)</span>。肯定是达不到 <spanclass="math inline">\(10^9\)</span> 的。</p><p>那么现在肯定有 <span class="math inline">\(n/2\)</span> 个不等于<span class="math inline">\(10^4\)</span> 的，所以肯定会少 <spanclass="math inline">\(5\times 10^4\)</span>所以也是不满的。</p><hr /><p><a href="https://codeforces.com/contest/1582/problem/E">E</a></p><p>考场上没想到 dp 。</p><p>csp考第二题时也不是很会 dp。应该多练练了。</p><p>把原序列 reverse 一下，那么就是正序找连续段了。</p><p><span class="math inline">\(\text{dp}_k(x)\)</span> 表示现在在 <spanclass="math inline">\(x\)</span> 位置是第 <spanclass="math inline">\(k\)</span> 段结尾的最大可能权值。</p><p>随意前缀和优化以下就好。</p><hr /><p><a href="https://codeforces.com/contest/1582/problem/F2">F</a></p><p>先说 F1 做法。</p><p><span class="math inline">\(\text{dp}_{t}(x)\)</span> 表示自序列以<span class="math inline">\(t\)</span> 结尾，<spanclass="math inline">\(\text{xor} = x\)</span>。</p><p>这其实是一个 <span class="math inline">\(a_n^2\)</span>大小的表。</p><p>考虑每插入一个数 <span class="math inline">\(a_i\)</span></p><p><span class="math inline">\(\text{dp}_{a_i}(x)=\sum_{k\leq a_i}\text{dp}_{k}(x\text{ xor }a_i)\)</span>。</p><p>对 <span class="math inline">\(t\)</span>维作前缀和，直接维护前缀和数组。</p><p>本质上在 <span class="math inline">\(\text{dp}_{t-1}(a_i\text{ xor }x)=1\)</span> 的 <span class="math inline">\(t,x\)</span>出，向上刷表。</p><p>即对于 <span class="math inline">\(k\in[t,\infty]\)</span> 的 <spanclass="math inline">\(\text{dp}_{k}(x)\)</span> 赋值为 <spanclass="math inline">\(1\)</span>。</p><p>还是考虑刷表，显然表的大小是 <spanclass="math inline">\(\mathcal{O(a_i^2)}\)</span>级别，现在复杂度瓶颈在找到 <spanclass="math inline">\(\text{dp}_{t-1}(a_i\text{ xor } x)=1\)</span>的位置。</p><p>考虑如果你现在有一个 <span class="math inline">\(a_i\)</span>而之前在 <span class="math inline">\(j\)</span> 的位置有一个 <spanclass="math inline">\(a_j=a_i\)</span> ，那么在<spanclass="math inline">\(a_j\)</span> 之前出现的 <spanclass="math inline">\(\text{xor}\)</span> 值显然是没有必要在转移的。</p><p>所以我们每对于一对 <span class="math inline">\(x,t\)</span>更新转移，以后就再也不用更新了，复杂度就是 <spanclass="math inline">\(\mathcal{O(a_i^2)}\)</span> 的。</p><hr /><p><a href="https://codeforces.com/contest/1582/problem/G">G</a></p><p>比较容易的一个题。</p><p>考虑枚举区间左端点，我们需要维护出每个质因子 <spanclass="math inline">\(p_i\)</span>第一次出现的位置能延伸的最大值的最小值。</p><p>那么我们对于每个质因子 <span class="math inline">\(p_i\)</span>求出每个位置能到达最远位置。</p><p>这个可以单调栈 <span class="math inline">\(\mathcal{O(m)}\)</span>也就是 <span class="math inline">\(\mathcal{O(n\omega(a_i))}\)</span>求出。</p><p>然后倒着扫这个 <span class="math inline">\(a\)</span>数组，维护最后出现的质因子能到最远的地方。</p><p>直接用 multiset 维护即可。</p>]]></content>
    
    
    <categories>
      
      <category>whole round</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AGC006F</title>
    <link href="/2021/10/22/AGC006F/"/>
    <url>/2021/10/22/AGC006F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/AT2167">Link</a></p><p>这题我大概一年前就做过，现在心情很糟。</p><p>直接说现在的心路历程。</p><ol type="1"><li><p>看反了 <span class="math inline">\((x,y),(y,z) \rightarrow(z,w)\)</span> 中的 <spanclass="math inline">\((z,w)\)</span>。</p></li><li><p>受到一个cf题的影响，拼命想并查集，做成了二分图，没什么进展（因为没有联通性）。</p></li><li><p>看题解，得知应该看成有向图，用边的方向表示。</p></li><li><p>又看错题意回到了 <code>1</code>，认为这个和 noi day1 t3很像。</p></li><li><p>不忍心又看了题解，接下来的做法是 expected solution (with mythought)。</p></li><li><p>建出有向图，对于其中任意一个点 <spanclass="math inline">\(x\)</span>，按出入边分类，这样并不能成功划分，因为存在向他方向有边，又向别的地方有边的点，如图所示。</p><p><img src="\img\10.png" /></p><p>就是图中的蓝点向外连的点，向红点连的点。以现在的标准并不能很好分类。</p><p>但可以发现他们共同的性质是 <span class="math inline">\(\text{blue}\rightarrow \text{u} \rightarrow \text{red}\rightarrow\text{blue}\cdots\text{and so on}\)</span>。</p><p>也就是他们有着和 <span class="math inline">\(x\)</span>一样的性质，那就把他们分到与 <span class="math inline">\(x\)</span>一组。</p></li><li><p>这样可以把一个图分成三类点，很好计数。当然现在我们考虑的都是平凡的图，即没有重(chong)边（无向重(chong)边），无自环的图。</p></li><li><p>当然如果存在一个重边/自环，也挺好考虑的。</p><p>首先你发现重边自环等价，<spanclass="math inline">\(\text{u}\rightarrow \text{u}\ \ + \ \ \text{u}\rightarrow \text{v}=\text{v}\rightarrow \text{u}\)</span>反之亦然。</p><p>这个东西就像病毒一样，只要一个有了，与他联通的点就全会有。</p><p>而一个所有边都是重边和自环的子图，那么显然是个无向完全图，也可以计数。</p></li></ol><p>结束。</p><p>tips: 判断红蓝点就直接三染色。</p><p>done.</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>染色</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扫描线类线段树正确性分析</title>
    <link href="/2021/10/22/scanning-line-simple-thoughts/"/>
    <url>/2021/10/22/scanning-line-simple-thoughts/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>对于线段树分析。</p>          </div><p><span class="math inline">\(\mathcal{Goal: }\)</span>我们希望使用线段树维护区间大于0的数的个数，支持区间加/减。</p><hr /><p><span class="math inline">\(\mathcal{Main\ \ Idea :}\)</span>方法：通过打加法 tag，直接维护答案。</p><hr /><ol type="1"><li><p>由于扫描线的性质，区间减法相当于撤销上一次区间加，所以 tag始终非负。</p><p>至于维护的值，我们只需要保证每次修改的节点到根路径上的点的答案都是正确的即可。</p></li><li><p>所以现在我们到一个结束节点 s，如果有 s 标记 <spanclass="math inline">\(\mathrm{tag}\not = {0}\)</span> 那么 s的答案值一定是 <span class="math inline">\(r-l+1\)</span>。</p><p>否则 我们从儿子更新，s的两个儿子一定是正确的（这个可以使用类似数学归纳法的证明）。</p></li></ol><hr /><p>注意为什么有的时候我们不从儿子更新，因为有的时候儿子<strong>并没有</strong>被修改算过答案。</p><p>而此时如果 <span class="math inline">\(\mathrm{tag}=0\)</span>那么这个点答案是 0也显然；否则 <span class="math inline">\(\mathrm{tag}\not = 0\)</span>是 <span class="math inline">\(r-l+1\)</span>也是正确的。</p><hr /><p><span class="math inline">\(\mathcal{Conclusion}\)</span></p><p>大体做法如上了，说一下我认为值得注意的。</p><p>注意我们在维护这个区间加减，全局非0个数的时候是用到了<strong>扫描线</strong>的性质的，也就是撤销性质，即任意时刻<span class="math inline">\(\mathrm{tag}\geq0\)</span>，这个是异常重要的。</p><p>我并不会没有这个性质的区间该怎么维护。</p><p>同时也注意，我们只是保证了每次修改区间对应的节点s，到根<strong>这条路径</strong>上点的正确性。</p><p>我认为这个看起来并不起眼的线段树在扫描线中并不是一个可以忽略的东西，更应该是最重要的东西，因为这个线段树现在看来是完全依靠扫描线性质的，把他们割裂开可是万万不得的。</p><p>如果有大佬能看到我的这篇博客，而且对我的观点，做法有不认可的地方，也欢迎在评论区提出。</p><p><span class="math inline">\(\mathrm{done.}\)</span></p><div class="note note-primary">            <p>update</p>          </div><p>还没有结束。。。。</p><p>扫描线其实远远不用这么麻烦的线段树。这个线段树用途感觉十分小，而且严格弱于接下来的这种方法。</p><p>不必考虑所谓的撤销操作。</p><p>有这样一个比撤销操作更加不严格的性质（要求）——任意时刻每个位置&gt;=0。</p><p>这样你其实可以只维护<strong>最小值</strong>，和最小值个数即可。</p><p>由于不会出负数，最小值肯定就是0，有贡献的；或&gt;0，没有贡献的。</p><p>really done?</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Count Multiset</title>
    <link href="/2021/10/15/abc221H/"/>
    <url>/2021/10/15/abc221H/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p><ahref="https://atcoder.jp/contests/abc221/tasks/abc221_h">Arc221H-Link</a></p>          </div><div class="note note-success">            <p>Solution</p>          </div><p>第一步，对于 multiset 计数，我们将其转换成 对于单调不降数列计数。</p><p>这时看起来对于单调不降数列计数已经有较好的性质了，我们也可以得到如下的<span class="math inline">\(\mathcal{O(n^3)}\)</span> 的 dp。</p><p>对于每个 <span class="math inline">\(t\)</span>,更新 dp 数组：<spanclass="math inline">\(\text{dp}_i(x)=\sum_{j=1}^{m}\text{dp}_{i-j}(x-tj)\)</span>，如果你了解背包问题的话，这个相当于对所有整数做一个完全背包。</p><p>复杂度我并不会优化，所以根据题解有了如下思路。</p><hr /><p>第二步，对于单调不降数列计数可以通过差分转换成一个非负整数数列。</p><p>当然对于别的一些单调不降数列计数的话，差分会较大影响原数列的性质，所以这个并不是一个常见套路。</p><p>现在问题转化成，对于 <span class="math inline">\(k\leq n\)</span>满足 <span class="math inline">\(\sum_{i=1}^{k}a_i\times(k-i+1)=n ,a_1\not = 0\)</span> 且没有 <span class="math inline">\(m\)</span>个连续的 <span class="math inline">\(0\)</span> 的非负整数数列个数。</p><p>这样一个显然的 dp 转移出来了。</p><p><spanclass="math inline">\(\text{dp}_{i}(n)=\sum_{j=0}\sum_{k=i-m}\text{dp}_{k}(n-j\timesi)\)</span></p><p>相当是把原属列 reverse 以下，然后 dp。</p><p>你只需要保证最后一次不是从 <span class="math inline">\(0\)</span>转移的即可。</p><p><span class="math inline">\(j\)</span> 的总枚举量是 <spanclass="math inline">\(n\ln n\)</span>，可以对 <spanclass="math inline">\(i\)</span> 为前缀和，总复杂度 <spanclass="math inline">\(\mathcal{O(n^2\ln n)}\)</span></p>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arc115D odd degree</title>
    <link href="/2021/09/27/arc115d/"/>
    <url>/2021/09/27/arc115d/</url>
    
    <content type="html"><![CDATA[<h3 id="statement">statement</h3><p><ahref="https://atcoder.jp/contests/arc115/tasks/arc115_d">题意</a>很简洁。</p><p>让你对于 <span class="math inline">\(k\in[1,n]\)</span>求一个图有多少个子图有恰好 <span class="math inline">\(k\)</span>个奇度的点。</p><p><span class="math inline">\(n,m\leq 5000\)</span>。</p><p>注意子图特殊定义：原图 <span class="math inline">\(E\)</span>,子图<span class="math inline">\(S\)</span>。<spanclass="math inline">\(E,S\)</span> 点集相同，<spanclass="math inline">\(S\)</span> 边集是 <spanclass="math inline">\(E\)</span> 边集的子集。</p><span id="more"></span><hr /><h3 id="solution">solution</h3><p>这个题其实和 <ahref="https://proton-z.github.io/2021/06/15/cf1515F/">cf1515G</a>有异曲同工之妙。</p><p>这道题本质让我们决策每一条边选还是不选。</p><h4 id="hint1">hint1</h4><p>如果是树怎么办？</p><h4 id="key">key</h4><p>接下来就是最精妙的地方了！</p><p>在树上的时候，只要我们钦定奇度点，我们可以得到唯一边的决策情况。</p><p>可以从反证法，如果多一条边，那么必须用一个环来抵消，树中没有环。</p><p>若要 <span class="math inline">\(2\mid k\)</span>个奇度点，则方案数就为 <spanclass="math inline">\(\binom{n}{k}\)</span>。</p><hr /><p>从而可以扩展到平凡图。</p><p>我们拉出来一棵生成树，然后我们先决策树边，接下来决策非树边。</p><p>现在本质上是对一个树边的决策情况，我们想把若干个环取反使得奇偶状态不变。</p><p>这里与 <ahref="https://proton-z.github.io/2021/06/15/cf1515F/">cf1515G</a>便十分相似，我们认为每一个非树边与树边形成的简单环是所有环的“基环”。</p><p>所以只需要随意决策每一个非树边选不选即可。</p><hr /><p>也可以这么理解无论我们怎么决策非树边 <spanclass="math inline">\((x,y)\)</span>，都可以通过把 <spanclass="math inline">\(x,y\)</span> 间树边取反，使得状态不变。</p><p><span class="math inline">\(\texttt{Complexity :}\mathcal{O(n\alpha(n)+n^2)}\)</span>。</p><h3 id="code"><ahref="https://atcoder.jp/contests/arc115/submissions/25897887">code</a></h3>]]></content>
    
    
    <categories>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小idea</tag>
      
      <tag>combination</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1574 F. Occurrences</title>
    <link href="/2021/09/23/cf1574F/"/>
    <url>/2021/09/23/cf1574F/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1574/problem/F">Link</a></p><p>中文大意：让你构造字符串 <span class="math inline">\(a,a_i\lek\)</span>。</p><p>记 <span class="math inline">\(s(b)\)</span> 为字符串 <spanclass="math inline">\(b\)</span> 在 <spanclass="math inline">\(a\)</span> 中出现次数</p><p>给你 <span class="math inline">\(n\)</span> 个限制字符串 <spanclass="math inline">\(A_i\)</span>,表示对于任意 <spanclass="math inline">\(A_i\)</span> 子串 <spanclass="math inline">\(b\)</span>,<span class="math inline">\(s(A_i)\ges(b)\)</span>。</p><hr /><h3 id="题解">题解</h3><p>思路还蛮好想，只要合法的字符串 <span class="math inline">\(a\)</span>,<span class="math inline">\(s(A_i)\les(b)\)</span>，所以现在情况只有取等。</p><p>首先排除 <span class="math inline">\(\exist\ j\not =k\quad s.t.\A_{i,j}=A_{i,k}\)</span>。</p><p>此后问题就变为如何决策 <span class="math inline">\(A_i,A_j\)</span>两个冲不冲突。</p><p>rephrase 问题，如果我们选字符 <spanclass="math inline">\(A_{i,1}\)</span> 那么有必须选 <spanclass="math inline">\(A_{i,2}\)</span>,如此递推。</p><p>认为这是一个顺次向下钦定的问题。</p><p>建出图那么，我们只需要统计有向链的个数。</p><p>合法链长分别为 <spanclass="math inline">\(l_1,l_2\dots,l_k\)</span>。</p><p>注意单个字符。</p><p>那么可以使用多项式求逆 <spanclass="math inline">\([x^n]\sum_{i=0}f^i(x)=[x^n]\frac{1}{1-f(x)}\)</span>。</p><p><span class="math inline">\(\texttt{Complexity : }\mathcal{O(n\logn)}\)</span>。</p><p>发现 <span class="math inline">\(\sum_{i}l_i\leq n\)</span>,可以想到根号分治。</p><p><span class="math inline">\(\texttt{Complexity : }\mathcal{O(n\sqrtn)}\)</span>。</p><p>注意算链的时候不要怕麻烦，要考虑周全，或许我是对了，但是正式考试+31可不是什么好东西。</p><p>code 略。</p><hr /><p>11.16胡一个，有向链大概就是看成无向的，然后看能不能dfs完全？</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>combination</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arc101C | Ribbon on tree</title>
    <link href="/2021/09/18/arc101c/"/>
    <url>/2021/09/18/arc101c/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://atcoder.jp/contests/arc101/tasks/arc101_c">题意</a></p><p>题目大意解释一下，让你给一颗树结点配对，染色每对点。如果每一条边都有颜色，那么就算一种合法的情况。</p><hr /><h3 id="sol">sol</h3><p>0正：对于任意</p><p>反：存在</p><p>显然正难则反。</p><p>存在难，所以显然钦定然后容斥。</p><hr /><p>这样大体idea 出来了。</p><h4 id="step1">step1</h4><p>首先发现一件事情,我们可以通过把一颗树，切掉一条边，变成两颗子树，递归分别求解。</p><p>这样求出的是不包括 钦定的这条边的合法情况数。</p><p>这样显然可以容斥。</p><p><span class="math inline">\(\texttt{Complexity :}\mathcal{O(2^n)}\)</span>.</p><h4 id="step2">step2</h4><p>复杂度在于现在需要决策每一条边选不选。</p><p>这样让我们想到类似背包类的 dp。</p><p><span class="math inline">\(\text{dp}_u(x)\)</span> 表示以 <spanclass="math inline">\(u\)</span> 为根的子树，与 <spanclass="math inline">\(u\)</span> 相连有 <spanclass="math inline">\(x\)</span> 个。</p>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>IN-EX principle</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cumulative Sum</title>
    <link href="/2021/09/12/abc208f/"/>
    <url>/2021/09/12/abc208f/</url>
    
    <content type="html"><![CDATA[<h3 id="题意"><ahref="https://atcoder.jp/contests/abc208/tasks/abc208_f">题意</a></h3><h3 id="题解">题解</h3><h4 id="part1">part1</h4><p><span class="math inline">\(n\)</span> 很大,但 <spanclass="math inline">\(m,k\)</span> 很小，这提示了我们。</p><p>把 <span class="math inline">\(f(x,y)\)</span> 看成若干个关于 <spanclass="math inline">\(x\)</span> 的多项式，<spanclass="math inline">\(f_y(x)\)</span> 。</p><p>显然 <span class="math inline">\(y=0\)</span> 时 <spanclass="math inline">\(f_y(x)\)</span> 是一个 <spanclass="math inline">\(k\)</span> 次多项式。</p><p>考虑由于 <span class="math inline">\(f_y(x)\leftarrowf_y(x-1)+f_{y-1}(x)\)</span> 。</p><p>显然 <span class="math inline">\(f_y(x)\)</span> 本质上是一个 <spanclass="math inline">\(f_{y-1}(x)\)</span> 的前缀和，所以 <spanclass="math inline">\(f_y(x)\)</span> 次数是 <spanclass="math inline">\(f_{y-1}(x)\)</span> 次数加一。</p><p>可以发现 <span class="math inline">\(f_{y}(x)\)</span> 是一个 <spanclass="math inline">\(k+y\)</span> 次多项式。</p><hr /><h3 id="part2">part2</h3><p>暴力计算 <span class="math inline">\(f_y(x),x\in[1,k+y]\)</span>后。(<span class="math inline">\(\texttt{Complexity : }\mathcal{O(ky)}\)</span>).</p><p>考虑 lagrange 插值。</p><p>记住 <span class="math inline">\(x_i\)</span>值是有规律的时候拉格朗日插值是 <span class="math inline">\(O(n)\)</span>的，或者高一点。</p><p>分子维护一个suffix,prefix就完事了。</p><p>分子发现是每一次全加一，也是可以做的。</p><p>这样就完事了。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>拉格朗日插值</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>daily</title>
    <link href="/2021/09/10/daily/"/>
    <url>/2021/09/10/daily/</url>
    
    <content type="html"><![CDATA[<h3 id="section">🌃2021 8 19</h3><p>今天开始上网课了，可能事情会好起来了。</p><p>颓了好久。</p><p>没干什么正经事。</p><p>自己思维能力看起来真的不容乐观。</p><p>重要事情就留给明天吧。</p><h3 id="section-1">🌃2021 8 20</h3><p>确定了，并不是要否定自己初中的的学习方法，但也要改变初三末期对学习的看法。</p><p>「悔相道之不察兮，延伫乎吾将反。回朕车以复路兮，及行迷之未远。」</p><p>现在看来写作业应该是学好习的必要条件。</p><p>真正的成功不是逃避自己的不足，经过成熟的思考迎难而上才部分正确。</p><p>学OI不应该成为逃避文化课的借口。</p><p>学OI不应该成为颓废的借口。</p><h3 id="section-2">🌃2021 8 21</h3><p><code>hide: true</code></p><h3 id="section-3">🌃2021 8 22</h3><p>尽管 8.20 说的颇有道理。</p><p>但是我不能在此放弃努力学习 OI。</p><p>或许可以说为了“不要出意外”，要负责任，但是这些都不是阻挡我在高一上学期努力学习OI的理由，或者自甘堕落的借口。</p><p>我所看到，所听到的，都是强者在胜利后的“一己之言”，他们在当时有什么我没有的条件，付出了我没付出的什么，这些都是我所不知道的，调整时间的确重要，但是以调整作为借口，这是大忌。</p><p>在弱省，在一个充满颓意的东北，必须强迫自己接受，承受自己所改变不了的。</p><p>没周的做题计划也不应该取消，以着题目难度不一为借口？这种话你还好意思再说嘛？</p><p>这一个效率=0的一周，就当他是军训吧。</p><p>不必无故纠结过去的失败，重要的，能改变的还在现在和将来。</p><p>如果不具有强大的心灵，就应该不惧困难，不给自己找颓靡的借口。</p><p>现在 2021.8.22 19:20 前路漫漫，但是我已经没有什么好害怕的了。</p><p>「起风了,唯有努力生存。」</p><h3 id="section-4">🌃2021 8 31</h3><p>上周很忙碌，心情一会好，一会差，这周是差的。</p><p>心情应该一定取决于睡眠。</p><p>心情不好。</p><p>差死了。</p><p>睡觉！。</p><h3 id="section-5">🌃2021 9 3</h3><p>本应该很开心的。</p><p>看不惯有的人。</p><p>似乎是价值观不符。</p><p>似乎是自己太过傲慢。</p><p>不管了，记录一下at罢了。</p><p>有些事情，也应该释怀了。🌠</p><p>atcoder 的精髓似乎就是 rephrase</p><p>🌠</p><h3 id="section-6">🌃2021 9 5</h3><p>上午去打了疫苗。</p><p>下午颓颓颓，想学画画。</p><p>我觉得我有画画的天赋。。。</p><p>想学。</p><hr /><p>总是感觉在做梦。</p><p>我现在记不住初中每一回大型考试的具体答案。</p><p>我现在记不住天宇一次次天宇杯，阶段联系的题目。</p><p>我记不住3+3考试的题目。</p><p>我记不住我曾经对自己充满信心的世锦赛的答案。</p><p>要是让现在的我重新来过呢？</p><p>我可能只能在前几次 OI 比赛能得到更好的分数，我还记得 OI比赛的题目。</p><p>如果让我重置一次人生呢？</p><p>或许这只是一场梦，让我醒来后呢？</p><p>我会不会重新走一次现在的道路？</p><p>我是不是就是在一个叫做”我想学计算机“的梦里？</p><p>谁知道呢！</p><p>我从未羡慕过自己。</p><p>我在很多方面的确什么也做不好。</p><p>我在人迹交往上，的确一窍不通。</p><p>我在情绪控制上也的确十分失败。</p><p>不。</p><p>我还是会羡慕自己的，只不过我更羡慕我身边的一些人。</p><p>我是个中国人。</p><p>我能够自由的发表自己对别人的看法，能发出心声（身边的十分善良，非常感谢他们能够接纳我的SB发言）。</p><p>尽管老师更喜欢学他们这个学科好的，老师也并没有对我这样学的欠佳的学生厌恶。</p><p>尽管中考压力客观上很大，我也通过主观上颓靡，使自己没有完全崩溃。</p><p>我去过NOI2021收获了一段对我而言非凡的经历。</p><hr /><p>突然想到初一的那个和同学说的”当时的梦想“实现了，但没完全实现。</p><p>很遗憾他高中不在我们学校了。</p><p>只能让那段时光封闭了吧。</p><p>在某些层面上我的确输惨了。。</p><hr /><p>1192 词。</p><h3 id="twice-update-on-9-5">twice update on 9 5</h3><p>sumsung 的屏幕我之前很卡以为被骗了。</p><p>现在才知道原来是刷新率没有调高。</p><p>😓🌠🌠🌠🌠🌠</p><p>上周我开始半脱产。</p><p>还是比较好的。</p><p>我的心理状态还是没有得到严格控制。</p><p>现在听到noi那几个夜晚听的歌曲也还是会十分感伤。</p><p>我当时真有些结束了的感觉。</p><p>《如约而至》负全责！！！！！！</p><p>最终也没能相约老地方😂</p><p>但我也没能释怀我所有的悲伤。</p><p>all right!~~~~</p><h3 id="section-7">🌃2021 9 10</h3><p>今天又是星期五，中午放学。</p><p>周五什么作业也没写，心情也比较怅然。</p><p>学了学数学竞赛。</p><p>很自闭，但我相信我并不是从思想上都不适合。</p><p>我一定能行的。</p><p>效率极低。</p><p>2*abcF 下午的大把时间，被浪费了。</p><p>控制心情可以靠喝水了。</p><p>前路光明，还只是我的一厢情愿。</p><p>不知道。</p><p>好多事情已经在头脑中，也打算写出，可是终下不了笔。</p><p>左三右三也没有交。</p><p>看到今天的wjh,nx,myc，我真的似乎看到NOI前几天我身边人的状态，但还是wjh,myc他们更和我亲近？</p><p>他们并没有颓靡，但是看得出挺紧张的。</p><p>似乎颓靡只属于吉林的信息学。</p><p>我并不只是很在乎这次高联。就像NOI我并不是很在乎那个考试，而是，承载考试的整个NOI——余姚的校园，组委会，别的大佬，交朋友？</p><p>学数学的高联后就学习文化课了。</p><p>楼下的自习室，似乎就有空无一人了，我还是不能在那里长久的待呢。</p><p>I(ce) - scream?</p><p>Fighting dreamers?</p><p>学数学的他们身上我似乎看到了，他们对脱产的留恋，（？只是似乎），为着追求的紧张，lth最后也说出了一个让我非常敏感的词“心理医生”。</p><p>好熟悉呀。。。。</p><p>我认为，同时希望 他们不会变成现在的我。</p><p>我想和像why,wst什么的聊聊天，可是最终我还是要付出最长时间和自己聊天，在心里聊，在大脑中聊，在作文里聊，渴望着老师给上一句评语，是有评语，但最终只是告知我作业质量不佳。</p><p>还是在躲避呀。</p><p>jump out of the window</p><p>记忆犹新？</p><p>跟风？在没有完全了解一个人前就尊崇为大哥？失败后把责任全推给“他”？</p><p>我不是赢不来我的perfect time。</p><p>我只是太容易忘却了。</p><p>我想是金碧辉煌的酒店里的一块漆黑的金刚石？我发出的光芒我只会以为是我的阴影？</p><p>不知道，我的身体告诉我要去睡觉了。</p><p>all right,update at 2021.9.10</p><hr /><h3 id="section-8">🌃2021 9 12</h3><p>回朕车以复路兮,及行迷之未远。</p><p>不要再陷入一部作品中无法自拔呀！</p><hr /><h3 id="section-9">🌃2021 9 21</h3><p>对OI的热情不能被磨去呀。</p><p>看着前人写的一片片博客，他们描述的生活，描述的OI是如此的美好。</p><p>的确我只能看到别的光鲜的一面，但是如此会看自己是否太过布满了阴霾？</p><p>希望的确始终客观存在，只不过我不去接受罢了。</p><figure><img src="\img\9.png" alt="image-20210921152212540" /><figcaption aria-hidden="true">image-20210921152212540</figcaption></figure><p>ORZ JCY学长</p><p>如果是一年前，两年前，我可能还是会自大的说出：“中考是什么傻逼，到了高中就一定会顺利这样的话语。”</p><p>但是现在，我已经彻彻底底进入了高中，高一一班，吴波老师的班级里。</p><p>我的轨道再次奇迹般地和他们重合到一起。</p><p>但是这次，我一定不会陷入之前所陷入的那样的漩涡。</p><p>一定的。生活应该重新充满希望，当然这样的希望不应是我去请来的，求来的，而应该是我“拿来的”。</p><hr /><p>我一定要主动刷难题，这样思维才会提升，而不是沉溺于简单题无法自拔，自我满足，不能啊Q</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Connectivity 2</title>
    <link href="/2021/09/03/abc213G/"/>
    <url>/2021/09/03/abc213G/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><ahref="https://atcoder.jp/contests/abc213/tasks/abc213_g">Link</a></p><h3 id="题解">题解</h3><p>比较有趣。</p><p>如果从单纯的做题角度，这个题似乎就没有那么有趣了，对我而言。</p><p>大意，给你个图，每条边都可以保留或切断，问有多少种方式，使得最终<span class="math inline">\(1,k\)</span> 联通。</p><hr /><p><span class="math inline">\(n\leq 17\)</span>很容易想到bitmask(状压)。</p><p>如果对于边的状压，不好处理连通性，也有太多状态。</p><p>那么就从连通性直接状压。</p><p><span class="math inline">\(f(S)\)</span> 表示提取 <spanclass="math inline">\(S\)</span> 点集，在 <spanclass="math inline">\(S\)</span> 中点联通的方案数。</p><p>由于只考虑子图，为了叙述方便记录 <spanclass="math inline">\(cnt(S)\)</span> 表示上述 <spanclass="math inline">\(S\)</span> 子图的边的个数。</p><hr /><p>全部联通这个要求显然是难的。</p><p>正难则反，朴素容斥一下。</p><p>算出随意切边的情况减去不连通。</p><p>接下来的转移比较巧妙，通过枚举任一 <span class="math inline">\(x\inS\)</span>。</p><p>考虑 <span class="math inline">\(x\)</span> 在什么连通块中，若 <spanclass="math inline">\(x\)</span> 恰好在 <spanclass="math inline">\(T\subset S\)</span> 中，那么 <spanclass="math inline">\(T\)</span> 与 <spanclass="math inline">\(\overline T\)</span> 之间一定没有边，此时可以让<span class="math inline">\(\overline T\)</span> 随机连边。</p><p>仔细思考这样所枚举不连通的一定不重不漏。 <spanclass="math display">\[\text{trans : }f(S)=\sum_{x\in T\subset S} f(T)2^{cnt(\overline T)}\]</span></p><p><span class="math display">\[\text{calculate ans : } a_k=\sum_{1\in T,k\in T} f(T)2^{cnt(\overlineT)}\]</span></p><p>$ $</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>bitmask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Coprime Solitaire</title>
    <link href="/2021/08/31/abc210F/"/>
    <url>/2021/08/31/abc210F/</url>
    
    <content type="html"><![CDATA[<p>现在很晚了，但是这个神必题卡了我真的好久好久。。。。。(before noiuntil present).........</p><p>（你可以通过我被这个SB题卡发现我真是个菜B)</p><h3 id="题意"><ahref="https://atcoder.jp/contests/abc210/tasks/abc210_f">题意</a></h3><h3 id="题解">题解</h3><p>显然 naive 的连边，如果 <spanclass="math inline">\(\gcd(a_i,a_j)\)</span>,<spanclass="math inline">\(a_i \rightarrow b_j\)</span> 那么如果选 <spanclass="math inline">\(a_i\)</span> 必须不能选 <spanclass="math inline">\(a_j\)</span> ,显然应该选 <spanclass="math inline">\(b_j\)</span> 。剩下3种情况同理。</p><p>做 2-sat 就好。</p><p>但显然 <span class="math inline">\(n^2\)</span> 条边，傻了。</p><p>那么你发现如果 <span class="math inline">\(\gcd(a,b)\)</span> <spanclass="math inline">\(P_a\)</span> 交 <spanclass="math inline">\(P_b\)</span> 不为空集。</p><p>那就可以新建节点 <span class="math inline">\(f_p\)</span> 表示 如果当<span class="math inline">\(p\mid a\)</span>应该向prefix全连边的点。</p><p>很好更新，记录 prefix,suffix 就没了。</p><p>被这个东西卡我是真傻逼。</p><p>明天开始好好学了！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分解质因数</tag>
      
      <tag>2-sat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stirling number</title>
    <link href="/2021/08/19/stirling-number-simple-thoughts/"/>
    <url>/2021/08/19/stirling-number-simple-thoughts/</url>
    
    <content type="html"><![CDATA[<p>斯特林数。</p><p>感觉斯特林数从构造角度能更好理解吧。</p><p>未更新完毕，待更新。</p><span id="more"></span><h3 id="part-0-上升幂下降幂">part 0 上升幂，下降幂</h3><p><span class="math inline">\(x^{\overlinen}=\prod_{i=x}^{x+n-1}i\)</span></p><p><span class="math inline">\(x^{\underline n}=\prod_{i=x-n+1}^{x}i\)</span></p><p>为什么引入？</p><p>我们发现对于差分运算下降幂与微分运算对普通幂有着类似方面。</p><p>而上升幂的性质要比下降幂要简洁，所以引出上升幂。</p><p>简单结论 <span class="math inline">\(x^{\overlinen}=(-1)^n(-x)^{\underline n}\)</span>,<spanclass="math inline">\(x^{\underline n}=(-1)^n(-x)^{\overlinen}\)</span>​。</p><p>很显然的是 <span class="math inline">\(x^{\overline n},x^{\underlinen}\)</span> 都是 <span class="math inline">\(n\)</span> 次多项式。</p><h3 id="part1-第一类斯特林数">part1 第一类斯特林数</h3><p>斯特林数是为了将普通幂将下降幂/上升幂联系起来。</p><p>第一类斯特林数是用普通幂表示上升幂。</p><p>相比较组合意义，用构造的理解更加便捷。</p><p>定义满足以下的 <spanclass="math inline">\(\begin{bmatrix}n\\m\end{bmatrix}\)</span>称为第一类斯特林数。 <span class="math display">\[x^{\overline n}=\sum_{i=0}^{n}\begin{bmatrix}n\\i\end{bmatrix}x^i\]</span> 那么他是如何具有像组合意义那样的递推式的呢？</p><p>考虑： <span class="math display">\[x^{\overline{n+1}}=(x+n)x^{\overline{n}}=(x+n)\sum_{i=0}^{n}\begin{bmatrix}n\\i\end{bmatrix}x^i=\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}x^{i+1}+n\begin{bmatrix}n\\i\end{bmatrix}x^i\]</span> <span class="math display">\[[x^i]x^{\overline{n+1}}=[x^i]\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}x^{i+1}+n\begin{bmatrix}n\\i\end{bmatrix}x^i\]</span> <span class="math display">\[\begin{bmatrix}n+1\\i\end{bmatrix}=\begin{bmatrix}n\\i-1\end{bmatrix}+n\begin{bmatrix}n\\i\end{bmatrix}\]</span> <span class="math display">\[\begin{bmatrix}n\\m\end{bmatrix}=\begin{bmatrix}n-1\\m-1\end{bmatrix}+(n-1)\begin{bmatrix}n-1\\m\end{bmatrix}\]</span> 下降幂转普通幂也可以根据 <spanclass="math inline">\(x^{\overline n}=(-1)^n(-x)^{\underline n}\)</span>得到类似结论。</p><hr /><h3 id="part-2-第二类斯特林数">part 2 第二类斯特林数</h3><p>第二类斯特林数是用下降幂表示普通幂。</p><p>定义满足以下的 <spanclass="math inline">\(\begin{Bmatrix}n\\m\end{Bmatrix}\)</span>称为地二类斯特林数。 <span class="math display">\[x^n=\sum_{i=0}^{n}\begin{Bmatrix}n\\i\end{Bmatrix}x^{\underline i}\]</span> <span class="math display">\[x^{n+1}=x\cdotx^{n}=x\sum_{i=0}^{n}\begin{Bmatrix}n\\i\end{Bmatrix}x^{\underlinei}=\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}x^{\underline{i+1}}+i\begin{Bmatrix}n\\i\end{Bmatrix}x^{\underline i}\]</span> <span class="math display">\[[x^i]x^{n+1}=[x^i]x\cdot x^{n}\]</span> <span class="math display">\[\begin{Bmatrix}n+1\\i\end{Bmatrix}=\begin{Bmatrix}n\\i-1\end{Bmatrix}+i\begin{Bmatrix}n\\i\end{Bmatrix}\]</span> <span class="math display">\[\begin{Bmatrix}n\\m\end{Bmatrix}=\begin{Bmatrix}n-1\\m-1\end{Bmatrix}+m\begin{Bmatrix}n-1\\m\end{Bmatrix}\]</span></p><p>未完待续</p><p>自然数幂？ <span class="math display">\[\begin{aligned}&amp;\sum_{i=1}^{n}i^a\\&amp;\sum_{i=1}^n\sum_{j\leqn}\begin{Bmatrix}a\\j\end{Bmatrix}i^{\underline{j}}\\&amp;\sum_{j\leq n}\begin{Bmatrix}a\\j\end{Bmatrix}\sum_{i\leqn}i^{\underline{j}}=\sum_{j\leqn}\begin{Bmatrix}a\\j\end{Bmatrix}\frac{(n+1)^{\underline{j+1}}}{j+1}\\&amp;\sum_{j\leqn}\frac{\mathrm{s}_2(a,j)}{j+1}(-1)^{j+1}(-(n+1))^{\overline{j+1}}\\&amp;\sum_{j\leqn}\frac{(-1)^{j+1}\mathrm{s}_2(a,j)}{j+1}x^{\overline{j+1}},x=(-n-1)\\&amp;\sum_{j\leq n}\frac{(-1)^{j+1}\mathrm{s}_2(a,j)}{j+1}\sum_{i\leqj+1}\begin{bmatrix}j+1\\i\end{bmatrix}x^i\\\\end{aligned}\]</span> 这个结论是正确的，验证代码。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">int</span> str1[<span class="hljs-number">2000</span>][<span class="hljs-number">2000</span>],str2[<span class="hljs-number">2000</span>][<span class="hljs-number">2000</span>],c[<span class="hljs-number">2000</span>][<span class="hljs-number">2000</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ret=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) ret=ret*a%mod;<br>        a=a*a%mod;b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-keyword">int</span> k;<br><span class="hljs-keyword">int</span> h[<span class="hljs-number">10000</span>],b[<span class="hljs-number">10000</span>],iv[<span class="hljs-number">2000</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) ans+=qpow(i,k);<br>    <span class="hljs-keyword">return</span> ans%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tmp=<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=k+<span class="hljs-number">1</span>;i++)&#123;<br>        ans+=tmp*h[i];ans%=mod;<br>        tmp=tmp*n%mod;<br>    &#125;<span class="hljs-keyword">return</span> (ans+mod)%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    str1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=str2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    c[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=c[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=c[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">1000</span>;i++)&#123;<br>        c[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>            str1[i][j]=(str1[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+str1[i<span class="hljs-number">-1</span>][j]*(i<span class="hljs-number">-1</span>))%mod;<br>            str2[i][j]=(str2[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+str2[i<span class="hljs-number">-1</span>][j]*j)%mod;<br>            c[i][j]=(c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+c[i<span class="hljs-number">-1</span>][j]);<span class="hljs-keyword">if</span>(c[i][j]&gt;=mod) c[i][j]-=mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">1000</span>;i++) iv[i]=qpow(i,mod<span class="hljs-number">-2</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=k+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i<span class="hljs-number">-1</span>;j&lt;=k;j++)&#123;<br>            <span class="hljs-keyword">int</span> val=str1[j+<span class="hljs-number">1</span>][i]*str2[k][j]%mod*iv[j+<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(j&amp;<span class="hljs-number">1</span>) b[i]+=val,b[i]%-mod;<br>            <span class="hljs-keyword">else</span> b[i]-=val,b[i]%=mod;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>) b[i]=-b[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;t&lt;=k+<span class="hljs-number">1</span>;t++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=t;i&lt;=k+<span class="hljs-number">1</span>;i++)&#123;<br>            h[t]+=c[i][t]*b[i];h[t]%=mod;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以说常数巨大。</p><p>那么告诉我正确的是什么呢？</p><p>我们希望写出 <span class="math inline">\(s_k(n)\)</span> 关于 <spanclass="math inline">\(k,n\)</span> 的二元生成函数。</p><p>如我们只考虑 <span class="math inline">\(n\)</span>这一维，那么实际上我们什么也得不到。。。。</p><p>所</p><p>以应该关注 <span class="math inline">\(k\)</span> 这一维。 <spanclass="math display">\[\begin{aligned}f_k&amp;=s_{k}(n)x^k\\\hat F(x)&amp;=\sum_{k\geq 0}s_{k}(n)\frac{x^k}{k!}\\\hat F(x)&amp;=\sum_{k\geq 0}\sum_{i&lt; n}i^k\frac{x^k}{k!}\\\hat F(x)&amp;=\sum_{i&lt; n}\sum_{k\geq 0}i^k\frac{x^k}{k!}=\sum_{i&lt;n}e^{ix}\\\hat F(x)&amp;=\frac{e^{nx}-1}{e^{x}-1}\end{aligned}\]</span> 得到了对于任意 <span class="math inline">\(n\)</span> 的关于<span class="math inline">\(k\)</span> 的生成函数。</p><p><span class="math inline">\(e^x-1\)</span> 没有逆，<spanclass="math inline">\([x^0](e^x-1)=0\)</span>，所以我们要求 <spanclass="math inline">\(\frac{x}{e^x-1}\)</span> 这样的，然后让他乘上<span class="math inline">\(\frac{e^{nx}-1}{x}\)</span>。 <spanclass="math display">\[\begin{aligned}\hat B(x)&amp;=\frac{x}{e^x-1}\\\hat B(x)=e^x\hat B(x)-x&amp;\Longrightarrow b_n=\sum_{i\leqn}\binom{n}{i}b_i\\\sum_{i\leq n-1}\binom{n}{i}b_i=[n=1]&amp;\Longrightarrowb_{n-1}=[n=1]-\frac{1}{n}\sum_{i\leq n-2}\binom{n}{i}b_i\\b_{n}=[n=0]&amp;-\frac{1}{n+1}\sum_{i&lt;n}\binom{n+1}{i}b_i\\\end{aligned}\]</span> 得到递推式，那么 <span class="math inline">\(b_0\)</span>应该是什么呢，根据洛必达不难发现 <spanclass="math inline">\(b_0=1\)</span>。(也可以直接解n=1方程组)</p><p>如何求 <span class="math inline">\(s_k(n)\)</span>。 <spanclass="math display">\[\begin{aligned}\hat H(x)=\frac{e^{nx}-1}{x}=\sum_{i\geq 1} \frac{n^ix^{i-1}}{i!}&amp;=\sum_{i\geq 0}\frac{n^{(i+1)}x^{i}}{(i+1)!},\color{blueviolet}h_i=\frac{n^{i+1}}{i+1}\\\hat S(x)=\frac{x}{1-e^x}\cdot\frac{1-e^{(n+1)x}}{x}&amp;\Longrightarrows_k=\sum_{i+j=k}\binom{k}{i}b_i\frac{n^{j+1}}{j+1}\end{aligned}\]</span></p><p>尽管我们算的是 <span class="math inline">\(\sum_{1\leq i\leqn-1}i^k\)</span> 得到的却是 <span class="math inline">\(n^i\)</span>这样的多项式，但是你考虑一下是不是只需要把 <spanclass="math inline">\(n^k\)</span> 这一项+1就好了。。。。。</p><p>完事了，注意带 hat 的函数表示是 egf函数，我们提取系数后产生的原数列是不带hat,但是加法卷积被变成了二项卷积。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
      <tag>数论</tag>
      
      <tag>stirling number</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SAM</title>
    <link href="/2021/08/19/review-sam/"/>
    <url>/2021/08/19/review-sam/</url>
    
    <content type="html"><![CDATA[<p>sam，后缀自动机复习。</p><p>待更新。</p><span id="more"></span><p>会过sam,但是忘了，网上教程像是一步一步喂你饭真心很烦。。。</p><p>还是得自己写一写，上次自学的时候总结了一些，但那时候还觉得别的写的可能好一点，真是巨大错误。。。</p><hr /><p><span class="math inline">\(endpos\rightarrow right\)</span>集合。</p><p><span class="math inline">\(fail\rightarrow parent\)</span>​ 树。</p><p><span class="math inline">\(right\)</span> 集合中最大的长度 <spanclass="math inline">\(l\)</span>。</p><p>注意sam的构造方式是增量构造，你需要管插入的串的正确性，其余的自然正确。</p><p>插入一个字符，我们需要把以这个字符为结尾的所有串插入parent树。</p><p>为了描述简单易懂现在往 i 位，插入 c，字符串记为 s。</p><p>首先，从上一个最后的后缀往上跳，看dag什么时候有 c 的出边。</p><p>注意parent 树跳父亲本质在缩短后缀。</p><ol type="1"><li><p>如果没有，那么新建节点 w，parent树父亲是根，相当于把 s[k:i] <spanclass="math inline">\(k\leq n\)</span> 全部插入，用 w代替了。</p><p>然后把刚才跳过的父亲的 c 出边全连到 w。</p><p>考虑刚才跳父亲本质上在跳插入前串的后缀。</p></li><li><p>否则设当前 dag 有 c 出边的点为 d，<spanclass="math inline">\(trans(d,c)=x\)</span>。</p><p>那么尽管 d 是原串一个后缀，x也有可能不是仅仅是新加入后缀，而有可能比新加入的要长。</p><p>eg: c='b',d="aaa",x="ccaaab"。</p><p>这个 x是要比我们插入 c 后的后缀 "aaab" 长，也就是说我们新加入的 <spanclass="math inline">\(right\)</span> 集合更大应该做父亲。</p><p>所以我们就判断一下 <span class="math inline">\(l(d)\)</span> 与 <spanclass="math inline">\(l(x)\)</span> 的关系。</p><ol type="1"><li><p>如果 <span class="math inline">\(l(d)=l(x)+1\)</span>​那么就是插入后后缀和 x 长度一样，不用当爹，直接新建节点 w，按照1那样把符合的新状态在 dag 上连边。w 在 parent 树上直接认 x 为爹。</p><p>本质上在把一部分后缀直接插入，作为w，剩下的都是原自动机可以表示的。</p></li><li><p>否则 <span class="math inline">\(l(d)&lt;l(x)+1\)</span>我们必须把这个 x 所在的 <span class="math inline">\(right\)</span>拆开。</p><p>我们就把集合 <span class="math inline">\(right_x\)</span>​​​ 拆成 <spanclass="math inline">\(A=\{d+c\}\)</span>​​​ 和 <spanclass="math inline">\(B=\{k\in right_x\midlength(d+c)&lt;length(k)\}\)</span>，注意 <spanclass="math inline">\(length\)</span> 含义是字符串长度​​​​ 。</p><p>同理新建 w，dag 连新边，w 认 <span class="math inline">\(A\)</span>为爹，<span class="math inline">\(B\)</span> 认 <spanclass="math inline">\(A\)</span> 为爹。</p><p>注意 A,B dag 连边情况和 x 一样，还有记得把以前dag向 x 连边的改成向 A连边。</p><p>本质上在把一部分后缀直接插入，作为 w；特殊独立出来 d+c这个后缀；然后别的也是原先自动机可以表示，只不过多了点改边操作。</p></li></ol></li></ol><p>注意我们一个个插入后缀本质上是把所有字串都插入了。</p><p>​</p><p>注意：每一个parent树上结点，可以对应一个dag上结点，为什么，考虑我们往字符串后加字符，这些后缀不会发生改变。</p><hr /><p>构造SA。</p><p>主要通过做法理解正确性。</p><p>反串的parent树就是后缀树。</p><p>构造SA呢，就是建出反串后缀树，然后考虑一个 rightpos中最长的串，他的儿子都是相当于在<strong>原串</strong>中加<strong>后缀</strong>。</p><p>而且</p><p>这些串加的第一个字符必定互不相同。我们只需要维护这个串第一次是在哪个后缀被加入的，就能简单地维护出该位字符时什么。</p><p>所以他们的字典序可以很好排出。</p><p>仔细想一下反串后缀自动机每一次都是加后缀反串。然后考虑parent树每一次跳前缀，进而sort</p>]]></content>
    
    
    <categories>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sam</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本数论</title>
    <link href="/2021/08/19/basic-number-theory/"/>
    <url>/2021/08/19/basic-number-theory/</url>
    
    <content type="html"><![CDATA[<p>说一下一些基本数论算法的实现和简洁证明。</p><p>持续更新中。</p><span id="more"></span><ol type="1"><li><p><span class="math inline">\(exgcd\)</span></p><p>目的：求解方程 <span class="math inline">\(ax+by=(a,b)\)</span>的一组特解。</p><p>做法：<del>由于他叫exgcd</del>，我们就按求 <spanclass="math inline">\(\gcd\)</span> 方法试一下。 <spanclass="math display">\[\begin{aligned}不妨设 (a,b)=1,a&gt;b\\a\cdot x+b\cdot y=&amp;1\\b\cdot y+(a\bmod b+\lfloor\frac{a}{b}\rfloor b)\cdot x=&amp;1\\提取b\\b\cdot(y+\lfloor \frac{a}{b}\rfloor x)+(a\bmod b)x=&amp;1\\问题化归，求解\ bx_1+(a\bmod b)y_1=&amp;1\\\end{aligned}\]</span> <span class="math inline">\(\mathcal{Code}\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;<br>    exgcd(b,a%b,y,x); y-=(a/b)*x;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>为啥能求逆元？ <span class="math display">\[\begin{aligned}ax+by&amp;=1\\ax+by&amp;=1\pmod{b}\\ax&amp;=1\pmod{b}\end{aligned}\]</span> 显然 <span class="math inline">\(x\)</span> 是 <spanclass="math inline">\(a\)</span> 在 <span class="math inline">\(\bmodb\)</span> 意义下的逆元</p></li><li><p><span class="math inline">\(excrt\)</span></p><p>目的：合并若干线性同余方程组。 <span class="math display">\[\begin{cases}x\equiv a_1\pmod{p_1}\\x\equiv a_2\pmod{p_2}\\\ \ \ \ \vdots\\x\equiv a_n\pmod{p_n}\end{cases}\]</span> 问题本质等价，合并两个方程。</p><p><span class="math inline">\(x\equiv a_1\pmod{p_1},x\equiva_2\pmod{p_2}\)</span></p><p>若存在解则解一定能表达成 <span class="math inline">\(x=x_0+k\cdotlcm(p_1,p_2)\)</span>,<span class="math inline">\(x_0\)</span>是一个特解。</p><p>显然 <span class="math inline">\(p_1\mid lcm(p_1,p_2),p_2\midlcm(p_1,p_2)\)</span>。</p><p>现在目的找到这样的一个特解 <span class="math inline">\(k\)</span>。<span class="math display">\[k=k_1\cdot p_1+a_1,k=k_2\cdot p_2+a_2\Rightarrow k_1\cdotp_1+a_1=k_2\cdot p_2+b_2\\\Rightarrow k_1\cdot p_1-k_2\cdot p_2=b_2-b_1\]</span> 可以用 <span class="math inline">\(exgcd\)</span> 求一组 <spanclass="math inline">\(k_1,k_2\)</span> 特解。</p><p>·</p></li><li><p><span class="math inline">\(Miller\ rabin\)</span></p><ol type="1"><li><p>首先费马小定理判断一波,<span class="math inline">\(p\in\text{prime} \Leftrightarrow \forall(a,p)=1,a^{p-1}\equiv1\pmod{p}\)</span>。</p></li><li><p>如果 <span class="math inline">\(a^{2}\equiv1\pmod{p}\)</span>,如果 <span class="math inline">\(p\)</span>是质数，那么必定有 <span class="math inline">\(p\mid(a-1)\)</span>,或者<span class="math inline">\(p\mid(a+1)\)</span>。</p><p>否则 <span class="math inline">\(p\)</span> 是合数。</p><p><span class="math inline">\(a^{p-1}\equiv 1\pmod{p}\)</span>。</p><p>此时如果 <span class="math inline">\(p\)</span>是质数，<spanclass="math inline">\(a^{\frac{p-1}{2}}\equiv 1\ or\-1\pmod{p}\)</span></p><p>如果是 <span class="math inline">\(-1\)</span>的时候，继续不下去，只得暂时假装他是素数。</p><p>否则继续检查 <span class="math inline">\(a^{\frac{p-1}{2}}\equiv1\pmod{p}\)</span></p><p>本质上我们就是通过看 <span class="math inline">\(a^b\equiv1\pmod{p}\)</span> 这种形式来看 <span class="math inline">\(p\)</span>是否为质数。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">mr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> b=x<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(!(b&amp;<span class="hljs-number">1</span>)) b&gt;&gt;=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> k=qpow(p,b,x);<br>    <span class="hljs-keyword">while</span>(b&lt;=x<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">int</span> muls=k*k%x;<br>        <span class="hljs-keyword">if</span>(muls==<span class="hljs-number">1</span>&amp;&amp;(k!=<span class="hljs-number">1</span>&amp;&amp;k!=x<span class="hljs-number">-1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        k=muls;b&lt;&lt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k!=<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">int</span> p[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!(x&amp;<span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">8</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x==p[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(mr(x,p[i])==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当 <span class="math inline">\(p\)</span>的值域是<code>long long</code> 范围时，乘法可能会需要快速乘。</p></li></ol></li><li><p>找阶&amp;原根。</p><p>这个东西说实话只要真正了解定义就能如同行云流水般解决了。</p><ol type="1"><li><p>阶</p><p>最小的使得 <span class="math inline">\(a^x\equiv 1\pmod{p}\)</span>的正整数 <span class="math inline">\(x\)</span>,被称为 <spanclass="math inline">\(a\bmod p\)</span> 的阶。</p><p>由于 <span class="math inline">\(a^{\phi(p)}\equiv1\pmod{p}\)</span>,所以 <spanclass="math inline">\(ord_p(a)\mid\phi(p)\)</span>。</p><p>证明很显然，如果不整除，可以用类似辗转相除的方法推出，<spanclass="math inline">\(\exists \ x&lt;ord_p(a),a^x\equiv1\pmod{p}\)</span>。</p><p>求法可以把 <span class="math inline">\(\phi(p)\)</span>的质因子一个一个消去，来看是否有 <spanclass="math inline">\(a^{\frac{\phi(p)}{k}}\equiv1\pmod{p}\)</span>。</p><p>复杂度 <spanclass="math inline">\(O(pollard-\rho)+\log(n)\)</span>。</p><p>其实，如果我们知道阶的大小，也能很好知道阶为这个数的数有多少个。</p><p>若阶为 <span class="math inline">\(d\)</span>。</p><p>那么 <span class="math inline">\(ord_{n}(x)=d\)</span> 的 <spanclass="math inline">\(x\)</span> 一定有 <spanclass="math inline">\(\phi(d)\)</span> 个。</p><p>考虑我们随便找一个 <spanclass="math inline">\(ord_n(x)=d\)</span>,那么 <spanclass="math inline">\(x,x^2,cdots,x^{d-1},x^{d}\)</span>这样的一个集合。</p><p>显然我们应该在指数上与 <span class="math inline">\(d\)</span>互质的数。</p><p>所以 <span class="math inline">\(ord_x(x^k)\)</span> 当且仅当 <spanclass="math inline">\((k,d)=1\)</span>，此时也就是 <spanclass="math inline">\([1,d]\)</span> 与 <spanclass="math inline">\(d\)</span> 互质的数，也就是 <spanclass="math inline">\(\phi(d)\)</span> 个。</p></li><li><p>原根</p><p>满足 <span class="math inline">\(ord_p(a)=\phi(p)\)</span> 的 <spanclass="math inline">\(a\)</span> 被叫做 <spanclass="math inline">\(p\)</span> 的一个原根。</p><p>原根性质：若 <span class="math inline">\(g\)</span> 为 <spanclass="math inline">\(p\)</span> 其中一个原根，那么 <spanclass="math inline">\(1,g,g^2\cdots g^{\phi(p)-1}\)</span>互不相同。</p><p>证明可以用反证法。</p><p>由于 如果 <span class="math inline">\((k,p)=1\)</span>,有 <spanclass="math inline">\(0,k,2k,\cdots,(p-1)k\bmod p\)</span>一定互不相同。</p><p>也是反证，如果 <span class="math inline">\(xk\equivyk\pmod{p}\)</span>,那么 <span class="math inline">\((x-y)k\equiv0\pmod{p}\)</span>,与 <span class="math inline">\((k,p)=1\)</span>矛盾。</p><p>所有 <span class="math inline">\(p\)</span> 有 <spanclass="math inline">\(\phi(\phi(p))\)</span> 个原根。</p><p>原根有很多，随机找可以在 <spanclass="math inline">\(O(\frac{p}{\phi(\phi(p))})\)</span>的期望次找到。</p><p>设 <span class="math inline">\(\phi(p)=\prodp_i^{\alpha_i}\)</span>。</p><p>那么判断一个数 <span class="math inline">\(x\)</span> 是不是原根就看是否 <span class="math inline">\(\forall \ k,x^\frac{\phi(p)}{p_k}\not\equiv 1\pmod{p}\)</span>。</p><p>复杂度 <spanclass="math inline">\(O(pollard-\rho)+\frac{p}{\phi(\phi(p))}\log(n)\)</span>。</p></li></ol></li><li><p><span class="math inline">\(pollard-\rho\)</span></p><p>在 <span class="math inline">\(\mathcal(O(\sqrt p)\)</span>，<spanclass="math inline">\(p\)</span> 为 <spanclass="math inline">\(n\)</span> 最小质因子的复杂度，找到 <spanclass="math inline">\(n\)</span> 的一个因数。</p><p>考虑对于最小质因子 <spanclass="math inline">\(p\)</span>，我们随机枚举，枚举到 <spanclass="math inline">\(p\)</span> 的倍数的概率为 <spanclass="math inline">\(\frac{1}{p}\)</span>。</p><p>根据生日悖论，我们随机枚举，发生碰撞的概率则为 <spanclass="math inline">\(\frac{1}{\sqrt p}\)</span>。</p><p>似乎问题马上就解决了。</p><p>但是考虑我们并不知道 <span class="math inline">\(p\)</span>的具体值，判断碰撞也只能使用 <span class="math inline">\(\gcd(\mida-b\mid,n)\)</span> 这么来判断。</p><p>那该怎么办？</p><p><span class="math inline">\(pollard\)</span> 发现了一种伪随机数列<span class="math inline">\(a_{i+1}=a_i^2+c\bmod m\)</span>。</p><p>可以证明该数列的形状为一条链加上一个环。</p><p>如果我们认为该数列是纯随机的那，环和链的长度均为期望 <spanclass="math inline">\(\sqrt m\)</span> 级别的，根据生日悖论。</p><hr /><p>现在我们的任务就是给定 <span class="math inline">\(c,a_0\)</span>的条件下找到这个环。</p><p>但是，注意这样一点，我们并不能得到 <spanclass="math inline">\(a\)</span> 的值，因为我们甚至都得不到 <spanclass="math inline">\(p\)</span> 的值。</p><p>我们接下来做的都是用 <span class="math inline">\(\bmod n\)</span>的数列，反应 <span class="math inline">\(\bmod p\)</span> 的数列。</p><p>找环的过程可以使用 <span class="math inline">\(a_i,a_{2i}\)</span>看什么呢时候冲突。</p><p>设链长为 <span class="math inline">\(l\)</span>，环长为 <spanclass="math inline">\(m\)</span>。</p><p>显然当 <span class="math inline">\(i=km&gt;l\)</span> 时，<spanclass="math inline">\(a_i=a_{l+(i-l)}=a_{l+(i-l+km)}=a_{i+km}=a_{2i}\)</span></p><p>也就是说，碰撞一定会产生。</p><p>在考虑 <span class="math inline">\(\bmod{p}\)</span>的数列，环和链长均为期望 <span class="math inline">\(\sqrt p\)</span>级别的，并且一定会发生碰撞，那么找到 <spanclass="math inline">\(p\)</span> 的次数，一定是期望 <spanclass="math inline">\(\sqrt p\)</span> 次。</p><p>那么一个复杂度大概为 <span class="math inline">\(\mathcal{O(\log_2n\log n\sqrt p)}\)</span> 的 <spanclass="math inline">\(pollard-\rho\)</span> 算法出现了。</p><hr /><p>考虑在 <span class="math inline">\(a_i,a_{2i}\)</span>找环过程，我们是对每一组 <span class="math inline">\(\mida_i-a_{2i}\mid\)</span> 都和 <span class="math inline">\(n\)</span> 求<span class="math inline">\(\gcd\)</span> 了。</p><p>这让我们有将所有 <span class="math inline">\(\mida_i-a_{2i}\mid\)</span> 乘起来一起做 <spanclass="math inline">\(\gcd\)</span>。</p><p>考虑 <span class="math inline">\(\gcd(a,b)=\gcd(a,b\bmoda)\)</span>，我们可以让 <span class="math inline">\(\mida_{i}-a_{2i}\mid\)</span> 按 <span class="math inline">\(\bmodn\)</span> 乘积。</p><p>那就可以分块，每 <span class="math inline">\(128\)</span>分成一块，看 <spanclass="math inline">\(\gcd\)</span>，这样我们可以认为一次找因数的复杂度被均摊成<span class="math inline">\(\mathcal{O(\sqrt p)}\)</span>。</p><p>如果 <span class="math inline">\(\sqrt p\)</span> 比较小时，<spanclass="math inline">\(128\)</span> 会太大，所以可以考虑倍增。</p><p>复杂度可以认为是 <span class="math inline">\(\mathcal{O(\log_2 n\sqrtp)}\)</span>。由于每次找到因数后 <span class="math inline">\(n\)</span>的最小因数会改变，所以复杂度可能会更优，但是具体怎么证明我不是很会，在具体应用时你可以认为前面那个<span class="math inline">\(\log_2\)</span>因子会十分的小，甚至忽略。</p><p><span class="math inline">\(\mathcal{O(\log_2 n \sqrt p)}\)</span>是期望复杂度上界。</p><hr /><p>实现，边界。</p><ol type="1"><li>如果发现 <span class="math inline">\(a_i=a_{2i}\)</span>立马停止，重新换 <span class="math inline">\(a_0,c\)</span> 重新 <spanclass="math inline">\(pollard-\rho\)</span>。</li><li>如果 <span class="math inline">\(n=4\)</span> 那么 <spanclass="math inline">\(a_i=a_{2i}\)</span>据说不可避免，可以特判掉。</li><li>如果 <span class="math inline">\(n\)</span> 为质数，立马停止。</li></ol><hr /><p>大概代码：</p><p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">nxt</span><span class="hljs-params">(ll a,ll c,ll mod)</span></span>&#123;<br>    ll tmp=mul(a,a,mod)+c;<br>    <span class="hljs-keyword">return</span> tmp&gt;=mod?tmp-mod:tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pollard</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    ll a1=<span class="hljs-number">1ll</span>*rand()*rand()%n,c=<span class="hljs-number">1ll</span>*rand()*rand()%n;<br>    ll a2=a1;<br>    a1=nxt(a1,c,n),a2=nxt(nxt(a2,c,n),c,n);<br>    <span class="hljs-keyword">int</span> lim=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(a1!=a2)&#123;<br>        ll v=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=lim&amp;&amp;a1!=a2;i++,a1=nxt(a1,c,n),a2=nxt(nxt(a2,c,n),c,n))&#123;<br>            ll backv=v;<br>            v=mul(v,<span class="hljs-built_in">abs</span>(a1-a2),n);<br>            <span class="hljs-keyword">if</span>(!v) <span class="hljs-keyword">return</span> gcd(<span class="hljs-built_in">abs</span>(a1-a2),n);<br>        &#125;<br>        ll g=gcd(v,n);<br>        <span class="hljs-keyword">if</span>(g&gt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> g;<br>        <span class="hljs-keyword">if</span>(lim&lt;<span class="hljs-number">128</span>) lim&lt;&lt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pollard(n);<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;ll&gt; f;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">factor</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(prime(n))&#123;<br>        f.push_back(n);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    ll fac=pollard(n);<br>    <span class="hljs-keyword">if</span>(prime(fac))&#123;<br>        f.push_back(fac);<br>        <span class="hljs-keyword">return</span> factor(n/fac);<br>    &#125;<br>    factor(fac);<br>    factor(n/fac);<br>&#125;<br></code></pre></div></td></tr></table></figure></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分解质因数</tag>
      
      <tag>数论</tag>
      
      <tag>miller-rabin</tag>
      
      <tag>pollard-rho</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些想法</title>
    <link href="/2021/08/10/thought-in-8-10/"/>
    <url>/2021/08/10/thought-in-8-10/</url>
    
    <content type="html"><![CDATA[<p>分享一点 OI 相关想法。</p><p>本来打算这篇文章是面向同学，大家写的，可是鄙人实在是文笔不济，想了想，还是以这样一种说闲话的方式写一些吧。</p><span id="more"></span><hr /><p>codeforces memory?</p><h3 id="part-1-rating逆流成河">part 1 rating?逆流成河？</h3><p>我的第一个 codeforces 账号是 <ahref="https://codeforces.com/profile/zkq666">zkq666</a>于将近2年前在西安集训时，注册的。</p><p>当时我还是一个刚初二的菜鸟，几个月前，在佳木斯的时候，大概通过几次小型校内集训，自以为的，道听途说地，单方面自己时有一定的实力。</p><p>而不出所料地在 csp中被JL弱省人吊打，甚至没有拿一等奖。</p><p>在交大附中的宿舍里，我得知了自己是 noip二等奖rank1，当时也是真的很难受，消弭了很长时间，但是当时我也是十分不成熟，消弭的原因不是因为自己实力凹，而只是因为同学拿奖了，我没有。</p><p>当时我的训练计划是机械的，麻木的，只是对着知识点一个个漫无目的的<strong>背诵</strong>,如今我对那是的自己也是十分悔恨，我自认为自己的初一，初二的一年半因为一些主观，客观的原因是白白浪费。</p><p>是因为自己的虚荣心？是因为一些杂七杂八的东西？</p><p>但是相信，”那过去的，就会成为亲切的怀恋“。</p><p>没有那段的颓靡经历，我相信，自己现在或许还没有摸到OI的门路。</p><p>扯远了，学长们在机房做着atcoder,谈论着codeforces。</p><p>就像跟风一样，我也注册了atcoder和codeforces的账号，只不过一次都没有跟着打过。</p><hr /><p>可能是集训后期了，我可能因为上火，发烧了。</p><p>我清晰的记住了cjy讲课的时候，我脑子的混沌。</p><p>我清晰的记住了我和亮老师量体温时发现我39度多时的惊讶。</p><p>我甚至也清晰地记住了那辆接我从学校到武警医院的出租车，以及我在车上手的颤抖，脑子中甚至想着自己会不会就这么挂了（（（</p><p>烧半夜后就退了，我第一次清醒的体会到现代医学完爆流感（然后几个月就COVID19了（（</p><p>和昌老师聊了会，等着针孔边的血液也全凝结后，也就停下来聊天。</p><p>我想，那次是我第一次靠外界使得自己冷静下罢。</p><hr /><p>安然回到长春，在西安的时候，一次偶然吃饭时听ls和hxx说到wc的事了，当时我也因为考的垃圾，还啥也不知道，也就没放在心上。</p><hr /><h3 id="part-2-渡口边的踟蹰">part 2 渡口边的踟蹰</h3><p>COVID19，当时我并未意识到他多么可恨。</p><p>在家重复重复的生活？网课时候看起来说是要”待机“，然后学OI，结果是去颓废。</p><p>当时考了几次 noi-online，自己也是 csp 复仇心切，但也就冲了一次25%。</p><p>疫情期间，我的学习效率时缓慢的，学习方向也没有被即使的拨乱反正，但是那段时光是我最快乐的，最有成就感的。</p><p>包括不限于我做出来我第一个音mad（bgm是断桥残雪），我搭建了一个属于自己的 hexo博客，可能被老师认为是竞赛学的挺好，即”有二等奖水平”的竞赛生。</p><p>但是那段时光的颓废还是我不忍直视的，如果我当时觉悟再高一点，学习方法在科学一点，在真正了解一点OI的局势，或许也可以保留着快乐，也更加高效。</p><p>说实话那段的颓废，也是我初三后期的心结吧。</p><p>我很庆幸我的 blog version 1.0.0 我还留着一个镜像站。</p><p>就在说说省选吧。</p><p>具体可以看镜像站的博客 <ahref="https://phonticas.github.io/2020/06/21/JLOI%E6%B8%B8%E8%AE%B0/">JLOI2020</a>。</p><p>说实话，我没有想到的是当时，我的觉悟已经够高了，只不过没有人给我指引一个正确的方向。可能的当时我和学长交往还只是在于表面吃饭罢。</p><p>我相信，如果初三最后的时候我看到这个博客的话，这个在当时一年前的博客，一定会很怅然，也不会爆发了吧。</p><p>也是在这个时候我的codeforces账号也开了第一场div3，第一次嘛，我也很不适应，看着英文题面，以为必须提交文件，使用着现在看起来蹩脚的devc,对于类似 acm/icpc IOI CF赛制十分不熟悉，不知道该如何调题，不知道rating机制...... and so on</p><p>反正就是很惨了。</p><p>rating 逆流成河。。。</p><hr /><h3 id="part-3-imitator">part 3 Imitator?</h3><p>暑假，ls中考完了，高中生去长沙了，ls成为大哥了。</p><p>看着ls超然于世间的样子，当时的我十分羡慕，我十分向往这样的感觉，可能在当时我的脑海里，初三最后结束，中考英语考完铃响最后就是“羽化登仙”的时候了。</p><p>我开始模仿，我开始学习别人的说话方式，听的歌曲（包括concidance)，开始着力写议论文，玩知乎，等等等。</p><p>我曾傻傻的以为，在这片东北的打雪地里，只要，一步一个脚印踩着前人的足迹，就可以成功。</p><p>另外说一下，和ls出去吃饭，偶然也认识了个隔壁校好朋友qyb了吧。</p><hr /><p>我开始和同学在机房打cf。</p><p>那场div2，我报零了。</p><p>看着同学都开始切了2道题，而我还是两个 wa onpretest2时，我承认，我那时的心态崩了，我做到一半时，我跑了出去，和wrx一起吃了午饭。</p><p>可能那个时候是我最容易心态炸裂吧。</p><p>但是我没有，可能是不甘心承认失败，可能是也没怎么在意？</p><p>我重开了一个cf小号，这个我认为超级明智的决定。</p><p>小号还是十分的成功靠着加分到了 specialist,青名。</p><p>那个暑假，我成长了许多。</p><p>我开始适应了比赛，或许能把一场正式ccf比赛，当成一场大型线下 cf打。</p><p>我开始对中考紧张，这个在我现在看来绝对不是一件完全错的事情。</p><p>我开始了模仿学长基本国策。</p><p><img src="\img\4.png" /></p><hr /><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="\img\5.png" /></div><div class="group-image-wrap"><img src="\img\6.png" /></div></div><div class="group-image-row"><div class="group-image-wrap"><imgsrc="\img\7.png" /></div></div></div><p>当时我就对学习生涯有深入的思考。</p><p>现在看来自己初三阶段真的是太不成熟了。</p><hr /><p>「等到人已不再奔忙，等到心也不再轻狂」</p><hr /><h3 id="part-4-imitator">part 4 Imitator!</h3><p>事情可能是从这时候开始脱离我的预期的。</p><p>初三这年的一些变故，可能真正的脱离我的预期。</p><p>首先好像在一场小号从 pupil -&gt; specialist的第二天，apio我最后一个来，靠着A,B,C仨暴力，拿了个垫底Ag，远远超出了我的预期。</p><p>接下来几个月，我也从 specialist一点一点爬expert甚至到了 candidatemaster。</p><p>「原来在红光的照射下，蓝色校服真的能变成紫色呢」</p><p>这是因为我几乎每天晚上都去青华校区，小门旁警卫室上有个大灯，也不知道怎么回事，有一天我看自己裤子突然就变成紫色了，然后一股恍如隔世的感觉。</p><p>校庆的时候，和wgy混在一群高中生&amp;初中OIer中，大灯一道、照也分不清是蓝是紫。</p><p>一场场cf，一次次紧张地等待着 systemtest，给我带来的增益是明显的。</p><p>另外说一下一个小插曲，学长组织了个校内acm，挺有意思。</p><p>和同班同学syh组了各队，队名是reoreoreoreo（当时看Jojo魔怔了。</p><p>作题做得很开心，抢到了好几个题的首A，最后好像也落rank2 2道题吧。</p><p>很愉快的一次经历。</p><p>说回来，csp 考的烂似乎就是因为 t1，别的分低也就是因为自己菜吧。</p><p>noip似乎没挂分，但是也不是很高的样子，也说明了我和别人的差距。</p><p>总而言之，初三的上学期，日子是美好的，是能听到高中课的，是没有中考的压力的，当时我唯一担心的就只有体育了。</p><p>那段美好的使馆想想也是很短暂，我没有珍惜好呀。</p><p>只有失去了，才知晓曾经的美满。</p><hr /><h3 id="part5-我便化乌有">part5 我便化乌有</h3><p>寒假时，我的一种异样的情绪开始形成。</p><p>期待了很久的 wc搞成了线上，让我十分不能接受，当时我十分想认识南方同学。</p><p>期间我还因为自身情绪，发脾气给 ymD老师，现在我也觉得十分惭愧。</p><p>和lxn谈了谈，聊了聊，尽管大方向时绝对没错的，但是客观上，我的“走极端”的心理还是继续生长。</p><p>还好wc我依靠着加边加边并查集查询！狗到了一个 Ag，当时也是很庆幸。</p><p>但是我的心态从此便走偏了。</p><p>或许是 wc Ag，或者是 cf cm。</p><p>我似乎对自己包邮过高的期望。</p><p>我逐渐开始讨厌学校，文化课。</p><p>同时老师也在强调这 中考的重要，开始面向中考学习/讲课。</p><p>最重大的一件事可能就是我在承受不了不会写议论文，而没和wyx老师商量就投降，皈依记叙文。</p><hr /><p>几次竞赛生会议，听个T的招生老师说了说，我心中便只剩对高中的向往，而这个是建立在我受不了中考模式。</p><hr /><p>体育中考呢，我十分感谢why可以每天陪我跑步，练实心球。</p><p>计时跑完步，和我聊聊天，但我还是觉得当时我自己有点不恰当的优越感，和why的说辞里或许充满了说教意味，也是那个时候，我似乎认为我的生活中只剩下OI了，危险的想法，我甚至放弃了和同班同学交好。。。。</p><p>现在看来这个想法大错特错，而当时似乎还感觉自己有一种优越感，以为生活中只有OI就不会颓了是吗？这显然是不对的！而只是基于我对疫情时候的颓废所反感。</p><p>本来就不成熟的心智被过度自信冲昏了。</p><p>thusc？镇中那次旅游？NOI2021？</p><p>thusc让我第一次看到了学军这样的浙江大学校，虽然只是窥得一面，我个人便喜欢上了杭州这个城市，学军在我心里地位高大了起来。</p><p>NOI前的镇中集训，我也识到浙江的同学的强，他们的努力，镇中OI氛围的好。</p><p>求之不得？求之不得。</p><p>十年饮冰，难凉一腔热血，只不过现在我的思绪早已不在回忆，剩下的或者说更加细节的可能会在不久的将来，等我能在有一个不眠夜的巧境在说吧。</p><p>update 8.11 over。</p><p>我写的很乱，很流水账，各位还是姑妄听之，想D就D吧，因为写的比较晚比较乱，说的不清楚，但这些只能交给之后更强，更加有能力的我来解决，来补充吧，而到目前，我中学的故事也是尾声，如果高中能创造更好的，我也会继续更新的。</p><h3 id="thanks-for-listeningreading">thanks for listening/reading!</h3><p>[]\8.png)</p><p>this is only the cover of the book which is called 'My OIjourney'.</p>]]></content>
    
    
    
    <tags>
      
      <tag>回忆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bzoj5348</title>
    <link href="/2021/08/06/bzoj5348/"/>
    <url>/2021/08/06/bzoj5348/</url>
    
    <content type="html"><![CDATA[<p>题意：</p><p>你有一个随机数生成器，最初给定一个 <span class="math inline">\(0\leqx\leq n-1\)</span> 的整数作为随机种子.</p><p>这个随机数生成器会每次输出 <span class="math inline">\(x\)</span>并将 <span class="math inline">\(x^k \bmod n\)</span> 作为新的 <spanclass="math inline">\(x\)</span>。</p><p>你很快发现这个随机数生成器很渣。为了证明它很渣，你想要求出有多少个随机种子，使得这个随机数生成器会输出初始种子无穷多次。</p><span id="more"></span><p>数据范围：<span class="math inline">\(n,k\leq 10^{18}\)</span>。</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">Sample.in<br>n,k<br>Sample.out<br>ans<br><br>------<br><br>Sample.in<br>10 2<br>Sample.out<br>4<br></code></pre></div></td></tr></table></figure><hr /><p>首先，我们注意这样一个事。</p><p>当 <span class="math inline">\(n\in \text{prime}\)</span>怎么做？</p><p>方程怎么写？</p><p><span class="math display">\[x^{k^t}\equiv x\pmod{n}\]</span></p><p>那么由于无论何时 <spanclass="math inline">\((x,n)=1\)</span>，阶始终存在，所以有：</p><p><span class="math display">\[k^t\equiv 1\pmod{ord_n(x)}\]</span></p><p>也就是说：</p><p><span class="math display">\[\gcd(k,ord_n(x))=1\]</span></p><p>当我们知道阶为多少时，我们显然可以求出这个集合的大小。</p><p>我们现在枚举阶：</p><p><span class="math display">\[\begin{aligned}\sum_{d\mid\phi(n)} \phi(d)[\gcd(d,k)=1]\\\sum_{d\mid \phi(n),\gcd(d,k)=1}\phi(d)\end{aligned}\]</span></p><p>显然我们令 <span class="math inline">\(T\)</span> 为 <spanclass="math inline">\(\phi(n)\)</span> 剔除所有 <spanclass="math inline">\(k\)</span> 因子的结果。</p><p><span class="math inline">\(T\)</span> 的求法可以用以下代码体现：<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(gcd(phi,k)!=<span class="hljs-number">1</span>)&#123;<br>    phi/=gcd(phi,k);<br>&#125;<br></code></pre></div></td></tr></table></figure></p><p>那么此时狮子可化简为：</p><p><span class="math display">\[\begin{aligned}\sum_{d\mid T} \phi(d)=T\end{aligned}\]</span></p><p>这是好的，那么我们有没有办法使得 <span class="math inline">\(n\not\in \text{prime}\)</span> 使用类似方法做呢？</p><p>考虑如果对于 <span class="math inline">\(n\not \in\text{prime}\)</span> 如果我们钦定 <spanclass="math inline">\(\gcd(x,n)=1\)</span>，上述做法依然成立。</p><p>现在问题被这个 <span class="math inline">\(\gcd\)</span>卡住了，那就考虑 <span class="math inline">\(\gcd\)</span>会产生什么厉害东西。</p><p><spanclass="math inline">\(g=\gcd(x,n)\)</span>，我们考虑这样一个事，如果存在<span class="math inline">\(p\)</span>，使得 <spanclass="math inline">\(p^a\mid\mid x,p^b\mid\mid n,a&lt;b\)</span>。</p><p>那么这样 <span class="math inline">\(x^d\)</span>，<spanclass="math inline">\(d\)</span> 足够大时，<spanclass="math inline">\(p^b\mid x^d\)</span>，这样 <spanclass="math inline">\(x^d\)</span> 不可能和 <spanclass="math inline">\(x\)</span> 同余。</p><p>所以 <span class="math inline">\(g,x,n\)</span> 存在关系。</p><p><spanclass="math inline">\(\gcd(g,\frac{n}{g})=1,\gcd(g,\frac{x}{g})=1\)</span>。</p><p>那么设 <span class="math inline">\(x=g\cdot X,n=g\cdot N\)</span></p><p><span class="math display">\[\begin{aligned}x^{k^t}\equiv x\pmod{n}\\(gX)^{k^t}\equiv gX\pmod{gN}\\g^{k^t}X^{k^t}\equiv gX\pmod{gN}\\\end{aligned}\]</span></p><p>等式两边同除 <span class="math inline">\(g\)</span>。</p>$$<span class="math display">\[\begin{aligned}g^{k^t-1}X^{k^t}\equiv X\pmod{N}\\g^{k^t-1}X^{k^t-1}\equiv 1\pmod{N}\\k^t-1\equiv 0\pmod{ord_{N}(gX)}\\k^t\equiv 1\pmod{ord_{N}(gX)}\end{aligned}\]</span><p>$$</p><p>很眼熟是吧。</p><p>由于这个 <span class="math inline">\(gX\)</span>似乎并不那么平凡，我们只能先猜测这个的答案就是上面的答案。</p><hr /><p>也就是猜测 <span class="math inline">\(gX\)</span> 与满足 <spanclass="math inline">\(k^t\equiv1\pmod{ord_{N}(x)}\)</span> 的 <spanclass="math inline">\(x\in[1,N)\)</span> 一一对应。</p><p>显然 <span class="math inline">\(ord_{N}(gX)=ord_N(gX\bmodN),\gcd(gX,N)=1\)</span>，所以每一个 <spanclass="math inline">\(gX\)</span> 能仅对应一个满足的 <spanclass="math inline">\(x\)</span>。</p><hr /><p>接下来考虑 <span class="math inline">\(gX\)</span> 在 <spanclass="math inline">\(\bmod N\)</span> 意义下互不相等。</p><p>反证法：如果 <span class="math inline">\(gA\equiv gB\pmod{N},gA\not\equiv gB\pmod{n}\)</span>，直接产生矛盾。（有关 <spanclass="math inline">\(A\equiv B\pmod{N}\)</span> 的矛盾）</p><hr /><p>接下来考虑是否每一个满足的 <span class="math inline">\(x\)</span>都有一个 <span class="math inline">\(gX\)</span> 与之对应。</p><p>因为 <span class="math inline">\(\gcd(g,N)=1\)</span>显然存在逆元。</p><p><span class="math inline">\(gX\equivx\pmod{N},X=g^{-1}x\pmod{N}\)</span></p><p>显然能够对应。</p><p>所以当 <span class="math inline">\(g\)</span> 确定时，<spanclass="math inline">\(k^t\equiv 1\pmod{ord_{N}(gX)}\)</span> 满足的<span class="math inline">\(gX\)</span> 个数就是上面所说的 <spanclass="math inline">\(x\)</span> 的个数。</p><p>所以我们可以枚举 <spanclass="math inline">\(g\)</span>，从而算出结果。</p><p>复杂度 <spanclass="math inline">\(\mathcal{O(pollard-rho(n)+2^{\omega(n)}\log^2(n))}\)</span></p><p>后面可能是单 <span class="math inline">\(\log\)</span>但问题不大，复杂度瓶颈在于 <spanclass="math inline">\(pollard-rho(n)\)</span>，即分解质因数复杂度。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br><span class="hljs-comment">//从今天开始戒掉#define int long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">mul</span><span class="hljs-params">(ll a,ll b,ll mod)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a&gt;=mod) a%=mod;<br>    <span class="hljs-keyword">if</span>(b&gt;=mod) b%=mod;<br>    ll tmp=a*b-ll((<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)a/mod*b+<span class="hljs-number">0.5</span>)*mod;<br>    <span class="hljs-keyword">return</span> tmp&lt;<span class="hljs-number">0</span>?tmp+mod:tmp;<br>&#125;<br>ll p[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a,ll b,ll mod)</span></span>&#123;<br>    ll k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=mul(k,a,mod);<br>        a=mul(a,a,mod);b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">chk</span><span class="hljs-params">(ll mod,ll p)</span></span>&#123;<br>    ll res=qpow(p,mod<span class="hljs-number">-1</span>,mod);<br>    ll b=mod<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(res!=<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(b%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>        b/=<span class="hljs-number">2</span>;<br>        ll r=qpow(p,b,mod);<br>        <span class="hljs-keyword">if</span>(r==mod<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(r!=<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">prime</span><span class="hljs-params">(ll x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)&#123;<br>        <br>        <span class="hljs-keyword">if</span>(x==p[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(x%p[i]==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(chk(x,p[i])==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//mt19937 rnd(time(0));</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">nxt</span><span class="hljs-params">(ll a,ll c,ll mod)</span></span>&#123;<br>    ll tmp=mul(a,a,mod)+c;<br>    <span class="hljs-keyword">return</span> tmp&gt;=mod?tmp-mod:tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pollard</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    ll a1=<span class="hljs-number">1ll</span>*rand()*rand()%n,c=<span class="hljs-number">1ll</span>*rand()*rand()%n;<br>    ll a2=a1;<br>    a1=nxt(a1,c,n),a2=nxt(nxt(a2,c,n),c,n);<br>    <span class="hljs-keyword">int</span> lim=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(a1!=a2)&#123;<br>        ll v=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=lim&amp;&amp;a1!=a2;i++,a1=nxt(a1,c,n),a2=nxt(nxt(a2,c,n),c,n))&#123;<br>            ll backv=v;<br>            v=mul(v,<span class="hljs-built_in">abs</span>(a1-a2),n);<br>            <span class="hljs-keyword">if</span>(!v) <span class="hljs-keyword">return</span> gcd(<span class="hljs-built_in">abs</span>(a1-a2),n);<br>        &#125;<br>        ll g=gcd(v,n);<br>        <span class="hljs-keyword">if</span>(g&gt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> g;<br>        <span class="hljs-keyword">if</span>(lim&lt;<span class="hljs-number">128</span>) lim&lt;&lt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pollard(n);<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;ll&gt; f;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">factor</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(prime(n))&#123;<br>        f.push_back(n);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    ll fac=pollard(n);<br>    <span class="hljs-keyword">if</span>(prime(fac))&#123;<br>        f.push_back(fac);<br>        <span class="hljs-keyword">return</span> factor(n/fac);<br>    &#125;<br>    factor(fac);<br>    factor(n/fac);<br>&#125;<br>ll n,k;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">getv</span><span class="hljs-params">(ll v,ll ph)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(gcd(ph,k)!=<span class="hljs-number">1</span>)&#123;<br>        ph/=gcd(ph,k);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ph;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;ll&gt; a,b;<br><span class="hljs-keyword">int</span> lim;<br>ll ans;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,ll res,ll ph)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==a.size())&#123;<br>        <span class="hljs-keyword">if</span>(res&gt;<span class="hljs-number">1</span>) ans+=getv(res,ph);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    dfs(n+<span class="hljs-number">1</span>,res,ph);<br>    dfs(n+<span class="hljs-number">1</span>,res*a[n],ph*b[n]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k;<br>    f.clear();<br>    factor(n);<br>    ll N=n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;f.size();i++)&#123;<br>        <span class="hljs-keyword">if</span>(f[i]!=f[i<span class="hljs-number">-1</span>])&#123;<br>            ll res=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(N%f[i<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>) N/=f[i<span class="hljs-number">-1</span>],res=res*f[i<span class="hljs-number">-1</span>];<br>            a.push_back(res);<br>            b.push_back(res/f[i<span class="hljs-number">-1</span>]*(f[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>));<br>        &#125;<br>    &#125;<br>    a.push_back(N);<br>    b.push_back(N/(f.back())*(f.back()<span class="hljs-number">-1</span>));<br>    lim=a.size();<br>    dfs(<span class="hljs-number">0</span>,<span class="hljs-number">1ll</span>,<span class="hljs-number">1ll</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans+<span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>pollard-rho</tag>
      
      <tag>阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arc122D</title>
    <link href="/2021/08/05/arc122E/"/>
    <url>/2021/08/05/arc122E/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><ahref="https://atcoder.jp/contests/arc122/tasks/arc122_e">Link</a></p><h3 id="sol">sol</h3><p>贪心思路显然，我们先把选一定没事的放在后面，接下来化归成子问题。</p><p>什么时候选一定没事，也就是 <span class="math inline">\(a_i\)</span>具有一个质因子 <span class="math inline">\(p\)</span>,使得 <spanclass="math inline">\(p\)</span> 在 <spanclass="math inline">\(a_i\)</span> 中次数最高。</p><p>形式化表示：设 <spanclass="math inline">\(a_i=\prod_{k}p_k^{\alpha_{i,k}}\)</span>。</p><p>那么 <span class="math inline">\(a_i\)</span> 选一定没事，当且仅当存在 <span class="math inline">\(k\)</span> , <spanclass="math inline">\(\forall j\not =i,\alpha_{i,k}&gt;\alpha_{j,k}\)</span>。</p><p>因为 <span class="math inline">\(a_i\)</span>放在后面不会使前面的子问题更劣，所以贪心正确，如果不存在这样的 <spanclass="math inline">\(a_i\)</span> ，说明这个序列 <spanclass="math inline">\(a\)</span>无解，，这里可以反证，考虑最后一个数。</p><p>那么如何判断 <span class="math inline">\(a_i\)</span>是否拥有最大质因子呢？</p><p>考虑对于 <span class="math inline">\(a,b,a=\prodp_i^{\alpha_i}\)</span>, <span class="math inline">\(b=\prodp_i^{\beta_i}\)</span> ,我们想求: <span class="math inline">\(k=\prodp_i^{\alpha_i}(\alpha_i&gt;\beta_i)\)</span>。</p><p>给出一个较简单的方法。</p><p>求出 <span class="math inline">\(\gcd(a,b)\)</span>,我们看 <spanclass="math inline">\(\frac{a}{\gcd(a,b)}\)</span> 有多少因子在 <spanclass="math inline">\(\gcd(a,b)\)</span> 中，那么递归做 <spanclass="math inline">\(\gcd\)</span> 即可。</p><p>可见代码。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> G=gcd(a,b);<br>    a/=G;<br>    <span class="hljs-keyword">int</span> res=a;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">int</span> g=gcd(res,G);<br>        <span class="hljs-keyword">if</span>(g==<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>        G/=g,a*=g;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>有一点值得注意，因为我们相当是把 <spanclass="math inline">\(\gcd(a,b)\)</span> 拆分成 <spanclass="math inline">\(a\)</span> 的因子，<spanclass="math inline">\(b\)</span> 的因子两部分，所以当算出一次 <spanclass="math inline">\(\gcd\)</span> 时要把 <spanclass="math inline">\(G\leftarrow \frac{G}{\gcd}\)</span>.</p><p>全部代码 <ahref="https://atcoder.jp/contests/arc122/submissions/24784163">code</a></p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arc116E</title>
    <link href="/2021/08/04/arc116E/"/>
    <url>/2021/08/04/arc116E/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><ahref="https://atcoder.jp/contests/arc116/tasks/arc116_e">Link</a></p><hr /><h3 id="题解">题解</h3><p>答案显然具有单调性。</p><p>二分，对于 <span class="math inline">\(mid\)</span>我们计算最少需要几个点使得可以全部覆盖整个树。</p><p>我们有一个显然的贪心，对于以 <span class="math inline">\(u\)</span>为跟的子树，我们选 <span class="math inline">\(u\)</span>当且仅当子树内最深的到 <span class="math inline">\(u\)</span>的距离恰好为 <span class="math inline">\(mid\)</span>。</p><p>如何证明？</p><p>考虑如果不是这样，我们找到最深的一个选的 <spanclass="math inline">\(u\)</span> 不满足上述贪心策略。</p><p>跳 <span class="math inline">\(u\)</span> 父亲，显然 <spanclass="math inline">\(fa_u\)</span> 不劣于 <spanclass="math inline">\(u\)</span>。</p><p>考虑 <span class="math inline">\(fa_u\)</span> 能更多照顾到 <spanclass="math inline">\(u\)</span> 子树外的点，而且此时 <spanclass="math inline">\(u\)</span> 子树内依旧合法。</p><hr /><p>有了贪心策略就很简单了。</p><p>我们维护 <span class="math inline">\(a_u\)</span> 表示 <spanclass="math inline">\(u\)</span> 子树内所选的点还能支持多远。</p><p><span class="math inline">\(b_u\)</span> 表示 <spanclass="math inline">\(u\)</span> 子树内不能被覆盖到的点距离 <spanclass="math inline">\(u\)</span> 的距离。注意 <spanclass="math inline">\(u\)</span> 距离 <spanclass="math inline">\(u\)</span> 0个距离。</p><p>考虑 <span class="math inline">\(\min_{(u,v)}{a_v-1}\)</span> 和<span class="math inline">\(\min_{(u,v)}b_v+1\)</span> 关系即可。</p><p>记 <spanclass="math inline">\(p=\min_{(u,v)}a_v-1,q=\min_{(u,v)}b_v+1\)</span></p><ol type="1"><li><p>如果 <span class="math inline">\(p\geq q\)</span> 证明 <spanclass="math inline">\(u\)</span>子树内不能被覆盖的点可以通过其他所选点覆盖。</p><p>此时 <span class="math inline">\(b_u=-1\)</span>,<spanclass="math inline">\(a_u=p\)</span></p></li><li><p>否则如果 <span class="math inline">\(p=mid\)</span>代表必须采取行动选 <span class="math inline">\(u\)</span> 覆盖，此时<span class="math inline">\(b_u=-1,a_u=mid\)</span>。</p></li><li><p>否则，我们不覆盖，但是此时所选点也不会在产生贡献，所以我们可以直接<span class="math inline">\(a_u=0,b_u=q\)</span>。</p></li></ol><p><ahref="https://atcoder.jp/contests/arc116/submissions/24770350">code</a></p><h3 id="吐槽">吐槽</h3><p>at 的题解很奇怪，不是很懂为什么要提到<code>dynamic programming</code>,也不解释 贪心策略。</p><p>这个贪心策略还是很明显的，但是正确性确实需要考虑，而我已经想到这个贪心，但是看到题解没提到贪心，而是放了一个<code>dynamic programming</code> 就觉得自己错了。</p><p>希望这篇博客能帮到你吧。</p>]]></content>
    
    
    <categories>
      
      <category>贪心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary search</tag>
      
      <tag>idea题</tag>
      
      <tag>greedy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arc116D</title>
    <link href="/2021/08/04/arc116D/"/>
    <url>/2021/08/04/arc116D/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://atcoder.jp/contests/arc116/tasks/arc116_d">题意</a>很简洁。</p><p>让你求有多少个长度为 <span class="math inline">\(N\)</span> 的序列<span class="math inline">\(A\)</span>，使得 <spanclass="math inline">\(\sum_{i=1}^{n}A_i=m,\sum_{\oplus}A_i=0\)</span>.</p><span id="more"></span><hr /><p>暴力 dp 效率不高。</p><p>考虑异或的性质，我们本质上时在填一个 <spanclass="math inline">\(n\)</span> 行，<spanclass="math inline">\(\lceil\log_2 m\rceil\)</span> 列的表。</p><p>只需要保证 每一列的 1 的个数符合题意，并且和是正确的即可。</p><p>那么很容易得到 dp: <span class="math display">\[\text{dp}_n(x)=\sum_{k=0,2\mid k}\binom{n}{k}\text{dp}_{n-1}(x-2^nk)\]</span></p><p>假设 <span class="math inline">\(n,m\)</span> 同阶复杂度 <spanclass="math inline">\(\mathcal{O(n^2)}\)</span>。</p><p>可以考虑运算次数：</p><p><span class="math display">\[\sum_{j=1}^{\log_2m}\sum_{i=1}^{m}\min(\frac{i}{2^j},n)\]</span></p><p>若 <span class="math inline">\(n&gt;m\)</span> 那么 <spanclass="math inline">\(\dfrac{i}{2^j}\leq n\)</span>。</p><p>所以原式小于等于</p><p><span class="math display">\[\sum_{j=1}^{\log_2m}\sum_{i=1}^{m}\frac{i}{2^j}=\sum_{j=1}^{\log_2m}\frac{1}{2^j}\sum_{i=1}^{m}i=\sum_{j=1}^{\log_2m}\frac{1}{2^j}m^2=\mathcal{O(m^2)}\]</span></p><p>即 <span class="math inline">\(\mathcal{O(n^2)}\)</span></p><p>代码可见 <ahref="https://atcoder.jp/contests/arc116/submissions/24764368">code</a></p>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>小idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>slope trick/arc123d</title>
    <link href="/2021/08/03/slope-tricks-simple-thoughts/"/>
    <url>/2021/08/03/slope-tricks-simple-thoughts/</url>
    
    <content type="html"><![CDATA[<p>通过 arc123D 讨论一下 <span class="math inline">\(\texttt{slopetrick}\)</span>。</p><span id="more"></span><h3 id="part--1">part -1</h3><p><span class="math inline">\(\text{slope trick}\)</span>顾名思义，并不是斜率优化 dp。</p><h3 id="part-0">part 0</h3><p>我并没有对 <span class="math inline">\(\text{slope trick}\)</span>很深入的理解不具体介绍，只是讲一下 arc123D 的优化技巧。</p><p>待填坑。</p><hr /><h3 id="arc123d">arc123D</h3><p><ahref="https://atcoder.jp/contests/arc123/tasks/arc123_d">link</a></p><p>考虑 <span class="math inline">\(B,C\)</span>两个序列不好一起维护，而且 <spanclass="math inline">\(B_i+C_i=A_i\)</span>，所以直接只维护一个 <spanclass="math inline">\(B\)</span>。</p><p>那么 <span class="math inline">\(B_i\leq B_{i+1}\)</span> 且 <spanclass="math inline">\(C_i=A_i-B_i\geqC_{i+1}=A_{i+1}-B_{i+1}\)</span>.</p><p>所以 <span class="math inline">\(B_i\leq B_{i+1},B_{i}\leqB_{i+1}-(A_{i+1}-A_{i})\)</span>.</p><p>设 <span class="math inline">\(B_i\leq B_{i+1}-D_{i+1}\)</span>。</p><p>那么我们可以进行dp。</p><p><span class="math inline">\(\text{dp}_n(x)\)</span> 表示 <spanclass="math inline">\(B_n=x\)</span> 最小答案。</p><p>枚举上一个显然有转移：</p><p><span class="math display">\[\text{dp}_{n}(x)=\min _{j\leqx-D_{n}}\text{dp}_{n-1}(j)+\mid x\mid+\mid A_n-x\mid\]</span></p><p>发现这本质上是一个前缀最小，加上一个下凸函数 <spanclass="math inline">\(\mid x\mid+\mid A_n-x\mid\)</span>。</p><p>所以 <span class="math inline">\(\text{dp}_n(x)\)</span>的函数图像也为下凸。</p><p>关键的来了每次加上的 <span class="math inline">\(\mid x\mid+\midA_n-x\mid\)</span> 的斜率仅仅为 <spanclass="math inline">\(2\)</span>。</p><p>这给我们提供了一个有利条件，最终函数图像是下凸，函数图像被一些整点分割成一段段直线，分割点个数级别是<span class="math inline">\(n\)</span> 的。</p><p>考虑每一次转移可以被拆分成：平移x坐标，推平最后斜率大于0的，转移即添加4个斜率变化关键点（考虑斜率为2，保证斜率连续）。</p><p>具体实现注意，<span class="math inline">\(x\)</span> 坐标和 <spanclass="math inline">\(slope\)</span> 都是单调的，所以只需要维护 <spanclass="math inline">\(x\)</span>坐标即可，剩下的就是一个全局加，单点插入的经典题。</p><p>答案即为最后函数 <span class="math inline">\(slope=0\)</span>的那段函数值。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">1000</span>;<br><span class="hljs-keyword">int</span> a[N],n;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e10</span>;<br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    <span class="hljs-keyword">int</span> lv=<span class="hljs-number">0</span>,ls=<span class="hljs-number">0</span>,add=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> pre=-inf;<br>        ls=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span>(!q.empty()&amp;&amp;ls&gt;<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span>(pre!=-inf)&#123;<br>                lv-=(pre-q.top())*ls;<br>            &#125;<br>            pre=q.top();<br>            ls--;q.pop();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>) add+=max(<span class="hljs-number">0ll</span>,a[i]-a[i<span class="hljs-number">-1</span>]);<br>        <span class="hljs-keyword">int</span> x1=-add,x2=a[i]-add;<br>        q.push(x1),q.push(x1);<br>        q.push(x2),q.push(x2);<br>        <span class="hljs-keyword">int</span> x=q.top()+add;<br>        lv=lv+<span class="hljs-built_in">abs</span>(x)+<span class="hljs-built_in">abs</span>(x-a[i]);<br>    &#125;    <br>    <span class="hljs-keyword">int</span> pre=-inf;<br>    ls=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty()&amp;&amp;ls&gt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span>(pre!=-inf)&#123;<br>            lv-=(pre-q.top())*ls;<br>        &#125;<br>       pre=q.top();<br>        ls--;q.pop();<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;lv;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr /><p>回看这篇题解，实际上感觉还是很有误导性的。。。</p><p>这里说一下我现在对 slope trick 的理解。</p><h3 id="凸性的推导">凸性的推导</h3><p>这样的 dp方程我们不是很能一眼看出凸性，甚至只看方程不看初值的情况下，有的根本没凸性。</p><p>所以关于凸性的推到，应该从初值看起，然后用类似数学归纳的方法总结。</p><p>主要就是凸函数+凸函数结果还是凸函数，在这里凸函数是斜率不增/不降的分段函数。</p><h3 id="维护的大体方式">维护的大体方式</h3><p>我们记录这个分段函数<strong>断点</strong>，规定每一段斜率改变值为1，同时维护一端的函数（最右端，最左端）（<spanclass="math inline">\(kx+b\)</span>）。</p><p>我们对斜率是小正整数要求是硬性的，因为只有这样才能容易维护关键点集合。</p>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>simple thoughts</tag>
      
      <tag>dp</tag>
      
      <tag>slope trick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>edu112</title>
    <link href="/2021/07/31/cf-round-edu112/"/>
    <url>/2021/07/31/cf-round-edu112/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1555">Links</a></p><span id="more"></span><h3 id="a"><ahref="https://codeforces.com/contest/1555/problem/A">A</a></h3><p>憨憨题，6,8,10的性价比都一样，奇数铁不行，只能用偶数。</p><p>偶数就直接除2。随便组合就行。特判 2,4即可。</p><hr /><h3 id="b"><ahref="https://codeforces.com/contest/1555/problem/B">B</a></h3><p>憨憨题，发现直接沿着 x 轴，y 轴平移即可。</p><p>新的矩形只能放在四角，判一判平移会不会出界即可。</p><hr /><h3 id="c"><ahref="https://codeforces.com/contest/1555/problem/C">C</a></h3><p>憨憨题，Alice只能选择一个 <span class="math inline">\((1,y)\)</span>向下走到 <span class="math inline">\((2,y)\)</span>。</p><p>所以 Bob 能走的是 <spanclass="math inline">\(\max(suf_{y+1},pre_{y-1})\)</span>。</p><p>模拟即可。</p><hr /><h3 id="d"><ahref="https://codeforces.com/contest/1555/problem/D">D</a></h3><p>憨憨题，发现因为字符集大小为 3，合法串只可能长成 <spanclass="math inline">\(\texttt{abcabcabc}\cdots\texttt{abc}\)</span>的样子，所以直接就枚举字符集全排列，判一判就好了。</p><p>前缀和模拟即可，复杂度 <spanclass="math inline">\(\mathcal{O(6n)}\)</span></p><hr /><h3 id="e"><ahref="https://codeforces.com/contest/1555/problem/E">E</a></h3><p>发现这个1与n联通等价于把选出的 segment +1，看是不是全大于0.</p><p>然后最大减最小尽可能小？</p><p>我会 binary search 发现 <span class="math inline">\(m\leq10^6\)</span> 好像不大行。</p><p>那我会 two pointers!​</p><p>先按 <span class="math inline">\(w\)</span>排序，显然，枚举右端点，看此时合法到哪里，移动左端点。</p><p>正确性显然。</p><p>复杂度：<span class="math inline">\(\mathcal{O(n\logm)}\)</span>。</p><p><del>憨憨题考试都做不对，呜呜呜</del></p><hr /><h3 id="f"><ahref="https://codeforces.com/contest/1555/problem/F">F</a></h3><p>憨憨DS，睡了一觉就会了。（其实考试时都没看到，充分说明自己菜）</p><p>如何快速看一个边合不合法？</p><p>如果存在套环的情况，考虑对于对于环 <spanclass="math inline">\(c_1,c_2\)</span> 。</p><p>一个最大的边的子集 <span class="math inline">\(s\)</span>​​，如果<span class="math inline">\(s\subset c_1,s\subsetc_2\)</span>​。那么 <span class="math inline">\(c_1,c_2\)</span>​​的异或都为一，并且<span class="math inline">\(c_1\)</span>​​ 并 <spanclass="math inline">\(c_2\)</span>​​ 去除 <spanclass="math inline">\(s\)</span>​​ 的简单回路异或就为 <spanclass="math inline">\(0\)</span> 不合法。</p><p>所以不可能存在套环的情况。</p><p>这就提示我们这玩意是个边仙人掌。</p><p>直接考虑树。</p><p>如果是一条连接一颗树上的两个节点的边，那么首先判断是否路径上的边都不在任意一个连通块内。</p><p>然后再看新形成的一个环的 <spanclass="math inline">\(\texttt{xor}\)</span> 是否为1。</p><p>如果是一条连接两个连通块的边，一定行。</p><p>LCT （le ci te） 不好写，嘤嘤嘤。</p><p>离线把最终的树建出，考虑对树的形态产生影响的边只有连接连通块的边，用并查集维护即可。</p><p>然后随便剖一剖就好了。</p><p>复杂度 <span class="math inline">\(\mathcal{O(q\log^2n)}\)</span>大概率比 LCT 快吧（（（（。</p>]]></content>
    
    
    <categories>
      
      <category>whole round</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cf1550D excellent arrays</title>
    <link href="/2021/07/31/cf1550D/"/>
    <url>/2021/07/31/cf1550D/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1550/problem/D">Link</a></p><span id="more"></span><hr /><h3 id="题解">题解</h3><p>首先我们观察如果 <spanclass="math inline">\(a_i+a_j=i+j\)</span>,那么 <spanclass="math inline">\(a_i-i=-(a_j-j)\)</span>。</p><p>那么我么定义一个属性值 <spanclass="math inline">\(v_i=a_i-i\)</span>。</p><p>那么 <spanclass="math inline">\(v_i\in\{d,-d\}\)</span>,肯定是最优的。</p><p>问题转化为我们选 <spanclass="math inline">\(\lfloor{\dfrac{n}{2}}\rfloor\)</span> 个 <spanclass="math inline">\(d\)</span>，选 <spanclass="math inline">\(\lceil{\dfrac{n}{2}}\rceil\)</span> 个 <spanclass="math inline">\(-d\)</span> 作为 <spanclass="math inline">\(v_i\)</span>。</p><p>然后 <span class="math inline">\(l\leq a_i=i+v_i\leq r\)</span>。</p><p>然后我们肯定可以确定出最小的的可以 <spanclass="math inline">\(-d\)</span> 的，记作 <spanclass="math inline">\(a\)</span>；最大的可以 <spanclass="math inline">\(+d\)</span> 的，记作 <spanclass="math inline">\(b\)</span>。</p><p>接下来我找到了两种方法。</p><ol type="1"><li><p>这个是我翻<a href="https://codeforces.com/profile/jiangly"><spanclass="math inline">\(\color{black}j\color{red}iangly\)</span></a>的代码，得出的答案。</p><p>我们直接枚举 <spanclass="math inline">\(d\in[1,\infty]\)</span>,然后确定出 <spanclass="math inline">\(a,b\)</span> 的区间范围。</p><p><span class="math inline">\(a=l+d,b=r-d\)</span>。</p><p>然后我们可以确定出 <span class="math inline">\(i\in[1,a)\)</span>必须要 <span class="math inline">\(+d\)</span> , <spanclass="math inline">\(i\in(b,n]\)</span>，必须要 <spanclass="math inline">\(-d\)</span>。</p><p>然后可以选的区间为 <span class="math inline">\([a,b]\)</span>，然后需要 <spanclass="math inline">\(\lfloor\frac{n}{2}\rfloor\)</span>,<spanclass="math inline">\(\lceil\frac{n}{2}\rceil\)</span> <spanclass="math inline">\(-a\)</span> 个 <spanclass="math inline">\(+d\)</span> 的。</p><p>考虑这个 <span class="math inline">\(d\)</span>​ 枚举状态高达 <spanclass="math inline">\(2\times 10^9\)</span>​ ,<spanclass="math inline">\(\mathcal{\color{gold}TLE}\)</span>​。</p><p>发现当 <span class="math inline">\(d\in[1,\min(1-l,r-n)]\)</span>时，可以取满 <span class="math inline">\(\binom{n}{n/2}\)</span>。</p><p>然后就剩 <spanclass="math inline">\(d\in(\min(1-l,r-n),\min(1-l,r-n)+n]\)</span>。</p><p>显然复杂度为 <spanclass="math inline">\(\mathcal{O(n)}\)</span></p></li><li><p>这个是我的做法</p><p>我们可以枚举 <span class="math inline">\(a,b\)</span>,即上文提到的<span class="math inline">\(a,b\)</span>。</p><p>现在我们可以反向确定 <span class="math inline">\(d\)</span>。</p><p><span class="math inline">\(d\in[1,\min(a-l,r-b)\)</span>]。</p><p><span class="math display">\[ans\leftarrow\binom{b-a-1}{\lfloor\frac{n}{2}\rfloor-a}\]</span>​​</p><p>也就是枚举 <span class="math inline">\(a,b\)</span>​。</p><p><span class="math display">\[ans=\sum_{a=1}^{n}\sum_{b=a+1}^{n}\min(a-l,r-b)\binom{b-a-1}{\lfloor\frac{n}{2}\rfloor-a}\]</span></p><p>拆 <span class="math inline">\(\min\)</span>​,直接看后面。 <spanclass="math display">\[ans=\sum_{a}\sum_{b}(a-l)\binom{b-a-1}{\lfloor\frac{n}{2}\rfloor-a}+\sum_{a}\sum_{b}(r-b)\binom{b-a-1}{\lfloor\frac{n}{2}\rfloor-a}\]</span> <span class="math inline">\(a,b\)</span>范围不写了，没什么必要了。</p><p>现在只需要我们能快速求出 <spanclass="math inline">\(\sum_{i}\binom{i}{n}\)</span> 和 <spanclass="math inline">\(\sum_{i}i\binom{i}{n}\)</span> 即可。</p><p><span class="math inline">\(\sum_{i}\binom{i}{n}\)</span>是个经典问题。</p><p><span class="math inline">\(\sum_{i}i\binom{i}{n}\)</span> 等价于求<spanclass="math inline">\(\sum_{i}(i+1)\binom{i}{n}=\sum_{i}\frac{1}{n+1}\binom{i+1}{n+1}=\frac{1}{n+1}\sum_{i}\binom{i+1}{n+1}\)</span>​。​​也是经典问题。</p><p>done.</p><p><ahref="https://codeforces.com/contest/1550/submission/122579785">code</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>combination</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1515F &amp; cf1515G</title>
    <link href="/2021/06/15/cf1515F-G/"/>
    <url>/2021/06/15/cf1515F-G/</url>
    
    <content type="html"><![CDATA[<h2 id="cf-1515f">cf 1515F</h2><h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1515/problem/F">Link</a></p><span id="more"></span><h3 id="题解">题解</h3><p>考场时候没时间想了，毕竟D 耽误了我 1h+ 只是因为 <code>while</code>打成了 <code>if</code> 。。。</p><p>首先这个题比较神奇的地方应该是他除了 <span class="math inline">\(\suma_i&lt;(n-1)x\)</span> 其余情况都有解。</p><p>我胡一个证明吧。</p><p>也就是证明 <span class="math inline">\(sum \ge (n-1)x\)</span>必然有解。</p><ul><li><p>归纳法，n=1时候显然成立，下面就是证明 <spanclass="math inline">\(n=t\)</span> 可以转移到 <spanclass="math inline">\(n=t-1\)</span> 的状态。</p></li><li><p>首先如果存在 <span class="math inline">\(a_i\ge x\)</span>,那么<span class="math inline">\(i\)</span> 随便连都满足。</p></li><li><p>否则 <span class="math inline">\(\forall a_i&lt;x\)</span>,如果不存在 <span class="math inline">\(a_i+a_j\gex\)</span>，那么<spanclass="math inline">\(\sum_{i=1}^{n-2}a_i&lt;(n-2)x,a_n+a_{n-1}&lt;x\)</span></p><p>所以 <span class="math inline">\(\sum_{i=1}^{n}a_i&lt;(n-1)x\)</span>矛盾，所以一定存在 <span class="math inline">\(a_i+a_j\gex\)</span>。</p></li></ul><hr /><p>注意这样的一点，设 <span class="math inline">\(a_{max}\)</span>为最大的 <span class="math inline">\(a_i\)</span>。</p><p>如果 <spanclass="math inline">\(a_{max}+a_i&lt;x\)</span>，那么不管别的怎么组合，想要救这个<span class="math inline">\(a_i\)</span> 都不可能了。</p><p>因为 <span class="math inline">\(a_{max}&lt;x\)</span>,每一个 <spanclass="math inline">\(a_i&lt;x\)</span> ,合并对于每一个 <spanclass="math inline">\(a_i\)</span> 都是劣的。</p><p>再根据上面那个结论，所以要是有解，我 <spanclass="math inline">\(a_{max}\)</span> 想和谁合并都可以合并。</p><hr /><p>这样我们有了一个做法，维护 <spanclass="math inline">\(a_{max}\)</span> 以及每一个<spanclass="math inline">\(i\)</span> 能到达的所有点集 。</p><p>每次找出 <span class="math inline">\(a_{max}\)</span>并且在他属于的那个点集中，随机找一个不在他这个连通块中的。启发式合并。</p><div class="note note-info">            <p>Tips:</p><p>注意 vector 的 clear不能释放内存！！而deque的pop_back似乎能释放内存。</p><p>一定要启发式合并，不要瞎 yy，以为是均摊的。</p><p>能到达的点集肯定是有不合法的（已经联通的），注意处理这个地方的逻辑，一定不要图省事。</p>          </div><h3 id="参考代码">参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,x,w;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">3e5</span>+<span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> fa[N];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> val[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==fa[x]) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> fa[x]=gt(fa[x]);<br>&#125;<span class="hljs-comment">// 并查集</span><br><span class="hljs-keyword">int</span> a[N];<br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>,<span class="hljs-keyword">int</span>&gt; &gt;q;<br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt;v[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    val[x]=val[x]+val[y]-w;<br>    <span class="hljs-keyword">if</span>(v[x].size()&lt;v[y].size()) swap(v[x],v[y]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> d:v[y])  v[x].push_back(d);<br>    <span class="hljs-keyword">while</span>(!v[y].empty()) v[y].pop_back();<br>    fa[y]=x;<br>&#125;<span class="hljs-comment">//启发式合并 deque</span><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;x;w=x;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i],sum+=<span class="hljs-number">1ll</span>*a[i];<br>    <span class="hljs-keyword">if</span>(sum&lt;<span class="hljs-number">1ll</span>*(n<span class="hljs-number">-1</span>)*x) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>,<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 判断无解</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) fa[i]=i,val[i]=a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>        v[x].push_back(<span class="hljs-built_in">make_pair</span>(y,i));<br>        v[y].push_back(<span class="hljs-built_in">make_pair</span>(x,i));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        q.push(<span class="hljs-built_in">make_pair</span>(val[i],i));<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ii=<span class="hljs-number">1</span>;ii&lt;n;ii++)&#123;<br>        <span class="hljs-keyword">int</span> i=q.top().second,id=gt(i);q.pop();<br>        <span class="hljs-comment">// 取出最大值，当然我们只在并查集根节点出统计即可。</span><br>        <span class="hljs-keyword">if</span>(i!=id) &#123;ii--;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; y=v[id].back();<br>        v[id].pop_back();<br>        <span class="hljs-keyword">if</span>(id==gt(y.first))&#123;<span class="hljs-comment">// 处理不合法。</span><br>            <span class="hljs-keyword">while</span>(gt(v[id].back().first)==id) v[id].pop_back();<br>            y=v[id].back();<br>            v[id].pop_back();<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;y.second&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        merge(gt(i),gt(y.first));<br>        q.push(<span class="hljs-built_in">make_pair</span>(val[gt(i)],gt(i)));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr /><hr /><hr /><h2 id="cf-1515g">cf 1515G</h2><h3 id="题意-1">题意</h3><p><ahref="https://codeforces.com/problemset/problem/1515/G">Link</a></p><h3 id="题解-1">题解</h3><p>首先注意，我们不管咋走最后都要回到这个点。</p><p>所以我们走的一定是一个回路，可以是不简单回路。</p><p>所以以下讨论都在一个 scc 中讨论。(毕竟一个环必然是一个scc，同时如果这个点不在scc中，他只可能权值为0)。</p><h4 id="lemma-1">Lemma 1</h4><p>不管 <span class="math inline">\(\bmod\)</span> 什么，如果从 <spanclass="math inline">\(A\rightarrow B\)</span> 有一条权值和为 <spanclass="math inline">\(x\)</span> 的路径，一定存在一条从 <spanclass="math inline">\(B\rightarrow A\)</span> 权值为 <spanclass="math inline">\(-x\)</span> 的路径。</p><p>由于是scc，设 <span class="math inline">\(B\rightarrow A\)</span>之间有一条权值为 <span class="math inline">\(y\)</span> 的路径。（<spanclass="math inline">\(y\)</span> 具体是什么并不重要）</p><p>假设当前 <span class="math inline">\(\bmod m\)</span>，我们从 <spanclass="math inline">\(B\)</span> 开始，在 <spanclass="math inline">\(A,B\)</span> 之间往复走 <spanclass="math inline">\(m-1\)</span> 次，最后一次到 <spanclass="math inline">\(A\)</span>。</p><p>此时权值和为 <span class="math inline">\((m-1)(x+y)+y \equiv(m-1)x\equiv -x\bmod m\)</span>。</p><p>qed</p><hr /><p>所以我们现在可以神不知鬼不觉地从 <spanclass="math inline">\(A\)</span> 跑到任意一个 <spanclass="math inline">\(B\)</span> ，然后在 <spanclass="math inline">\(B\)</span>那里随便走几个圈，然后神不知鬼不觉地回来。</p><p>（因为 <span class="math inline">\(A\rightarrow B\)</span> 权值为<span class="math inline">\(x\)</span>,存在 <spanclass="math inline">\(B\rightarrow A\)</span> 权值为 <spanclass="math inline">\(-x\)</span>，这么一来一回相当于，中间的具体从<span class="math inline">\(A\)</span> 到 <spanclass="math inline">\(B\)</span> 怎么走的不用管了。</p><p>那么我们现在能走出的圈的权值，只可能是所有简单圈的权值，通过线性运算得出的权值。</p><p>由于裴蜀定理，现在能表示出的圈的权值，都是 <spanclass="math inline">\(\gcd(l_1,l_2,\cdots,l_k)\)</span> 的倍数。<spanclass="math inline">\(l_i\)</span> 表示简单环的长度。</p><p>怎么找到所有简单环也是个问题。</p><p>建出dfs 树后，一条非树边连接的 <spanclass="math inline">\((u,v,w)\)</span> 产生了一个权值为 <spanclass="math inline">\(dep_u+w-dep_v\)</span> 的环。</p><p>这还不够，因为还存在两条非树边产生的环。但冷静思考一下，这个环的长度可以用两个非树边连接的环长度和表示。</p><p><img src="/img/2.png" /></p><p>如图所示，红色可以由蓝色，绿色相加而得，注意边的正反。</p><p>由于我们一直强调的线性表示，所以在 <spanclass="math inline">\(\gcd\)</span>的角度下，蓝色和绿色在一起等价于红色。</p><p>我们只要算有一条非树边产生的环的 <spanclass="math inline">\(\gcd\)</span> 即可。</p><p><span class="math inline">\(Code\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">1000</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt; v[N],e[N];<br><span class="hljs-keyword">int</span> cnt,col[N],dfn[N],low[N],c;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt;s;<span class="hljs-keyword">bool</span> vis[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    dfn[x]=low[x]=++cnt;<br>    s.push(x);vis[x]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first;<br>        <span class="hljs-keyword">if</span>(dfn[y]==<span class="hljs-number">0</span>)&#123;<br>            tarjan(y);low[x]=min(low[x],low[y]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vis[y]) low[x]=min(low[x],dfn[y]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(low[x]==dfn[x])&#123;<br>        <span class="hljs-keyword">int</span> y=<span class="hljs-number">-1</span>;c++;<br>        <span class="hljs-keyword">while</span>(y!=x)&#123;<br>            y=s.top();s.pop();<br>            col[y]=c;vis[y]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 以上为tarjan</span><br><span class="hljs-keyword">int</span> dep[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br><span class="hljs-keyword">int</span> g[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    vis[x]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;e[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=e[x][i].first;<br>        <span class="hljs-keyword">if</span>(vis[y])&#123;<br>            g[col[x]]=gcd(g[col[x]],dep[x]+e[x][i].second-dep[y]);<br>        &#125;   <br>        <span class="hljs-keyword">else</span> &#123;<br>            dep[y]=dep[x]+e[x][i].second;<br>            work(y);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> q,a,b,u;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,w;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;w;<br>        v[x].push_back(<span class="hljs-built_in">make_pair</span>(y,w));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">if</span>(!dfn[i]) tarjan(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;v[i].size();j++)&#123;<br>            <span class="hljs-keyword">int</span> k=v[i][j].first;<br>            <span class="hljs-keyword">if</span>(col[i]==col[k]) e[i].push_back(v[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 以上为tarjan</span><br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(vis[i]==<span class="hljs-number">0</span>) work(i);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;q;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;u&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">0</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[col[u]]==<span class="hljs-number">0</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            a=b-a;<br>            <span class="hljs-keyword">if</span>(a%gcd(g[col[u]],b)!=<span class="hljs-number">0</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>        &#125;       <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小idea</tag>
      
      <tag>dsu</tag>
      
      <tag>加边加边并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arc122D</title>
    <link href="/2021/06/13/arc122D/"/>
    <url>/2021/06/13/arc122D/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><ahref="https://atcoder.jp/contests/arc122/tasks/arc122_d">Link</a></p><span id="more"></span><h3 id="题解">题解</h3><h4 id="hint1">hint1</h4><p>考虑权值 <span class="math inline">\(v\)</span> 的合法性。</p><p>如果 <code>Alice</code> 任意选一个 <spanclass="math inline">\(a_i\)</span> ,<code>Bob</code> 都有一个对策 <spanclass="math inline">\(a_j\)</span>, <span class="math inline">\(s.t. \a_i\operatorname{xor} a_j\leq v\)</span>，那么 <spanclass="math inline">\(v\)</span> 就是合法的。</p><h4 id="hint2">hint2</h4><p>想要让 <span class="math inline">\(v\)</span>尽可能大，所以从二进制的高位到低位依次考虑。</p><h4 id="solution">solution</h4><p>建出全局的 trie.</p><ol type="1"><li><p>对于第 <span class="math inline">\(x\)</span> 位（当前最高位），如果是该位是 <span class="math inline">\(0\)</span> 的数的个数与是<span class="math inline">\(1\)</span> 的数的个数都是偶数，</p><p>那么 <code>Bob</code> 完全可以当 <code>Alice</code> 选一个这位是<code>0</code> 的数时，也选另一个该位为<code>0</code>的数；选该位为<code>1</code>的数时候也选另一个该位为<code>1</code>的数，从而使这位<span class="math inline">\(\operatorname{xor}\)</span>都为<code>0</code>。</p><p>问题变成了两个子问题，相当于在 <code>trie</code> 从节点 <spanclass="math inline">\(u\)</span> 的问题 ，化归到 <spanclass="math inline">\(x\)</span> 的两个儿子的独立问题。</p></li><li><p>否则，我们必须选择一个该位为 <spanclass="math inline">\(0\)</span>,一个该位为 <spanclass="math inline">\(1\)</span> 的数。然后问题变为上述情况。</p><p>注意如果变成上述情况，该位 <spanclass="math inline">\(\operatorname{xor}\)</span> 只能为 <spanclass="math inline">\(0\)</span>，而如果选择一个该位为 <spanclass="math inline">\(0\)</span>,一个该位为 <spanclass="math inline">\(1\)</span> 的数，那么此位 <spanclass="math inline">\(\operatorname{xor}\)</span> 就是 <spanclass="math inline">\(1\)</span>，由于是最高位，显然 <spanclass="math inline">\(1\)</span> 更优。</p><p>这时，问题转化为要在两个集合 <spanclass="math inline">\(S_1,S_2\)</span> 中选 <spanclass="math inline">\(x\in S_1\)</span>,使得 <spanclass="math inline">\(\min_{y\in S_2}{x\operatorname{xor}y}\)</span>最大。</p><p>我们可以一个一个插入trie中，在另一个集合一个一个查询 <spanclass="math inline">\(\min\)</span> 然后再取<spanclass="math inline">\(\max\)</span>。</p></li></ol><p>注意我们分治是保证了 <span class="math inline">\(\sum size=n\)</span>一定。</p><p>然后情况2，的复杂度是 <spanclass="math inline">\(\mathcal{O(size\times T)}\)</span>。</p><p>所以均摊下来是 <spanclass="math inline">\(\mathcal{O(nT)}\)</span></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>局部最小值</title>
    <link href="/2021/06/03/cqoi2012-partial-minimum/"/>
    <url>/2021/06/03/cqoi2012-partial-minimum/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3160">Link</a></p><p>有意思的 <span class="math inline">\(dp\)</span>。</p><span id="more"></span><hr /><p>首先不难想到把 <span class="math inline">\(X\)</span>与周围建出偏序关系的 <spanclass="math inline">\(dag\)</span>，转化出来的问题大概是问你这个 <spanclass="math inline">\(dag\)</span> 有多少种拓扑序。</p><p>但是你会发现，你给定 <span class="math inline">\(dag\)</span>的拓扑序有可能 “夹带私货”。</p><p>就是体现不出来 . 与周围的关系，可能存在某个 .在你给定的拓扑序中其实是 <span class="math inline">\(X\)</span>。</p><p>这个很好办，容斥即可。</p><hr /><p>那么你怎么算给定的 <span class="math inline">\(dag\)</span>的拓扑序呢？</p><p>发现这个 <span class="math inline">\(dag\)</span>只有两层，一层入度为 0，而这层入度为 0的就是那些 <spanclass="math inline">\(X\)</span> ，考虑合法情况 <spanclass="math inline">\(X\)</span> 最多有 8个。</p><p>不妨设 <span class="math inline">\(num\)</span> 为 <spanclass="math inline">\(X\)</span> 的个数，现在问题似乎变成了：把剩下的<span class="math inline">\(nm-num\)</span>个点（出度为0）<strong>合法地</strong>插入这 <spanclass="math inline">\(num\)</span> 数”前后左右“。</p><p>设剩下的点其中一个为 <span class="math inline">\(x\)</span>。</p><p><span class="math inline">\(x\)</span> 要是想插入，那么所有 <spanclass="math inline">\((u,v)\)</span> 的 <spanclass="math inline">\(u\)</span> 必须已经被插入。</p><p><span class="math inline">\(num\leq 8\)</span>,<spanclass="math inline">\(num\)</span> 很小，我们就状压 <spanclass="math inline">\(num\)</span> 。</p><p>设 <span class="math inline">\(f_{s,x}\)</span> 表示,当前那 <spanclass="math inline">\(num\)</span> 个数的状态为 <spanclass="math inline">\(s\)</span>，剩下有 <spanclass="math inline">\(x\)</span> 个自由的，出度为0的，可以插入的点。</p><p>注意以下 <span class="math inline">\(dp\)</span> 方程默认从 <spanclass="math inline">\(f_{s,x}\)</span> 转移出去。</p><p><span class="math display">\[\large f_{s,u}\leftarrowf_{s,u}+\binom{x}{u}(x-u)! f_{s,x} (u\leq x)\]</span></p><p><span class="math display">\[\large f_{s|point(j),x+add}\leftarrowf_{s|point(j),x+add}+f_{s,x}\ (point(j)\not \subset s)\]</span></p><p>第一个表示，从剩下 <span class="math inline">\(x\)</span>个自由的点中选 <span class="math inline">\(x-u\)</span> 个，然后把这<span class="math inline">\(x-u\)</span> 个全排列插入序列尾。</p><p>第二个表示，选一个没选过的 <spanclass="math inline">\(point(j)\)</span> ,然后能新选 <spanclass="math inline">\(add\)</span> 个自由点，这个 <spanclass="math inline">\(add\)</span> 可以转移时计算。</p><hr /><p><span class="math inline">\(dp\)</span>想怎么写就可以怎么写了，根据你状压的写法。</p><p>剩下的就只有一个 <span class="math inline">\(dfs\)</span> 枚举选的<span class="math inline">\(X\)</span> 的点，然后容斥算一下即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,vd;<br><span class="hljs-keyword">char</span> c[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-keyword">bool</span> vs[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt;r;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">6</span>][<span class="hljs-number">9</span>];<br><span class="hljs-keyword">int</span> dx[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> dy[]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">8</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(v[dx[i]+x][dy[i]+y]==<span class="hljs-number">0</span>&amp;&amp;c[dx[i]+x][dy[i]+y]) vd--;<br>        v[dx[i]+x][dy[i]+y]++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cls</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">8</span>;i++)&#123;<br>        v[dx[i]+x][dy[i]+y]--;<br>        <span class="hljs-keyword">if</span>(v[dx[i]+x][dy[i]+y]==<span class="hljs-number">0</span>&amp;&amp;c[dx[i]+x][dy[i]+y]) vd++;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-comment">////////////////////////////////////// dp begin</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; b[<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getnum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(x)&#123;<br>        x-=(x)&amp;(-x);<br>        res++;<br>    &#125;<span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">260</span>][<span class="hljs-number">30</span>];<span class="hljs-keyword">int</span> p[<span class="hljs-number">6</span>][<span class="hljs-number">9</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">12345678</span>;<span class="hljs-keyword">int</span> f[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> comb[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<span class="hljs-built_in">memset</span>(p,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(p));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;r.size();i++)&#123;<br>        <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; x=r[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">8</span>;k++)&#123;<br>            p[x.first+dx[k]][x.second+dy[k]]|=(<span class="hljs-number">1</span>&lt;&lt;i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> av=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) <span class="hljs-keyword">if</span>(v[i][j]==<span class="hljs-number">0</span>) av++;<br>    dp[<span class="hljs-number">0</span>][av]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=r.size();i++) b[i].clear();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=(<span class="hljs-number">1</span>&lt;&lt;r.size())<span class="hljs-number">-1</span>;i++)&#123;<br>        b[getnum(i)].push_back(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=r.size();i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> s:b[i])&#123;<span class="hljs-comment">//status</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=n*m-r.size();j++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;j;k++)&#123;<br>                    dp[s][k]+=<span class="hljs-number">1ll</span>*dp[s][j]*f[j-k]%mod*comb[j][k]%mod;<br>                    dp[s][k]%=mod;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;r.size();j++)&#123;<span class="hljs-comment">//choose s | 1&lt;&lt;j</span><br>                <span class="hljs-keyword">if</span>(((<span class="hljs-number">1</span>&lt;&lt;j)&amp;s)==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">int</span> ts=(<span class="hljs-number">1</span>&lt;&lt;j)|s;<br>                    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">8</span>;k++)&#123;<br>                        <span class="hljs-keyword">int</span> tx=r[j].first+dx[k],ty=r[j].second+dy[k];<br>                        <span class="hljs-keyword">if</span>((p[tx][ty]|ts)==ts&amp;&amp;c[tx][ty]) res++;<br>                    &#125;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;=n*m-r.size();k++)&#123;<br>                        dp[ts][k+res]+=dp[s][k];dp[ts][k+res]%=mod;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[(<span class="hljs-number">1</span>&lt;&lt;(r.size()))<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-comment">//////////////////////////////////////////dp end</span><br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> X,<span class="hljs-keyword">int</span> nx,<span class="hljs-keyword">int</span> ny)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> res=solve();<br>    <span class="hljs-keyword">if</span>((r.size()-num)&amp;<span class="hljs-number">1</span>) ans-=res;<br>    <span class="hljs-keyword">else</span> ans+=res;ans%=mod;<br>    <span class="hljs-keyword">if</span>(vd==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=nx;i&lt;=nx;i++)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=ny;j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(v[i][j]) <span class="hljs-keyword">continue</span>;<br>        paint(i,j);<br>        r.push_back(<span class="hljs-built_in">make_pair</span>(i,j));<br>        dfs(X+<span class="hljs-number">1</span>,i,j);<br>        cls(i,j),r.pop_back();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=nx+<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(v[i][j]) <span class="hljs-keyword">continue</span>;<br>        paint(i,j);<br>        r.push_back(<span class="hljs-built_in">make_pair</span>(i,j));<br>        dfs(X+<span class="hljs-number">1</span>,i,j);cls(i,j);r.pop_back();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*m;i++) f[i]=<span class="hljs-number">1ll</span>*f[i<span class="hljs-number">-1</span>]*i%mod;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n*m;i++) comb[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>            comb[i][j]=(comb[i<span class="hljs-number">-1</span>][j]+comb[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]);<br>            comb[i][j]%=mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;(c[i]+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(c[i][j]==<span class="hljs-string">&#x27;X&#x27;</span>)&#123;<br>                paint(i,j);r.push_back(<span class="hljs-built_in">make_pair</span>(i,j)),num++;<br>            &#125;<br>        &#125;<br>    &#125;vd=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) <span class="hljs-keyword">if</span>(v[i][j]==<span class="hljs-number">0</span>) vd++;<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;(ans+mod)%mod;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>可能是我写的比较渣，感觉还是大概能看明白的吧。</p>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>noip2018 day1 t1</title>
    <link href="/2021/06/01/old-good-days-noip2018t1/"/>
    <url>/2021/06/01/old-good-days-noip2018t1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5019">Link</a></p><div class="note note-primary">            <p>Old Memory</p>          </div><span id="more"></span><p>回首望去，他还是不忍直视当年那个抱着最美丽的幻想的，执意穿行金黄树林的小胖子。</p><p>他想骂他，在那个简单的时光中想着面子，幻想着不切实际的梦想这如今他都认为不简单的东西。</p><p>他想骂他，为什么不努力，为什么不脚踏实地。</p><p>但是他也是他，而他也将会成为他，老天用时间，信息不对等给他们两个开了一个玩笑。</p><p>他现在能做的只有继续吟啸，徐行，以此纪念这当年那个傻瓜，纪念他的梦想。</p><hr /><p>考场时，他在一个手就能数过来的我掌握的知识点中反复寻觅，同时根据学长讲的，但自己并未写过的知识点——分治，写了一个他认为很NB的分治。</p><p>当时的他只是过了样例，自己都不相信写的是正解。</p><p>在吉大外面的饭店中和同学徘徊，老师说过，要是学长们不努力，noip的分数就还是得在200左右徘徊，而他呢，这次似乎连一道题都不能确定AC。</p><p>老师来了，给他分享了t1的贪心，他当时脑子一震，当然，他还是对自己的分治抱有幻想。</p><p>而此刻，幻想彻底破灭，老师讲完，他没懂为什么分治不对，老师问懂没懂的时候也知识敷衍这点头。</p><p>day1,day2都结束了，发成绩了。</p><p>他只有 55 points 。25+0+0+0+30+0</p><p>有分的两题，分别是这道题，和填数游戏，他凭借着小学奥数瞎猜结论+手玩，以为能骗到50。。</p><p>此后他也放弃了这个题，他认为就算分治是个正确的算法，而自己一次也没有打过，甚至把学长教的二分当成分治，哈哈，算了吧。</p><p>此后的一年，两年这个想法一直没有挥散，结束了？noip2018结束了。</p><hr /><div class="note note-secondary">            <p>Present</p>          </div><p>2021.5.2</p><p>距离中考57days，他现在是初三。</p><p>"快快快，快tm给我测呀，别一直running on test 1，靠Wa on test6了"。</p><p>又是一场4切的SB div2。</p><ul><li><p>“为什么题解长得都一样？”（有的是差不多）</p></li><li><p>“为什么题解的代码也都长一样？”</p></li><li><p>“妈的，原来是个转载的，转载有个屁用。”</p></li><li><p>“妈的，都是借鉴一个人的思路。”</p></li></ul><p>他才意识到，原来 "Wa on test 6"是因为他少判断了一种情况，甚至他将这个特判的代码全部删掉也能对。</p><p>“这不就是个怪缝合题？”</p><p>他才想起来，这个似乎就是 noip day1 t1的一个增强版（缝合版）。</p><p>这道题题解给的是什么？我写的是什么？是tm的分治！！！！！！！！！！！！！！</p><p>这两年，他变了很多，他会了很多，也不甘于只听别人的解法。</p><p>他重新想了以下，发现 noip day1 t1 也是可以类似做的。</p><p>他考场上写的是正解。</p><p>他应该早早就有能力发现这点。</p><p>他应该早早的想一想，改一改题，而不是听别人分享他们自己的贪心，人类智慧。</p><p>他不应该只有55 points 。</p><hr /><div class="note note-success">            <p>Solution</p>          </div><p>这个题可以分治。</p><p>我们发现这个区间越长，就一定比短的优。</p><p>就最初的那段区间来说，我们最多有 <spanclass="math inline">\(Min_{i=1}^{r}d_i\)</span>次覆盖整个区间的方法。</p><p>接下来会产生一个 0，而如果把 0当作分割符，我们的区间被分成两个区间。</p><p>而不管我们减了多少，这个一段区间内的大小关系是不会变的，我们只需要找出每个区间原先的<span class="math inline">\(Min(d)\)</span> 即可。</p><p>这个直接 <span class="math inline">\(st\)</span> 表做 。</p><p>考虑复杂度，我们每找一次 <span class="math inline">\(Min(d)\)</span>我们就会删除一个数（变为0)，我们顶多会删除 <spanclass="math inline">\(n\)</span> 次。</p><p>所以复杂度为 <span class="math inline">\(\mathcal O(n\timesfindmin)\)</span> ，由于是 <span class="math inline">\(st\)</span>表，<span class="math inline">\(\mathcal O(n\log n+n)\)</span>。</p><hr /><p>我现在其实特别想找出那个<code>JL-Senior.zip</code>（也不知道是不是这个名字，反正CSP是这个名字）存着选手代码的<code>zip</code>。</p><p>我想找出自己当年怎么写的，看能不能帮自己改一改代码，</p><p>有点懊悔自己当时得过且过，有点惋惜自己没好好学习，但这都是苍白的，因为时间已经流逝。</p><p>既然选择这般独木桥，这条人迹罕至的小路，就不能懊悔年少的无知，年少的轻狂。</p><p>做下去永远比说下去难得多。</p><p>以此，纪念那个13岁的傻瓜。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>怀旧</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>anticube</title>
    <link href="/2021/05/15/agc003d/"/>
    <url>/2021/05/15/agc003d/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><ahref="https://atcoder.jp/contests/agc003/tasks/agc003_d">Link</a></p><p>给你 <span class="math inline">\(n\)</span>个数，让你在这些数中间选出尽可能多的数使得，对于任意两个选出来的数，乘积不是完全立方数。</p><h3 id="题解">题解</h3><p>我们可以发现，如果 <span class="math inline">\(a\times b\)</span>为完全立方数，那么分解质因数。</p><p><span class="math inline">\(a=\prod p_i^{a_i}\)</span>,<spanclass="math inline">\(b=\prod p_i^{b_i}\)</span>。那么应该有 <spanclass="math inline">\(\forall i,(a_i+b_i)\bmod{3}=0\)</span>。</p><p>我们把每个数的立方因子都消掉。</p><p><span class="math inline">\(A=\prod p_i^{a_i\bmod 3}\)</span>。</p><p>所以我们只需要找出对应 <span class="math inline">\(A_i+B_i=3\)</span>的这样一组的 <span class="math inline">\(A,B\)</span> 看那一组数多(<span class="math inline">\(A,B\)</span> 指的是消去立方因子后的)。</p><p>这样的任意一个 <span class="math inline">\(A\)</span>对会一一对应一个使得 <span class="math inline">\(A\times B=k^3\)</span>的 <span class="math inline">\(B\)</span>。</p><p>我们只需要贪心的选择个数多的那个数即可。</p><hr /><p>如何快速分解质因数？</p><p>首先第一步消去立方因子的过程我们只需要枚举到 <spanclass="math inline">\(\sqrt[3]{n}\)</span> 的质数就行了，大于 <spanclass="math inline">\(\sqrt[3]{n}\)</span> 的数不可能是。</p><p>第二步对一个 <span class="math inline">\(A\)</span> 找 <spanclass="math inline">\(B\)</span> 的过程类似，首先暴力的找 <spanclass="math inline">\(\sqrt[3]{lim}\)</span> 以下范围的（注意这个是<span class="math inline">\(lim\)</span> ，而不是你具体分解的 <spanclass="math inline">\(n\)</span>）。</p><p>剩下的形式若不是<span class="math inline">\(1\)</span> 只可能为 <spanclass="math inline">\(p,pq,p^2(p,q\in prime)\)</span>三种形式（想一下二次二项式可能性只有这仨）</p><p>只用判断一下剩下的是不是完全平方数即可。</p><h3 id="复杂度分析">复杂度分析</h3><p>除去平方因子+用 <span class="math inline">\(map\)</span> 枚举 <spanclass="math inline">\(A\)</span> 找 <spanclass="math inline">\(B\)</span>。</p><p><span class="math inline">\(\mathcal{O(n\frac{\sqrt[3]{Max}}{\ln\sqrt[3]{Max}}+n\frac{\sqrt[3]{Max}}{\ln \sqrt[3]{Max}}+n\logn)}\)</span></p><p>参考代码</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">3000</span>;<br><span class="hljs-keyword">int</span> p[N],pr[N],tot,pw[N];<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; cnt;<br><span class="hljs-comment">////////////////////////// 文化课期间重写的，看起来丑很正常</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span><span class="hljs-comment">// 消去平方因子</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-keyword">int</span> X=x,tx=x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot&amp;&amp;pw[i]&lt;=x;i++)<br>        <span class="hljs-keyword">if</span>(x%p[i]==<span class="hljs-number">0</span>) <span class="hljs-keyword">while</span>(x%pw[i]==<span class="hljs-number">0</span>) x/=pw[i];<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e10</span>+<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sqt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span><span class="hljs-comment">// 判断是否为完全平方数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v=round(<span class="hljs-built_in">sqrt</span>(x));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=v<span class="hljs-number">-2</span>;i&lt;=v+<span class="hljs-number">2</span>;i++) <span class="hljs-keyword">if</span>(i*i==x) <span class="hljs-keyword">return</span> i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span><span class="hljs-comment">//A 找 B</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-keyword">int</span> X=x,tx=x,res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot&amp;&amp;p[i]*p[i]&lt;=x;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x%p[i]==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(x%p[i]==<span class="hljs-number">0</span>) x/=p[i],num++;<br>            <span class="hljs-keyword">if</span>(num==<span class="hljs-number">1</span>) res=res*p[i]*p[i];<br>            <span class="hljs-keyword">else</span> res=res*p[i];<br>            <span class="hljs-keyword">if</span>(res&gt;=inf) <span class="hljs-keyword">return</span> inf;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x*x&lt;=tx)res=res*x*x;<br>    <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// 这里大概就是判断炸没炸 1e10</span><br>        <span class="hljs-keyword">int</span> s=sqt(x);<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-number">-1</span>)<br>        &#123;<br>            res=res*x; <span class="hljs-keyword">if</span>(res&gt;=inf) <span class="hljs-keyword">return</span> inf;<br>            res=res*x; <span class="hljs-keyword">if</span>(res&gt;=inf) <span class="hljs-keyword">return</span> inf;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        res=res*s;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">int</span> n,a[<span class="hljs-number">300000</span>];<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    pr[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">2000</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pr[i]==<span class="hljs-number">0</span>) p[++tot]=i,pw[tot]=i*i*i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=tot&amp;&amp;p[j]*i&lt;=<span class="hljs-number">2000</span>;j++)<br>        &#123;<br>            pr[i*p[j]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) read(a[i]),a[i]=div(a[i]),cnt[a[i]]++;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;::iterator i=cnt.begin();i!=cnt.end();i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>((i-&gt;first)==<span class="hljs-number">1</span>)<br>        &#123;<br>            ans++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> rev=rebuild(i-&gt;first);<br>        <span class="hljs-keyword">if</span>(rev==inf) &#123;ans+=i-&gt;second;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span>(cnt.find(rev)==cnt.end()) &#123;ans+=i-&gt;second;<span class="hljs-keyword">continue</span>;&#125;<br>        ans+=max(i-&gt;second,cnt[rev]);<span class="hljs-comment">// 选多的那个</span><br>        cnt[rev]=<span class="hljs-number">0</span>,cnt[i-&gt;first]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>分解质因数</tag>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1519E</title>
    <link href="/2021/04/15/cf1519E/"/>
    <url>/2021/04/15/cf1519E/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1519/problem/E">Link</a></p><span id="more"></span><p>给你 <span class="math inline">\(n\)</span> 个点,<spanclass="math inline">\(1\leq x,y\leq10^9\)</span> 。</p><p>记 <span class="math inline">\((x&#39;,y&#39;)\)</span> 表示为 <spanclass="math inline">\((x+1,y)\)</span> 或者 <spanclass="math inline">\((x,y+1)\)</span></p><p>定义一对点合法 <spanclass="math inline">\((x_1,y_1),(x_2,y_2)\)</span> 当且仅当存在 <spanclass="math inline">\((x_1&#39;,y_1&#39;),(x_2&#39;,y_2&#39;)\)</span>使得<spanclass="math inline">\((x_1&#39;,y_1&#39;),(x_2&#39;,y_2&#39;),(0,0)\)</span>共线。</p><p>问最多能选出多少对点，注意：一个点最多只能被选择一次。</p><h3 id="题解">题解</h3><p>很显然如果 <span class="math inline">\((x_1,y_1),(x_2,y_2)\)</span>与 <span class="math inline">\((0,0)\)</span>贡献，当且仅当这两个点斜率相同，即 <spanclass="math inline">\(\frac{y_1}{x_1}=\frac{y_2}{x_2}\)</span>。</p><p>而这个 <span class="math inline">\(\frac{x_1}{y_1}\)</span> 相当于这个点的属性值。</p><p>那么问题转换为给你 <span class="math inline">\(n\)</span>个点，每个点有两种可能的属性值。</p><p>让你每次选出两个存在相同属性的点，问最多选多少个。</p><hr /><p>我最初的想法是想把 这个平面上的 <spanclass="math inline">\((x,y)\)</span> 看成点，而选择一对 <spanclass="math inline">\((x,y)\)</span> 看成一个类似匹配的东西。</p><p>但是 1.5h我也没什么有价值的idea。（如果能类似这么做还请大佬不吝赐教）</p><hr /><p>正解是这样的，我们把 斜率看成点，而把这个 <spanclass="math inline">\((x,y)\)</span> 看成连接两个可能的斜率的边。</p><p>我们发现，两个移动后可能共线的 <spanclass="math inline">\((x,y)\)</span>必定是图中连接3个点的两条边，也就是至少有一个公共点的两条边。</p><p>现在做法应该比较明晰了。</p><p>注意我们的匹配不是针对点的，而是针对边的。</p><p>具体做法是建出 <span class="math inline">\(dfs\)</span>树，我们把结点连向儿子的边匹配，如果剩下一条边的话 即 <spanclass="math inline">\(sz_x\bmod 2=1\)</span>。我们就将剩下这条与 <spanclass="math inline">\((x\rightarrow son_x)\)</span> 这条边匹配，并且在<span class="math inline">\(fa_x\)</span> 的匹配时不计算这条边。</p><p>容易发现这样匹配一定是最优的。</p><p><span class="math inline">\(why?\)</span>考虑如果没有全部匹配，一定是只剩下 <spanclass="math inline">\(root\rightarrow son_r\)</span>这一条边。那么发现总边数也一定是奇数，不存在全部匹配的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">10000</span>;<br><span class="hljs-keyword">int</span> a[N],b[N],c[N],d[N];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">frac</span>&#123;</span><span class="hljs-keyword">int</span> a,b;&#125;;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (frac a,frac b)&#123;<br>    <span class="hljs-keyword">if</span>(a.a==b.a) <span class="hljs-keyword">return</span> a.b&lt;b.b;<br>    <span class="hljs-keyword">return</span> a.a&lt;b.a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br><span class="hljs-keyword">inline</span> frac <span class="hljs-keyword">operator</span> / (frac a,frac b)&#123;<br>    frac c;<br>    c.a=a.a*b.b;<br>    c.b=a.b*b.a;<br>    <span class="hljs-keyword">int</span> g=gcd(c.a,c.b);<br>    c.a/=g,c.b/=g;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-built_in">map</span>&lt;frac,<span class="hljs-keyword">int</span>&gt; mp;<br><br>frac x,y,f[N][<span class="hljs-number">5</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><span class="hljs-keyword">int</span> x,v;&#125;;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(node a,node b)&#123;<br>    <span class="hljs-keyword">if</span>(a.v==b.v) <span class="hljs-keyword">return</span> a.x&lt;b.x;<br>    <span class="hljs-keyword">return</span> a.v&lt;b.v;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt; ans,v[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> tot;<span class="hljs-keyword">bool</span> vis[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> dep[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> fa,<span class="hljs-keyword">int</span> faid)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[x]=dep[fa]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first,w=v[x][i].second;<br>        <span class="hljs-keyword">if</span>(dep[y]==<span class="hljs-number">0</span>) dfs(y,x,w);<br>    &#125;<br>    <span class="hljs-keyword">int</span> pre=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first,w=v[x][i].second;<br>        <span class="hljs-keyword">if</span>(dep[y]&gt;dep[x])&#123;<br>            <span class="hljs-keyword">if</span>(vis[w]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(pre==<span class="hljs-number">0</span>) pre=w;<br>            <span class="hljs-keyword">else</span>&#123;<br>                vis[pre]=vis[w]=<span class="hljs-number">1</span>;<br>                ans.push_back(<span class="hljs-built_in">make_pair</span>(pre,w));<br>                pre=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pre&amp;&amp;faid)&#123;<br>        vis[pre]=vis[faid]=<span class="hljs-number">1</span>;<br>        ans.push_back(<span class="hljs-built_in">make_pair</span>(pre,faid));<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> id=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i]&gt;&gt;d[i];<br>        x=frac&#123;a[i]+b[i],b[i]&#125;;<br>        y=frac&#123;c[i],d[i]&#125;;<br>        f[i][<span class="hljs-number">1</span>]=x/y;<br>        x=frac&#123;a[i],b[i]&#125;;<br>        y=frac&#123;c[i]+d[i],d[i]&#125;;<br>        f[i][<span class="hljs-number">2</span>]=x/y;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">2</span>;++k)&#123;<br>            <span class="hljs-keyword">if</span>(mp[f[i][k]]==<span class="hljs-number">0</span>) &#123;tot++,mp[f[i][k]]=tot;<span class="hljs-keyword">continue</span>;&#125;<br>        &#125;<br>        v[mp[f[i][<span class="hljs-number">1</span>]]].push_back(<span class="hljs-built_in">make_pair</span>(mp[f[i][<span class="hljs-number">2</span>]],i));<br>        v[mp[f[i][<span class="hljs-number">2</span>]]].push_back(<span class="hljs-built_in">make_pair</span>(mp[f[i][<span class="hljs-number">1</span>]],i));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++) <span class="hljs-keyword">if</span>(dep[i]==<span class="hljs-number">0</span>) dfs(i,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans.size()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:ans)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;x.first&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;x.second&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小idea</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>noi2016循环之美</title>
    <link href="/2021/03/28/beauty-of-cycle/"/>
    <url>/2021/03/28/beauty-of-cycle/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1587">循环之美</a></p><span id="more"></span><h3 id="step1">step1</h3><p>首先根据小学知识，如果 <span class="math inline">\(k=10\)</span>,那么如果分数 <span class="math inline">\(\frac{a}{b},(a,b)=1\)</span>想要纯循环，必须满足 <span class="math inline">\(2\not\mid b,5\not\midb\)</span>。</p><p>可以猜测如果 <span class="math inline">\(k\not =10\)</span> 时，<spanclass="math inline">\(\frac{a}{b}\)</span> 纯循环 <spanclass="math inline">\(\Leftrightarrow\)</span> <spanclass="math inline">\((b,k)=1\)</span>。</p><p>那么如何证明呢?</p><p>只要余数出现循环代表商出现循环。</p><p>考虑余数形式一定是 <span class="math inline">\(a,ak\bmod b,ak^2\bmodb,ak^3\bmod b,\cdots\)</span>。</p><p>如果有 <span class="math inline">\(ak^i\equivak^j\pmod{b}\)</span>,由于 <spanclass="math inline">\((a,b)=1\)</span>,所以 <spanclass="math inline">\(a\)</span> 存在逆元，所以 <spanclass="math inline">\(k^i\equiv k^j\pmod{b}\)</span>。</p><p>当 <span class="math inline">\((k,b)=1\)</span>,<spanclass="math inline">\(k\)</span> 存在逆元，显然有 <spanclass="math inline">\(1\equiv k^{j-i}\pmod{b}\)</span>，是纯循环。</p><p><spanclass="math inline">\(\frac{k^{i}}{g^t}\equiv\frac{k^j}{g^t}\pmod{\frac{b}{g^t}}\)</span>,由于一次可能除不尽，所以<span class="math inline">\(i\)</span> 为最小的使 <spanclass="math inline">\((\frac{k^i}{g^t},\frac{b}{g^t})=1\)</span> 的<span class="math inline">\(i\)</span>, <spanclass="math inline">\(g=\gcd(k,b)\)</span>。</p><p>那么 原始化为 <spanclass="math inline">\(\frac{k^{i}}{g^t}\equiv\frac{k^i}{g^t}k^{j-i}\pmod{\frac{b}{g^t}}\)</span>,<spanclass="math inline">\(k^{j-i}\equiv1\pmod{\frac{b}{g^t}}\)</span>，这个的循环节显然会比 <spanclass="math inline">\(k^{j-i}\equiv1\pmod{b}\)</span>要小，所以不是纯循环。</p><h3 id="step2">step2</h3><p>问题分析的很清楚了。</p><p>有拆第一个 <span class="math inline">\(gcd=1\)</span> 的；有拆第二个<span class="math inline">\(gcd=1\)</span> 的，而我选择都拆。。。 <spanclass="math display">\[\begin{aligned}&amp;\sum_{i=1}^m\sum_{j=1}^n[(i,k)=1][(i,j)=1]\\&amp;\sum_{i=1}^m[(i,k)]=1\sum_{j=1}^n\sum_{d\mid i,d\mid j}\mu(d)\\&amp;\sum_{d=1}^n\mu(d)\sum_{d|i}^m[(i,k)]=1\sum_{j=1,d|j}^n1\\&amp;\sum_{d=1}^n\mu(d)\sum_{d|i}^m\ \\sum_{t|i,t|k}\mu(t)\lfloor\frac{n}{d}\rfloor\\&amp;\sum_{t|k}\mu(t)\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\sum_{d|i,t|i}^m1\\&amp;\sum_{t|k}\mu(t)\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\frac{m}{lcm(d,t)},\frac{m}{lcm(d,t)}=\frac{m(d,t)}{d\cdott}\\&amp;\sum_{t|k}\mu(t)\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\lfloor\frac{m(d,t)}{dt}\rfloor\\&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\lfloor\frac{mg}{dt}\rfloor[(d,t)=g]\\&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{d=1}^{n/g}\lfloor\frac{n}{dg}\rfloor\mu(dg)\lfloor\frac{m}{dt}\rfloor[(d,t)=1]\\&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{h|t}\mu(h)\sum_{d=1}^{n/gh}\lfloor\frac{n}{dgh}\rfloor\mu(dgh)\lfloor\frac{m}{dth}\rfloor\\\end{aligned}\]</span> 冷静一下。</p><hr />$$<span class="math display">\[\begin{aligned}&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{h|t}\mu(h)\sum_{d=1}^{n/gh}\mu(dgh)\lfloor\frac{\frac{n}{gh}}{d}\rfloor\lfloor\frac{\frac{m}{th}}{d}\rfloor\\\end{aligned}\]</span><p>$$</p><p>整除分块的形式一目了然。</p><p>问题转化为求解 <spanclass="math inline">\(\sum_{i=1}^{n}\mu(Ti)\)</span>。 <spanclass="math display">\[\begin{aligned}g(n,T)=&amp;\sum_{i=1}^{n}\mu(Ti)\\=&amp;\sum_{i=1}^{n}\mu(T)\mu(i)[(T,i)=1]\\=&amp;\mu(T)\sum_{i=1}^{n}\mu(i)\sum_{f|i,f|T}\mu(f)\\=&amp;\mu(T)\sum_{f|T}\mu(f)\sum_{i=1}^{n/f}\mu(if)=\mu(T)\sum_{f|T}\mu(f)g(n/f,f)\\\end{aligned}\]</span> 这个直接记忆化。</p><p>然后做完了。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>筛法</tag>
      
      <tag>整除分块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>loj509</title>
    <link href="/2021/03/10/loj509/"/>
    <url>/2021/03/10/loj509/</url>
    
    <content type="html"><![CDATA[<h3 id="step1">step1</h3><p>首先显然有 <spanclass="math inline">\(|KX|=\sqrt{a},|YL|=\sqrt{b}\)</span>。</p><p>所以延长 <span class="math inline">\(KX,YL\)</span> ,不难发现：<spanclass="math inline">\(|KL|=\sqrt{(\sqrt{a}+\sqrt{b})^2+1^2}\)</span>。</p><p><spanclass="math inline">\(S=|KL|^2=(\sqrt{a}+\sqrt{b})^2+1=a+b+1+2\sqrt{ab}\)</span>。</p><p>问题转化：求 <spanclass="math inline">\(\sum_{i=1}^n\sum_{j=1}^m[i\times j\in完全平方数]\)</span>。</p><hr /><h3 id="step2">step2</h3><p>以下说的 <span class="math inline">\(i,j\)</span> 都是满足 <spanclass="math inline">\(i\times j\)</span> 是完全平方数的 <spanclass="math inline">\(i,j\)</span>。</p><p>所以，我们发现，如果 <span class="math inline">\(p|i,p|j，\ \ p\inprime\)</span> 那么 <span class="math inline">\(i,j\)</span> 的 <spanclass="math inline">\(p\)</span> 因子的奇偶性相同。</p><p>思路大概明晰了，我们尝试提取 <span class="math inline">\(i,j\)</span>的平方因子。</p><p><span class="math inline">\(i=a\times x,j=b\times y\)</span>。</p><p><span class="math inline">\(a,b\)</span> 均是完全平方数。</p><p>那么 <span class="math inline">\(x\times y\)</span>也为完全平方数。</p><p><span class="math inline">\(x,y\)</span> 剩余了啥？ <spanclass="math inline">\(x,y\)</span> 的任意 <spanclass="math inline">\(p_i\)</span> 因子就行都相同，此时还只可能为 <spanclass="math inline">\(0\ or \ 1\)</span>。</p><p>发现 <span class="math inline">\(x=y\)</span>。</p><hr /><h3 id="step3">step3</h3><p>枚举 <span class="math inline">\(x\)</span> 。</p><p>原式可写为 ： <span class="math display">\[\begin{aligned}\sum_{x=1}^{n}[\sqrt{x}\not\in\mathbb{Z}]\sum_{a=1}^{n/x}[\sqrt{a}\in\mathbb{Z}]\sum_{b=1}^{m/x}[\sqrt{b}\in\mathbb{Z}]\\\sum_{x=1}^{n}[\sqrt{x}\not\in\mathbb{Z}]\lfloor\sqrt{\lfloor\frac{n}{x}\rfloor}\rfloor\lfloor\sqrt{\lfloor\frac{m}{x}\rfloor}\rfloor\\\sum_{x=1}^{n}\mu(x)^2\lfloor\sqrt{\lfloor\frac{n}{x}\rfloor}\rfloor\lfloor\sqrt{\lfloor\frac{m}{x}\rfloor}\rfloor\end{aligned}\]</span> 是不是可以 <span class="math inline">\(\mathcal{O(n)}\)</span>求了呢？一个大大的 <span class="math inline">\(n\leq 1.5\times10^{16}\)</span> 打在你脸上。</p><hr /><h3 id="step4">step4</h3><p>发现显然可以整除分块，但是复杂度不是很优，还要求 <spanclass="math inline">\(\sum\mu(i)^2\)</span> 。</p><h4 id="如何求-summui2">如何求 <spanclass="math inline">\(\sum\mu(i)^2\)</span></h4><p>考虑 <span class="math inline">\(\mu\)</span>本质是在对于因数个数容斥。</p><p>正难则反。我们考虑容斥，我们先 naive 地求出 <spanclass="math inline">\(\sum_{p}\sum_{i=1}^{n}[p^2|i,\sqrt{i}\in\mathbb{Z}]\)</span>,就是平方因子包括<span class="math inline">\(p\)</span> 的数的个数。</p><p>形式化地写出： <spanclass="math inline">\(\sum_{p}\lfloor\frac{n}{p^2}\rfloor\)</span></p><p>但是此时我们算重了，我们算重的是两个质数积的平方的因数，所以类似的有平方因子包含<span class="math inline">\(p_i\cdot p_j\)</span> 的。</p><p>形式化写出：<span class="math inline">\(\sum _{t=p_i\cdot p_j}\lfloor\frac{n}{t^2}\rfloor\)</span>。</p><p>利用 <span class="math inline">\(\mu\)</span> 对因子的容斥。 <spanclass="math display">\[\sum_{i=1}^n \mu^2(i)\\=\sum_{i=1}^n\mu(i) \lfloor\frac{n}{i^2}\rfloor\\=\sum_{i=1}^{\lfloor\sqrt{n}\rfloor}\mu(i) \lfloor\frac{n}{i^2}\rfloor\\\]</span> 此部分复杂度为 <spanclass="math inline">\(\mathcal{O(n^\frac{1}{4})}\)</span>。</p><hr /><p>复杂度为什么对？怎么保证？</p><p>发现<span class="math inline">\(\sqrt{\frac{n}{x}}\)</span> ，当<span class="math inline">\(1\leq x\leq n^\frac{1}{3}\)</span>时取值个数只可能为 <spanclass="math inline">\(n^\frac{1}{3}\)</span>。</p><p>当 <span class="math inline">\(n^{\frac{1}{3}}&lt;x\leq n\)</span>时，取值范围为 <spanclass="math inline">\([1,\sqrt{\frac{n}{n^{\frac{1}{3}}}}]=[1,n^{\frac{1}{3}}]\)</span>。</p><p>若用 <span class="math inline">\(t=\sqrt{\frac{n}{x}}\)</span> , 那么<span class="math inline">\(x=\frac{n}{t^2}\)</span>。</p><p>我们现在用积分算复杂度。</p><p>第一部分： <span class="math display">\[\int_{1}^{n^\frac{1}{3}}{x}^{\frac{1}{4}}dx\\={x^{\frac{5}{4}}}{\Big|}^{n^{\frac{1}{3}}}_0\\=n^{\frac{5}{12}}\]</span> 第二部分： <span class="math display">\[\int_{1}^{n^\frac{1}{3}}({\frac{n}{t^2}})^{\frac{1}{4}}dt\\=n^{\frac{1}{4}}\int_{1}^{n^\frac{1}{3}}x^{-\frac{1}{2}}dt\\={n^{\frac{1}{4}}x^{\frac{1}{2}}}\Big|^{n^{\frac{1}{3}}}_0\\=n^{\frac{1}{4}}\cdot n^{\frac{1}{6}}=n^{\frac{5}{12}}\]</span> 发现这个 <spanclass="math inline">\(\mathcal{O(n^\frac{5}{12})}\)</span>常数不是很优。</p><p>可以预处理一部分的 <span class="math inline">\(\sum\mu(x)^2\)</span>然后降低常数，（或许可以证明能降低复杂度下界）</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>筛法</tag>
      
      <tag>整除分块</tag>
      
      <tag>mu容斥</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf323c</title>
    <link href="/2021/03/06/cf323c/"/>
    <url>/2021/03/06/cf323c/</url>
    
    <content type="html"><![CDATA[<p>比较水的一个题。</p><p>主要是考虑这个排列的性质。</p><p>如果只考虑一次询问，让你把在 <spanclass="math inline">\(a:[l_1,r_1]\)</span> 里的与 <spanclass="math inline">\(b:[l_2,r_2]\)</span> 的相同数的个数求出来。</p><p>我们有这样一种思路，把 <span class="math inline">\(a_x\)</span>一个一个加进去，直到 <span class="math inline">\(x=l_1-1\)</span>。记录当前状态，然后接着加入，直到 <spanclass="math inline">\(x=r\)</span> ，记录状态。</p><p>把这两个状态分别求出在 <spanclass="math inline">\(b:[l_2,r_2]\)</span>里面有多少个。在相减，便是所求。</p><p>线段树维护即可，设 <span class="math inline">\(p_i\)</span> 表示<span class="math inline">\(i\)</span> 在 <spanclass="math inline">\(b\)</span> 中的位置。那么加入 <spanclass="math inline">\(a_x\)</span> 操作等价于在 <spanclass="math inline">\(b\)</span> 的 <spanclass="math inline">\({p_{a_x}}\)</span> 处加 <spanclass="math inline">\(1\)</span> ，然后区间求和。</p><p>那么多次询问用主席树记录状态即可。</p><p>代码不放了。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>主席树</tag>
      
      <tag>小idea题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zjoi2015 幻想乡战略游戏</title>
    <link href="/2021/03/01/zjoi2015/"/>
    <url>/2021/03/01/zjoi2015/</url>
    
    <content type="html"><![CDATA[<p>这里提供一个复杂度比较对的树剖做法。</p><p>这个题分为两步。</p><p>首先我们要找到那个使得 <spanclass="math inline">\(\sum\limits_{i=1}dist(u,i)d_i\)</span> 最小的<span class="math inline">\(u\)</span> 。</p><p>其实这个点是有定义的。</p><p>考虑我们怎么定义重心的（或者说重心的性质）。</p><p>有重心 <span class="math inline">\(u\)</span> 为使得 <spanclass="math inline">\(\sum\limits_{i=1}dist(u,i)\)</span> 最小的 <spanclass="math inline">\(u\)</span>。</p><p>那么本题所定义的可以理解成带权重心。</p><p>考虑如何求带权重心。</p><p>首先随便定一个根，把这棵树转化成有根树。其中整个树的权值和为 <spanclass="math inline">\(all\)</span> ,点 <spanclass="math inline">\(x\)</span> 的子树权值和为 <spanclass="math inline">\(sum_x\)</span>。</p><p>那么如果当前在点 <span class="math inline">\(x\)</span> ，如果 <spanclass="math inline">\(x\)</span> 的某一个儿子 <spanclass="math inline">\(y\)</span> 更满足使 <spanclass="math inline">\(\sum dist(y,i)d_i\)</span> 的条件，那么必须满足<span class="math inline">\((all-sum_y)\cdot w&lt;sum_y\cdot w\)</span>,也就是 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span>。</p><p>那么把 <span class="math inline">\(x\)</span> 的重心转到 <spanclass="math inline">\(y\)</span> 一定更优，由于此时 <spanclass="math inline">\(sum_y&gt;\frac{all}{2}\)</span>所以只可能有一个儿子满足转移条件。</p><p>如果 <span class="math inline">\(x\)</span>的儿子只存在等于或者不存在 <spanclass="math inline">\(sum_y&gt;\frac{all}{2}\)</span>，那么 <spanclass="math inline">\(x\)</span> 遍为重心。</p><p>所以现在只需要维护子树权值和，找到最深的满足 <spanclass="math inline">\(sum_y&gt;\frac{all}{2}\)</span> 的 <spanclass="math inline">\(y\)</span> 便为所求位置。</p><p>这个可以通过用 <span class="math inline">\(dfs\)</span>序列建出线段树，在线段树上 找到一个最靠后，满足 <spanclass="math inline">\(sum_y&gt;\frac{all}{2}\)</span> 的 <spanclass="math inline">\(y\)</span>,在线段树上二分即可。</p><p>由于一条链的 <span class="math inline">\(dfs\)</span>序严格单调增，所以可以二分。</p><p>那么现在要求解答案。(<span class="math inline">\(f_i\)</span> 表示<span class="math inline">\(u\)</span> 的第 <spanclass="math inline">\(i\)</span> 级祖先,<spanclass="math inline">\(sum_j\)</span> 表示以 <spanclass="math inline">\(j\)</span> 为根的子树权值和。)。 <spanclass="math display">\[\begin{aligned}\sum_{i} dist(u,i)&amp;=\sum_i dep(u)+dep(i)-2\cdot dep(lca(u,i))\\&amp;=dep(u) \sum_i 1+\sum_i dep(i)+\sum_i dep(lca(u,i))\\\sum_idep(lca(u,i))&amp;=\sum_{j=1}dep_{f_i} (sum_{f_{j}}-sum_{f_{j-1}})\\&amp;=\sum_{j=1}dep_{f_i}\cdotsum_{f_j}-\sum_{j=0}dep_{f_{j+1}}sum_j=\sum_{j=1}(dep_{f_{j}}-{dep_{f_{j+1}}})sum_j\\&amp;=\sum_{j=1} w_jsum_j\end{aligned}\]</span> 怎么维护？</p><p>链剖维护的充要条件是维护的信息可以合并，线段树区间修改的充要条件是可以<span class="math inline">\(O(1)\)</span> pushdown，同时可以合并。</p><p>设 <span class="math inline">\(v_j=w_jsum_j\)</span> ,我们现在要维护<span class="math inline">\(v_j\)</span> 的区间和，同时要能对 <spanclass="math inline">\(sum_j\)</span> 区间修改。</p><p>考虑一段区间怎么快速更新和，显然有 <spanclass="math inline">\(\sum_{j=l}^{r}w_j(sum_j+v)=\sum_{j=l}^rw_jsum_j+v\cdotsum_{j=l}^rw_j\)</span>。</p><p>发现只需要维护区间的 <span class="math inline">\(w_j\)</span>的和，便能更新区间的 <span class="math inline">\(v_j\)</span> 的和，而<span class="math inline">\(w_j\)</span> 的值不变，是 <spanclass="math inline">\(j\)</span> 的一个属性所以很好维护。</p><p>那么这道题就做完了。时间复杂度 <spanclass="math inline">\(\mathcal{O(n\log n\log n)}\)</span> 。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt;v[N];<span class="hljs-keyword">int</span> fa[N],w[N];<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> c=getchar();x=<span class="hljs-number">0</span>;<span class="hljs-keyword">bool</span> f=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(c&gt;<span class="hljs-string">&#x27;9&#x27;</span>||c&lt;<span class="hljs-string">&#x27;0&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">1</span>;c=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>) x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+c-<span class="hljs-string">&#x27;0&#x27;</span>,c=getchar();<br>    <span class="hljs-keyword">if</span>(f) x=-x;<br>&#125;<br><span class="hljs-keyword">int</span> sz[N],dfn[N],hson[N],dep[N],dis[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    fa[x]=f;sz[x]=<span class="hljs-number">1</span>;<span class="hljs-keyword">int</span> mx=<span class="hljs-number">0</span>;dep[x]=dep[f]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first,z=v[x][i].second;<br>        <span class="hljs-keyword">if</span>(y==f) <span class="hljs-keyword">continue</span>;dis[y]=dis[x]+z;<br>        w[y]=z;dfs(y,x);sz[x]+=sz[y];<br>        <span class="hljs-keyword">if</span>(sz[y]&gt;mx) mx=sz[y],hson[x]=y;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> top[N],cnt,num[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">redfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> tp)</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[x]=++cnt;num[cnt]=x;top[x]=tp;<br>    <span class="hljs-keyword">if</span>(hson[x]) redfs(hson[x],x,tp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first;<br>        <span class="hljs-keyword">if</span>(y==f||y==hson[x]) <span class="hljs-keyword">continue</span>;<br>        redfs(y,x,y);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seg</span>&#123;</span><br>    <span class="hljs-keyword">int</span> l,r,tag,mx,v,sumv;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[pos].l=l,t[pos].r=r;<br>    <span class="hljs-keyword">if</span>(l==r) <br>    &#123;<br>        t[pos].v=w[num[l]];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    build(pos&lt;&lt;<span class="hljs-number">1</span>,l,mid);build(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    t[pos].v=t[pos&lt;&lt;<span class="hljs-number">1</span>].v+t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[pos].tag==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> tag=t[pos].tag;t[pos].tag=<span class="hljs-number">0</span>;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>].tag+=tag,t[pos&lt;&lt;<span class="hljs-number">1</span>].mx+=tag;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].tag+=tag,t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx+=tag;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>].sumv+=tag*t[pos&lt;&lt;<span class="hljs-number">1</span>].v;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sumv+=tag*t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;=t[pos].l&amp;&amp;t[pos].r&lt;=y)<br>    &#123;<br>        t[pos].sumv+=v*t[pos].v;<br>        t[pos].tag+=v;t[pos].mx+=v;<span class="hljs-keyword">return</span> ;<br>    &#125;<br>    pushdown(pos);<br>    <span class="hljs-keyword">int</span> mid=t[pos].l+t[pos].r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(y&lt;=mid) modify(pos&lt;&lt;<span class="hljs-number">1</span>,x,y,v);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;mid) modify(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y,v);<br>    <span class="hljs-keyword">else</span> modify(pos&lt;&lt;<span class="hljs-number">1</span>,x,y,v),modify(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y,v);<br>    t[pos].mx=max(t[pos&lt;&lt;<span class="hljs-number">1</span>].mx,t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx);<br>    t[pos].sumv=t[pos&lt;&lt;<span class="hljs-number">1</span>].sumv+t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sumv;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[pos].l==t[pos].r) <span class="hljs-keyword">return</span> t[pos].l;<br>    pushdown(pos);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx&gt;v) <span class="hljs-keyword">return</span> query(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,v);<br>    <span class="hljs-keyword">return</span> query(pos&lt;&lt;<span class="hljs-number">1</span>,v);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;=t[pos].l&amp;&amp;t[pos].r&lt;=y) <span class="hljs-keyword">return</span> t[pos].sumv;<br>    pushdown(pos);<br>    <span class="hljs-keyword">int</span> mid=t[pos].l+t[pos].r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(y&lt;=mid) <span class="hljs-keyword">return</span> ask(pos&lt;&lt;<span class="hljs-number">1</span>,x,y);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;mid) <span class="hljs-keyword">return</span> ask(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y);<br>    <span class="hljs-keyword">return</span> ask(pos&lt;&lt;<span class="hljs-number">1</span>,x,y)+ask(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y);<br>&#125;<br><span class="hljs-keyword">int</span> val[N];<br><span class="hljs-keyword">int</span> v1,v2;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;res&quot;,&quot;w&quot;,stdout);</span><br>    read(n),read(q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x,y,z;read(x),read(y);read(z);<br>        v[x].push_back(<span class="hljs-built_in">make_pair</span>(y,z));v[y].push_back(<span class="hljs-built_in">make_pair</span>(x,z));<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);redfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> all=<span class="hljs-number">0</span>;<br>    build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x,y;read(x),read(y);all+=y;val[x]+=y;v1+=y;v2+=y*(dis[x]);<br>        <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)<br>        &#123;<br>            modify(<span class="hljs-number">1</span>,dfn[top[x]],dfn[x],y);<br>            x=fa[top[x]];<br>        &#125;<br>        <span class="hljs-keyword">int</span> pos=num[query(<span class="hljs-number">1</span>,all)],ans=<span class="hljs-number">0</span>;<br>        x=pos;<br>        <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)<br>        &#123;<br>            ans+=ask(<span class="hljs-number">1</span>,dfn[top[x]],dfn[x]);<br>            x=fa[top[x]];<br>        &#125;<br>        ans=v2+dis[pos]*v1<span class="hljs-number">-2</span>*ans;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>重链剖分</tag>
      
      <tag>重心性质</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二项式反演</title>
    <link href="/2021/02/15/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/"/>
    <url>/2021/02/15/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/</url>
    
    <content type="html"><![CDATA[<p>鸽了好久的二项式反演。</p><span id="more"></span><p>反演本质上是给你一个数列 <span class="math inline">\(g\)</span>，<spanclass="math inline">\(g_n=\sum\limits_{i=0}^{n}a_{n,i}f_i\)</span>。</p><p>让你去求 <span class="math inline">\(f\)</span> 。</p><p>发现其实本质上是一个 行向量<spanclass="math inline">\(g\)</span>，等于另外一个行向量 <spanclass="math inline">\(f\)</span>，乘上系数矩阵。</p><p>反演的过程相当于求出了系数矩阵的逆矩阵。</p><p>二项式反演想说的是什么呢？ <span class="math display">\[g_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}f_i\Leftrightarrowf_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}g_i\]</span>证明后说，当你发现这两个式子竟然如此相似的时候，你应该感到十分震惊对不对。</p><p>因为这个系数矩阵的逆矩阵竟然是他自己。 <span class="math display">\[g_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}f_i\Leftrightarrowf_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}g_i\\同时显然有 g_n=\sum\limits_{i=0}^{n}\binom{n}{i}f_i\Leftrightarrowf_n=\sum\limits_{i=0}^{n} (-1)^{n-i}\binom{n}{i}g_i\]</span></p><p>那先考虑证明。</p><ol type="1"><li><p>运用 <span class="math inline">\(EGF\)</span> 的知识，有： <spanclass="math display">\[\frac{g_n}{n!}=\sum_{i=1}^{n}\frac{1}{(n-1)!}\cdot\frac{f_i}{i!}\]</span> 上式显然是卷积形式，设 <span class="math inline">\(G\)</span>是 <span class="math inline">\(g_n\)</span> 的生成函数 ，<spanclass="math inline">\(F\)</span> 是 <spanclass="math inline">\(f_n\)</span> 的生成函数。 <spanclass="math display">\[\begin{aligned}G&amp;=e^{x}\times F\\F&amp;=G\times e^{-x}\\[n]e^{-x}&amp;=\frac{(-1)^n}{n!}\\\frac{f_n}{n!}&amp;=\sum\limits_{i=0}^{n}\frac{(-1)^{n-i}}{(n-i)!}\cdot\frac{g_i}{i!}\\f_n&amp;=\sum\limits_{i=0}^{n}(-1)^{n-i}\binom{n}{i}g_i\end{aligned}\]</span></p></li><li><p>直接带入。 <span class="math display">\[\begin{aligned}f_n&amp;=\sum\limits_{i=0}^{n}(-1)^{n-i}\frac{n!}{i!\times(n-i)!}\sum_{j=0}^{i}\frac{i!}{j!\times(i-j)!}f_j\\f_n&amp;=\sum_{j=0}^{n}\frac{n!}{j!}\sum_{i=j}^{n}(-1)^{n-i}\frac{f_j}{(n-i)!(i-j)!}\\f_n&amp;=\sum_{j=0}^{n}\frac{n!}{j!}f_j\sum_{i=0}^{n-j}(-1)^i\frac{1}{i!((n-j)-i)!}\\f_n&amp;=\sum_{j=0}^{n}\binom{n}{j}f_j\sum_{i=0}^{n-j}(-1)^i\binom{n-j}{i}\\f_n&amp;=\sum_{j=0}^{n}\binom{n}{j}f_j(1-1)^{n-j}\\\end{aligned}\]</span> 显然只有当 <span class="math inline">\(n=j\)</span>时，后面的系数才不是 <span class="math inline">\(0\)</span>。</p><p>也就是 <spanclass="math inline">\(f_n=\sum\limits_{j=n}^{n}\binom{n}{j}f_j\)</span>,也就是 <span class="math inline">\(f_n=f_n\)</span>。</p></li></ol><p><del>你知道二项式反演的四种写法吗？</del></p><p>有 ： <span class="math display">\[g_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}f_i\Leftrightarrowf_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}g_i\]</span>这个证明可以由初始系数矩阵，翻转行列证明。由于初始的矩阵的逆矩阵等于本身，性质比较好。</p><p>可以说明初始矩阵的转置的逆矩阵也是该矩阵的转置。</p><p><span class="math inline">\(A=A^{-1}\LeftrightarrowA^T={A^T}^{-1}\)</span></p><p>所以我们现在有4种二项式反演形式。 <span class="math display">\[\begin{aligned}g_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}f_i&amp;\Leftrightarrowf_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}g_i\\g_n=\sum\limits_{i=0}^{n}\binom{n}{i}f_i&amp;\Leftrightarrowf_n=\sum\limits_{i=0}^{n} (-1)^{n-i}\binom{n}{i}g_i\\g_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}f_i&amp;\Leftrightarrowf_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}g_i\\g_n=\sum_{i=n}^{}\binom{i}{n}f_i&amp;\Leftrightarrowf_n=\sum_{i=n}^{}(-1)^{i-n}\binom{i}{n}g_i\end{aligned}\]</span> 例题</p><p><ahref="https://www.luogu.com.cn/problem/P4859">已经没有什么好害怕的了</a></p><p><a href="https://www.luogu.com.cn/problem/CF285E">Positions inPermutations</a></p><p>[<ahref="https://www.luogu.com.cn/problem/P5401">CTS2019]珍珠</a></p><hr /><p>是这样的，我在一段时间内，对于 <spanclass="math inline">\(O(n^2)\)</span>级别的可二项式反演题我是这么做到。</p><p>就是考虑容斥，定义我们钦定的答案是 <spanclass="math inline">\(f\)</span>，真实答案是 <spanclass="math inline">\(g\)</span>。</p><p><span class="math inline">\(f\)</span> 会咋什么时候算重，对于 <spanclass="math inline">\(f_i\)</span> 我们枚举 <spanclass="math inline">\(j&gt;i\)</span> ,含义是假如恰好选 <spanclass="math inline">\(j\)</span> 个会算重多少次。</p><p><span class="math inline">\(f_i=f_i-\binom{j}{i}g_j\)</span>这样把这个恰好减去，（考虑 <span class="math inline">\(j\)</span>个位置我们对于能钦定 <span class="math inline">\(\binom{j}{i}\)</span>次）。</p><p>反枚举 <span class="math inline">\(i\)</span> 更新即可。</p><p>这个其实就是 <spanclass="math inline">\(g_i=f_i-\sum_{j&gt;i}\binom{j}{i}g_j\)</span>,这是个方程，移项<spanclass="math inline">\(f_i=\sum_{j&gt;i}\binom{j}{i}g_j+g_i=\sum_{j\gei}\binom{j}{i}g_j\)</span>。</p><p>所以这个严格弱于二项式反演，可拓展性不高。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数学</tag>
      
      <tag>数论</tag>
      
      <tag>二项式反演</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JLOI2015 骗我呢</title>
    <link href="/2021/02/15/JLOI2015/"/>
    <url>/2021/02/15/JLOI2015/</url>
    
    <content type="html"><![CDATA[<p>把大小关系看成一条边。</p><span id="more"></span><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/5ld2ucd2.png" /></p><p>发现，最长的路径，就是从 <spanclass="math inline">\((1,x)\rightarrow(n,y)\)</span> 的这样长度为 <spanclass="math inline">\(m\)</span> 的路径。</p><p>现在一共有 <span class="math inline">\(m+1\)</span>种不同数值，所以每条路径只会有 <span class="math inline">\(1\)</span>处可以选择比正常大 <span class="math inline">\(1\)</span> 的数值。</p><p>所以假如要选某一个点作为 <span class="math inline">\(+1\)</span>的点，此时，他左上的的点都不能选。</p><p>所以可以有以下爆搜的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,ans;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> down)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==n+<span class="hljs-number">1</span>) &#123;ans++;<span class="hljs-keyword">return</span> ;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=down;i&lt;=m;i++) dfs(x+<span class="hljs-number">1</span>,i);<br>    dfs(x+<span class="hljs-number">1</span>,max(down<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr /><p>发现这个选的状态可以理解成走格子。</p><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/6yvatxj4.png" /></p><p>假如上次选的是红色节点，那么红色圈起来的就是可选。</p><p>可以选的状态，相当于每次向右下走，接下来向上走能到的节点状态。</p><p>那么可以用一条只往 右下，上，走的路径，代表一种状态。</p><p>这个代表是双射，证明比较显然。</p><p>任何一种状态可以用一条路径表示，这个显然。</p><p>一条路径，可以代表一种状态，就是看那一步是向右下走。</p><p><span class="math inline">\(tips\)</span></p><p>注意这个最下一排，我们要新建一排 虚点使其可以转移。</p><p>为了统计最后一列的和，可以新建一排虚点，然后把路径个数和转成到点<span class="math inline">\((n+1,m+1)\)</span> 的路径个数。</p><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/yit8z40d.png" /></p><p>统计路径大概的 <span class="math inline">\(dp\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,ans;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">1000</span>][<span class="hljs-number">1000</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m+<span class="hljs-number">1</span>;i++) dp[<span class="hljs-number">1</span>][i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        dp[i][<span class="hljs-number">0</span>]=dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m+<span class="hljs-number">1</span>;j++) dp[i][j]=dp[i<span class="hljs-number">-1</span>][j+<span class="hljs-number">1</span>]+dp[i][j<span class="hljs-number">-1</span>], dp[i][j]%=mod;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m+<span class="hljs-number">1</span>;i++) ans+=dp[n][i],ans%=mod;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr /><p>把这个斜着的图“转正”。</p><p>本质上相当于是一个矩形，有两条线限制，不能经过这两条线的点。</p><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/p5p81po3.png" /></p><p>如果只有一条线限制，可以用折线法，构造双射。</p><p>如果我们对于每一条线折一次线，会用重复，比如说，我们假设经过第一条线叫做 <span class="math inline">\(A\)</span> ，经过第二条线叫做<span class="math inline">\(B\)</span>。注意，假如连续经过<spanclass="math inline">\(A\ or \ B\)</span> ，我们只算一次。</p><p>那么 <span class="math inline">\(AB\)</span> 。会被 <spanclass="math inline">\(A\)</span> 算一遍 ，<spanclass="math inline">\(B\)</span> 算一遍。</p><p>这时我们要减去 <span class="math inline">\(AB,BA\)</span>。此时还会有类似问题 。于是考虑容斥，这个类似前缀容斥。</p><p>即对 <span class="math inline">\(ABAB\cdots\)</span>这种串进行容斥。</p><p><span class="math inline">\(tips\)</span></p><p>具体就是每次把一条直线根据另一条直线对称，然后把终点关于“对称后”这条新直线，再次对称。</p><p>由于每次问题都可以化归成经过两条直线的路径数，而且直线斜率均为 <spanclass="math inline">\(1\)</span>，我们可以只维护截距，这样很好计算对称后的坐标，新的截距等你所维护的东西。</p><p>折线法代码。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>,N=<span class="hljs-number">3e6</span>+<span class="hljs-number">10</span>;;<br><span class="hljs-keyword">int</span> f[N],finv[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a%mod;a=a*a%mod,b&gt;&gt;=<span class="hljs-number">1</span>;&#125;<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br>inline pair&lt;int,int&gt; ref(int x,int y,int d)&#123;return make_pair(y-d,x+y-(y-d));&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reflect</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> a+a-b;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">comb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">0</span>||m&lt;<span class="hljs-number">0</span>||n&lt;m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> f[n]*finv[n-m]%mod*finv[m]%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;n++,m+=<span class="hljs-number">2</span>;<br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;finv[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n+n+m;i++) f[i]=f[i<span class="hljs-number">-1</span>]*i%mod;<br>    finv[n+n+m]=qpow(f[n+n+m],mod<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n+n+m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--) finv[i]=finv[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%mod;<br>    <span class="hljs-keyword">int</span> x,y,a,b,ans=<span class="hljs-number">0</span>;<br>    x=n<span class="hljs-number">-1</span>,y=n+m<span class="hljs-number">-1</span><span class="hljs-number">-1</span>;a=<span class="hljs-number">-1</span>,b=m;<br>    ans=comb(x+y,x);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2</span>;j++)<br>    &#123;<br>        x=n<span class="hljs-number">-1</span>,y=n+m<span class="hljs-number">-1</span><span class="hljs-number">-1</span>;a=m,b=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">2</span>) swap(a,b);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n+n+m;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pot=ref(x,y,a);x=pot.first,y=pot.second;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>)<br>                &#123;<br>                    a=reflect(b,a);<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pot=ref(x,y,a);<br>                    x=pot.first,y=pot.second;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    b=reflect(a,b);<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pot=ref(x,y,b);<br>                    x=pot.first,y=pot.second;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>) <br>            &#123;<br>                ans-=comb(x+y,x);<br>                <span class="hljs-keyword">if</span>(ans&lt;<span class="hljs-number">0</span>) ans+=mod;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <br>            &#123;<br>                ans+=comb(x+y,x);<br>                <span class="hljs-keyword">if</span>(ans&gt;=mod) ans-=mod;<br>            &#125;<br>        <br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">23 233</span><br><span class="hljs-comment">938980383</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>组合数学</tag>
      
      <tag>折线法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wc2021 t3 fib</title>
    <link href="/2021/02/14/wc2021-t3-fib/"/>
    <url>/2021/02/14/wc2021-t3-fib/</url>
    
    <content type="html"><![CDATA[<p>wc 2021 的 T3。</p><span id="more"></span><p>今天有点晚了，写一下这个题的大体思路。</p><p>首先由题意： <span class="math display">\[F_n=F_{n-1}+F_{n-2},F_0=a,F_{1}=b\]</span> 记录斐波那契数列为 <spanclass="math inline">\(f_i,f_0=0\)</span> ，特殊定义 <spanclass="math inline">\(f_{-1}=1\)</span>。 <span class="math display">\[有\ F_n=a\cdot f_{n-1}+b\cdot f_{n}\]</span> 问题转换成 给你 <spanclass="math inline">\(a,b\)</span>,让你求使得 <spanclass="math inline">\(a\cdot f_{n-1}+b\cdot f_{n}\equiv0\pmod{m}\)</span> 最小的 <span class="math inline">\(n\)</span>。</p><ol type="1"><li><p>首先，当 <span class="math inline">\(m\)</span>为质数的时候很好做，因为 <spanclass="math inline">\(a,b,f_n,f_{n-1}\)</span>的逆元都存在，可以直接移项，做除法。</p></li><li><p>其次由于斐波那契在 <span class="math inline">\(\bmod m\)</span>的情况下是纯循环的（暂时不会证明），假如 <spanclass="math inline">\(m=\prod p_i\)</span>，我们也是也已轻松合并的。</p></li><li><p>但是并不是所有的 <span class="math inline">\(m\)</span>都可以分解成一堆会不相同的素数积，考虑 <spanclass="math inline">\(m=\prodp_i^{\alpha_i}\)</span>，合并似乎还是很好合并。（本质上就是求一堆同余方程组的最小解），问题转化为解决<span class="math inline">\(m=p^{\alpha}\)</span> 的问题。</p></li><li><p><span class="math inline">\(update\)</span>我想了一下，发现合并并不显然，这里可能是最重要的一步，</p></li></ol><p>假设现在我们有一个对于 <span class="math inline">\(F_x \bmodp^\alpha=0\)</span> 的最小解，而他的循环节可能并不是斐波那契 <spanclass="math inline">\(f_x \bmod p^\alpha=0\)</span> 的循环节。</p><p>有结论 <span class="math inline">\(F_x \bmod p^\alpha=0\)</span>的循环节，肯定是 <span class="math inline">\(f_x \bmodp^\alpha=0\)</span> 的循环节的因数。</p><p>证明：</p><ol type="1"><li><p>显然 <span class="math inline">\(f_x\bmod p^\alpha =0\)</span>的循环节肯定是 <span class="math inline">\(F_x\bmod p^\alpha=0\)</span>的循环节，根据 <span class="math inline">\(F_n\)</span>表达式可知。</p></li><li><p>设 <span class="math inline">\(F_x\bmod p^\alpha=0\)</span>最小解为 <span class="math inline">\(x_1\)</span>，第二小解为 <spanclass="math inline">\(x_2\)</span> 。</p><p>那么有结论 <span class="math inline">\(x2-x1\)</span>是一个循环节，证明可能比较感性。</p><p>当前 <span class="math inline">\(F_x\)</span> 数列长得样子应该是：<span class="math display">\[\cdots,-k,0,k,k,2k,\cdots,f_i\times k,\cdots,-t,0,t,2t,\cdots\]</span> 就是 <span class="math inline">\(0\equiv f_i\timesk\pmod{p^\alpha}\)</span>,有两种可能 <spanclass="math inline">\(p^\alpha\mid f_i\)</span>, <spanclass="math inline">\(p^\beta\mid k,p^{\alpha-\beta}\mid f_i\)</span>。</p><p>第一种可能证明显然，第二种可能因为有 <spanclass="math inline">\(t\)</span> 是数倍的 <spanclass="math inline">\(k\)</span> ，那么显然也有 <spanclass="math inline">\(p^\beta\mid t\)</span>,接下来的证明显然。</p></li><li><p>如果这个新循环节不是 <span class="math inline">\(f_x\bmodp^\alpha=0\)</span> 的循环节，那可以根据类似上面的证明，证明出 <spanclass="math inline">\((l_1,l_2)\)</span> 也是一个循环节，<spanclass="math inline">\(l_1,l_2\)</span>分别为之前的两个循环节（新循环节，和斐波那契自带的循环节）。 <spanclass="math inline">\((l_1,l_2)\)</span> 显然也是 <spanclass="math inline">\(l_2\)</span> 的一个因数。</p></li></ol><p>如是我们为了找到解的循环节可以去找斐波那契循环节的因数，然后判断该长度是否为循环节。这样一定可以找到最小的循环节。</p><p><span class="math inline">\(10^5\)</span> 范围内数的因子 <spanclass="math inline">\(\leq 128\)</span> 此处暴力即可。</p><ol start="5" type="1"><li>由于 <span class="math inline">\(m=p^{\alpha}\)</span>,逆元可能不存在，按照基本套路，我们使用乘法方程，并且提取每一个数的<span class="math inline">\(p\)</span> 因子</li></ol><p>为了之后表达方便，令 <spanclass="math inline">\(a&#39;,b&#39;\)</span> 表示现在的 <spanclass="math inline">\(a,b\)</span>。 <span class="math display">\[   a&#39;=a\cdot p^{A}\ ,\ b&#39;=b\cdot p^{B}\ ,\ f_{n-1}=c\cdot p^{C}\,\ f_{n}=d\cdot p^D\ ( \ a,b,c,d\perp p)   \]</span> 原方程化为： <span class="math display">\[   a\times p^A\cdot c\times p^C+b\times p^B\cdot d\times p^D\equiv0\pmod{p^\alpha}   \]</span></p><p><span class="math display">\[   (ac)\times p^{A+C}+(bd)\times p^{B+D}\equiv 0\pmod{p^\alpha}   \]</span></p><p>这个方程成立有两种情况：</p><ol type="1"><li><span class="math inline">\(A+C\ge \alpha\)</span>,<spanclass="math inline">\(B+D\ge \alpha\)</span>。</li><li><span class="math inline">\(ac\equivbd\pmod{p^{\alpha-(A+C)}}\)</span>，且 <spanclass="math inline">\(A+C=B+D\)</span></li></ol><p>成立条件：</p><ol type="1"><li><p>在线处理 <span class="math inline">\(C\ge \alpha-A,D\ge\alpha-B\)</span> 相当于二维数点（可能会有简单方法？）（由于 <spanclass="math inline">\(A,B,C,D\)</span> 都很小直接暴力就行）。</p></li><li><p>显然等价: <span class="math display">\[\frac{a}{b}\equiv \frac{d}{c}\pmod{p^{\alpha-(A+C)}},A-B=D-C\]</span></p></li><li><p>预处理 ，对每一个 <span class="math inline">\(m\)</span> 的质因数<span class="math inline">\(p_i\)</span>，首先处理出成立条件 <spanclass="math inline">\(1\)</span> 成立的答案。其次考虑成立条件 <spanclass="math inline">\(2\)</span> ,预处理的过程此时我们知道 <spanclass="math inline">\(C,c,D,d,\alpha\)</span> ，不知道 <spanclass="math inline">\(A,a,B,b\)</span> 。发现 <spanclass="math inline">\(A\leq \log_{p}^{m}\)</span> , 即<spanclass="math inline">\(A\)</span> 的值域很小 ，此时暴力枚举 <spanclass="math inline">\(A\)</span> ，此时可以计算出 <spanclass="math inline">\(B\)</span> 的取值，从而可以处理出 <spanclass="math inline">\(\frac{d}{c}\bmodp^{\alpha-(A+C)}\)</span>,将其存进表。</p></li></ol><p>不难发现，此处复杂度为枚举 <span class="math inline">\(A\)</span>的复杂度，即 <span class="math inline">\(\mathcal{O(\sum\limits_{i=1}^{k}p_i^{\alpha_i}\alpha_i)}\)</span>或者<spanclass="math inline">\(\mathcal{O(\sum\limits_{i=1}^{k}p_i^{\alpha_i}\alpha_i^2)}\)</span> 。(看你成立条件 <spanclass="math inline">\(1\)</span> 的具体处理方法)。</p><p>询问时候，对于每个 <span class="math inline">\(m\)</span> 的质因数<span class="math inline">\(p_i\)</span> ，我们可以枚举 <spanclass="math inline">\(C\)</span> 然后，可以算出 <spanclass="math inline">\(\frac{a}{b} \bmod {p^{\alpha-(A+C)}}\)</span>的值，暴力查表，找到一组特解。</p><p>不难发现，此处的复杂度为枚举 <span class="math inline">\(C\)</span>的复杂度，和寻找循环节的复杂度，即 <spanclass="math inline">\(\mathcal{O(\sum\limits_{i=1}^{k}d(3p_i^{\alpha_i})+\sum\limits _{i=1}^k\alpha_i)}\)</span>。</p><p>代码写的可能比较丑。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;tr1/unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> T,m;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> c=getchar();x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(c&gt;<span class="hljs-string">&#x27;9&#x27;</span>||c&lt;<span class="hljs-string">&#x27;0&#x27;</span>) c=getchar();<br>    <span class="hljs-keyword">while</span>(c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>) x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+c-<span class="hljs-string">&#x27;0&#x27;</span>,c=getchar();<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; divs[<span class="hljs-number">300010</span>];<br><span class="hljs-keyword">int</span> p[<span class="hljs-number">10</span>],k[<span class="hljs-number">10</span>],t[<span class="hljs-number">10</span>],loop[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">int</span> f[<span class="hljs-number">10</span>][<span class="hljs-number">300010</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<span class="hljs-keyword">return</span> gcd(b,a%b);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a%p;a=a*a%p,b=b&gt;&gt;<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ppow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a;a=a*a,b=b&gt;&gt;<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-keyword">namespace</span> Inv<br>&#123;<br>    <span class="hljs-keyword">int</span> phi[<span class="hljs-number">100010</span>],pr[<span class="hljs-number">100010</span>],p[<span class="hljs-number">100010</span>],tot=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">100000</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pr[i]==<span class="hljs-number">0</span>) p[++tot]=i,phi[i]=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=tot&amp;&amp;p[j]*i&lt;=<span class="hljs-number">100000</span>;j++)<br>            &#123;<br>                pr[i*p[j]]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    phi[i*p[j]]=p[j]*phi[i];<span class="hljs-keyword">break</span>;<br>                &#125;<br>                phi[i*p[j]]=(p[j]<span class="hljs-number">-1</span>)*phi[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> m)</span></span>&#123;<span class="hljs-keyword">return</span> qpow(x,phi[m]<span class="hljs-number">-1</span>,m);&#125;<br>&#125;<br><br>inline pair&lt;int,int&gt; nump(int x,int p,int ki)<br>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(ki,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span>(x%p==<span class="hljs-number">0</span>) k++,x/=p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(min(k,ki),x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;<br>    exgcd(b,a%b,y,x); y-=(a/b)*x;<br>&#125;<br><span class="hljs-keyword">int</span> can[<span class="hljs-number">10</span>][<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br>tr1::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; z[<span class="hljs-number">10</span>][<span class="hljs-number">20</span>][<span class="hljs-number">20</span>][<span class="hljs-number">40</span>];<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Inv::init();<br>    read(T),read(m);<br>    <span class="hljs-keyword">int</span> mm=m;<br>    <span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(m%i==<span class="hljs-number">0</span>)<br>        &#123;<br>            p[++tot]=i;t[tot]=<span class="hljs-number">1</span>;k[tot]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(m%i==<span class="hljs-number">0</span>) m/=i,t[tot]*=i,k[tot]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> MAXX=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(m&gt;<span class="hljs-number">1</span>) p[++tot]=m,t[tot]=m,k[tot]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<br>    &#123;<br>        f[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;f[i][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-number">6</span>*t[i];j++)<br>        &#123;<br>            <br>            f[i][j]=(f[i][j<span class="hljs-number">-1</span>]+f[i][j<span class="hljs-number">-2</span>])%t[i]; <br>            <span class="hljs-keyword">if</span>(f[i][j<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;f[i][j]==<span class="hljs-number">1</span>)<br>            &#123;<br>                loop[i]=j<span class="hljs-number">-1</span>; <span class="hljs-comment">// 0-&gt; loop -&gt; 2loop ...and so on </span><br>                MAXX=max(MAXX,loop[i]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; vc=nump(f[i][j<span class="hljs-number">-1</span>],p[i],k[i]),vd=nump(f[i][j],p[i],k[i]);<br>            <span class="hljs-keyword">int</span> C=vc.first,c=vc.second,D=vd.first,d=vd.second;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a=max(<span class="hljs-number">0ll</span>,k[i]-C);a&lt;=k[i];a++) <br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b=max(<span class="hljs-number">0ll</span>,k[i]-D);b&lt;=k[i];b++) can[i][a][b]=j;<br>            <span class="hljs-keyword">int</span> tmp=ppow(p[i],k[i]-C);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> A=<span class="hljs-number">0</span>;A+C&lt;k[i];A++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> res=d*Inv::inv(c,tmp)%tmp;<br>                <span class="hljs-keyword">if</span>(z[i][A][D-C+k[i]][C].count(res)==<span class="hljs-number">0</span>)<br>                z[i][A][D-C+k[i]][C][res]=j;<br>                tmp/=p[i];<br>            &#125;<span class="hljs-comment">// z : p_i , A -&gt; D-C  -&gt; d/c</span><br>        &#125; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=loop[i]*<span class="hljs-number">2</span>;j++) f[i][j]=(f[i][j<span class="hljs-number">-1</span>]+f[i][j<span class="hljs-number">-2</span>])%t[i];<br>    &#125;<br>    <span class="hljs-comment">/////////////////</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=MAXX;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j*i&lt;=MAXX;j++) divs[i*j].push_back(i);<br>    &#125;<br>    m=mm;<br>    <span class="hljs-keyword">int</span> a0=<span class="hljs-number">0</span>,m0=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> a,b,aa,bb,A,B;<br>        read(aa),read(bb);<br>        aa%=m,bb%=m;<br>        <span class="hljs-keyword">if</span>(aa==<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-built_in">endl</span>;;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span>(bb==<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">continue</span>;&#125;<br>        a0=<span class="hljs-number">0</span>,m0=<span class="hljs-number">1</span>;<span class="hljs-keyword">bool</span> FLG=<span class="hljs-number">0</span>,fag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<br>        &#123;<br>            <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; va=nump(aa,p[i],k[i]),vb=nump(bb,p[i],k[i]);<br>            a=va.second,A=va.first;<br>            b=vb.second,B=vb.first;<br>            <span class="hljs-keyword">int</span> ans=<span class="hljs-number">-1</span>,tmp;<br>            <span class="hljs-keyword">if</span>(aa%t[i]==<span class="hljs-number">0</span>) &#123;ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>(bb%t[i]==<span class="hljs-number">0</span>) &#123;ans=<span class="hljs-number">1</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>(can[i][A][B]!=<span class="hljs-number">0</span>) &#123;ans=can[i][A][B];<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>((a*f[i][<span class="hljs-number">0</span>]+b*f[i][<span class="hljs-number">1</span>])%t[i]==<span class="hljs-number">0</span>)&#123;ans=<span class="hljs-number">1</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            tmp=ppow(p[i],k[i]-A);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> C=<span class="hljs-number">0</span>;A+C&lt;k[i];C++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> res=a*Inv::inv(b,tmp)%tmp;<br>                res=-res+tmp+tmp;<br>                res%=tmp;<br>                <span class="hljs-keyword">if</span>(z[i][A][A-B+k[i]][C].count(res))<br>                &#123;<br>                    ans=z[i][A][A-B+k[i]][C][res];<br>                    <span class="hljs-keyword">goto</span> chk;<br>                &#125;<br>                tmp/=p[i];<br>            &#125;<br>            chk:;<br>            ans%=loop[i];<br>            <span class="hljs-keyword">if</span>(ans==<span class="hljs-number">-1</span>) &#123;<br>                FLG=<span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> M=<span class="hljs-number">0</span>,A=ans;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:divs[loop[i]])<br>            &#123;<br>                <span class="hljs-keyword">if</span>((aa*f[i][x+ans<span class="hljs-number">-1</span>]+bb*f[i][x+ans])%t[i]==<span class="hljs-number">0</span>) <br>                &#123;<br>                    M=x;<span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">/////////////////////////////////////</span><br>            <span class="hljs-keyword">int</span> g=gcd(M,m0);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(A-a0)%g!=<span class="hljs-number">0</span>)&#123;<br>                fag=<span class="hljs-number">1</span>;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> x,y;<br>            exgcd(m0/g,M/g,x,y);<br>            x%=(M/g),x+=(M/g),x%=(M/g);<br>            <span class="hljs-keyword">int</span> MM=m0;<br>            m0=m0/g*M;x=x*((A-a0)/g)%m0+m0;x%=m0;<br>            a0=x%m0*MM%m0+a0;a0%=m0;<br>            a0+=m0;a0%=m0;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(FLG==<span class="hljs-number">1</span>||fag==<span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,a0);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>fib循环节</tag>
      
      <tag>人类智慧题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>点分治</title>
    <link href="/2021/02/13/point-divide-simple-thoughts/"/>
    <url>/2021/02/13/point-divide-simple-thoughts/</url>
    
    <content type="html"><![CDATA[<p>点分治 &amp; 点分树 的一些理解。</p><span id="more"></span><h2 id="点分治">点分治</h2><h3 id="什么是点分治">什么是点分治</h3><p>点分治，是树分治的一种。</p><p>树分治包括了点分治，边分治，链分治。</p><p>点分治主要处理两点间路径信息的问题。</p><h3 id="点分治怎么用">点分治怎么用</h3><p>拿最基本的<ahref="https://www.luogu.com.cn/problem/P3806">问题</a>入手，给你一棵树，让你统计树上距离为<span class="math inline">\(k\)</span> 的点对个数。</p><p>形式的说 <spanclass="math inline">\(\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}[dist(i,j)=k]\)</span>。</p><h4 id="naive-sol1"><span class="math inline">\(naive\sol1\)</span></h4><p>当我们知道一个端点 <span class="math inline">\(i\)</span>的时候，我们可以 <span class="math inline">\(\mathcal{O(n)}\)</span>的求出该点的贡献，每个点都 <spanclass="math inline">\(\mathcal{O(n)}\)</span> 计算，总复杂度<spanclass="math inline">\(\mathcal{O(n^2)}\)</span>。</p><h4 id="naive-sol2"><span class="math inline">\(naive\sol2\)</span></h4><p>考虑分治，随机选一个点 <span class="math inline">\(u\)</span> ，把点<span class="math inline">\(u\)</span>删掉，算出剩下的每个连通块的子问题和。同时把经过点 <spanclass="math inline">\(u\)</span> 的链的答案统计出来。</p><p>由于分治，复杂度为 <span class="math inline">\(\mathcal{O(dep\timesn)}\)</span> ,<span class="math inline">\(dep\)</span> 为分治层数。</p><h4 id="right-sol"><span class="math inline">\(right\ sol\)</span></h4><p>发现让分治层数最小，本质上是让每次分治时产生的最大的连通块最小。因为此时分治层数可以看成最大的连通块变成<span class="math inline">\(1\)</span> 的次数。</p><p>发现这个定义本质上就是找重心。在重心心处分治。</p><p>由于中心的性质，每一次分割后产生的最大的连通块 <spanclass="math inline">\(maxsz\leq\lceil\frac{sz}{2}\rceil\)</span></p><p>所以 <span class="math inline">\(dep\)</span> 一定是 <spanclass="math inline">\(O(\log_{2}n)\)</span> 级别的。</p><p>至于合并，也就一个 <span class="math inline">\(O(sz)\)</span>解决的问题。</p><hr /><h2 id="点分树">点分树</h2><h3 id="什么是点分树">什么是点分树</h3><p>假如当前重心为 <span class="math inline">\(u\)</span> 我们把删去<span class="math inline">\(u\)</span> 之后产生的新重心 <spanclass="math inline">\(v_{1,2,\cdots,k}\)</span> 向 <spanclass="math inline">\(u\)</span> 连边。</p><p>不难发现最终形态是一棵树。</p><p>我们把这棵树称作点分树。</p><h3 id="点分树有什么用">点分树有什么用</h3><p>观察点分治，我们每次合并答案都只在该连通块的重心处合并该连通块内的贡献。</p><p>所以假如谈一个点 <span class="math inline">\(u\)</span>的贡献，那么他只可能在 <span class="math inline">\(u\)</span> 点，使<span class="math inline">\(u\)</span> 点单独成为连通块所删除的重心<span class="math inline">\(v\)</span>，使 <spanclass="math inline">\(v\)</span>点所在连通块被从一个大连通块剥离出来而删的重心 <spanclass="math inline">\(z\)</span>，and so on 。</p><p>发现产生贡献的重心，全都在 点分树中 <spanclass="math inline">\(u\)</span> 到根的路径上。</p><p>所以我们统计答案相当于在统计一条链，而这个链的长度是 <spanclass="math inline">\(\mathcal{O(\log_2n)}\)</span> 级别的。</p><p>所以我们可以通过点分树来维护一些更难于直接记录的信息，以及一些修改操作。</p><p>对于点分治，点分树，有一点需要注意。</p><p>为什么点分治是对的？原因就在于，通过在重心时对链的合并，本质上就已经完成枚举树上的每一条路径了。</p><p>所以点分治本质上和那个 <spanclass="math inline">\(\mathcal{O(n^2)}\)</span>的暴力时一样在枚举路径的。</p><p>所以在看到有树上问题问路径的一些情况，不妨考虑一下点分治。</p><h2 id="练手推荐">练手推荐</h2><p><a href="https://www.luogu.com.cn/problem/P6329">震波</a></p><p><a href="https://www.luogu.com.cn/problem/P2056">捉迷藏</a></p><p><a href="https://www.luogu.com.cn/problem/P4115">Qtree4</a></p><p><a href="https://www.luogu.com.cn/problem/P3241">开店</a></p><p><a href="https://www.luogu.com.cn/problem/P2664">树上游戏</a></p><p>本人实力有限，都是模板题了/kk</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simple thoughts</tag>
      
      <tag>点分树+点分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1452E</title>
    <link href="/2020/12/20/cf1452E/"/>
    <url>/2020/12/20/cf1452E/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1452/problem/E">Link</a></p><span id="more"></span><h3 id="题解">题解</h3><h4 id="hint1">hint1</h4><p>如果只有一个老师的话，很好算。</p><h4 id="hint2">hint2</h4><p>我们可以通过算每一个学生的贡献，算出总体答案。</p><h4 id="sol">sol</h4><p>枚举第一个老师的左端点。</p><p>算每一个同学对第二个老师放的位置的贡献。</p><p><img src="\img\1.png" /></p><p>很容易发现这个贡献是两段等差数列，那么我们可以差分两次维护。</p><h3 id="复杂度">复杂度</h3><p><span class="math inline">\(\mathcal{O(nm)}\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,k;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2000</span>+<span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> l[N],r[N];<br><span class="hljs-keyword">int</span> sum[N],ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> f[N],cf[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;y) <span class="hljs-keyword">return</span> ;<br>    cf[x]+=v,cf[y+<span class="hljs-number">1</span>]-=v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;l[i]&gt;&gt;r[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n-k+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-built_in">memset</span>(sum,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(sum));<br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));<br>        <span class="hljs-built_in">memset</span>(cf,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(cf));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=i+k<span class="hljs-number">-1</span>;j++) sum[j]=sum[j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+k;j&lt;=n;j++) sum[j]=sum[j<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) res+=sum[r[j]]-sum[l[j]<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">int</span> x=i,y=i+k<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(y&lt;l[j]) &#123;<br>                modify(l[j]-k+<span class="hljs-number">1</span>,min(l[j],r[j]-k+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>);<br>                modify(max(l[j],r[j]-k+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>,r[j]+<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l[j]&lt;=y&amp;&amp;r[j]&gt;y)&#123;<br>                modify(x+<span class="hljs-number">1</span>,min(l[j],r[j]-k+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>);<br>                modify(max(l[j],r[j]-k+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>,r[j]-(y-l[j]),<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> tmp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            cf[j]+=cf[j<span class="hljs-number">-1</span>];<br>            tmp+=cf[j];<br>            ans=max(ans,res+tmp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>差分</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

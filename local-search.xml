<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>arc101C | Ribbon on tree</title>
    <link href="/2021/09/18/arc101c/"/>
    <url>/2021/09/18/arc101c/</url>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/arc101/tasks/arc101_c">题意</a></p><p>题目大意解释一下，让你给一颗树结点配对，染色每对点。如果每一条边都有颜色，那么就算一种合法的情况。</p><hr /><h3 id="sol">sol</h3><p>0正：对于任意</p><p>反：存在</p><p>显然正难则反。</p><p>存在难，所以显然钦定然后容斥。</p><hr /><p>这样大体idea 出来了。</p><h4 id="step1">step1</h4><p>首先发现一件事情,我们可以通过把一颗树，切掉一条边，变成两颗子树，递归分别求解。</p><p>这样求出的是不包括 钦定的这条边的合法情况数。</p><p>这样显然可以容斥。</p><p><span class="math inline">\(\texttt{Complexity : }\mathcal{O(2^n)}\)</span>.</p><h4 id="step2">step2</h4><p>复杂度在于现在需要决策每一条边选不选。</p><p>这样让我们想到类似背包类的 dp。</p><p><span class="math inline">\(\text{dp}_u(x)\)</span> 表示以 <span class="math inline">\(u\)</span> 为根的子树，与 <span class="math inline">\(u\)</span> 相连有 <span class="math inline">\(x\)</span> 个。</p>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>IN-EX principle</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/09/13/script/"/>
    <url>/2021/09/13/script/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Cumulative Sum</title>
    <link href="/2021/09/12/abc208f/"/>
    <url>/2021/09/12/abc208f/</url>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="https://atcoder.jp/contests/abc208/tasks/abc208_f">题意</a></h3><h3 id="题解">题解</h3><h4 id="part1">part1</h4><p><span class="math inline">\(n\)</span> 很大,但 <span class="math inline">\(m,k\)</span> 很小，这提示了我们。</p><p>把 <span class="math inline">\(f(x,y)\)</span> 看成若干个关于 <span class="math inline">\(x\)</span> 的多项式，<span class="math inline">\(f_y(x)\)</span> 。</p><p>显然 <span class="math inline">\(y=0\)</span> 时 <span class="math inline">\(f_y(x)\)</span> 是一个 <span class="math inline">\(k\)</span> 次多项式。</p><p>考虑由于 <span class="math inline">\(f_y(x)\leftarrow f_y(x-1)+f_{y-1}(x)\)</span> 。</p><p>显然 <span class="math inline">\(f_y(x)\)</span> 本质上是一个 <span class="math inline">\(f_{y-1}(x)\)</span> 的前缀和，所以 <span class="math inline">\(f_y(x)\)</span> 次数是 <span class="math inline">\(f_{y-1}(x)\)</span> 次数加一。</p><p>可以发现 <span class="math inline">\(f_{y}(x)\)</span> 是一个 <span class="math inline">\(k+y\)</span> 次多项式。</p><hr /><h3 id="part2">part2</h3><p>暴力计算 <span class="math inline">\(f_y(x),x\in[1,k+y]\)</span> 后。(<span class="math inline">\(\texttt{Complexity : } \mathcal{O(ky)}\)</span>).</p><p>考虑 lagrange 插值。</p><p>记住 <span class="math inline">\(x_i\)</span> 值是有规律的时候拉格朗日插值是 <span class="math inline">\(O(n)\)</span> 的，或者高一点。</p><p>分子维护一个suffix,prefix就完事了。</p><p>分子发现是每一次全加一，也是可以做的。</p><p>这样就完事了。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>拉格朗日插值</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>daily</title>
    <link href="/2021/09/10/daily/"/>
    <url>/2021/09/10/daily/</url>
    
    <content type="html"><![CDATA[<h3 id="section">🌌2021 8 19</h3><p>今天开始上网课了，可能事情会好起来了。</p><p>颓了好久。</p><p>没干什么正经事。</p><p>自己思维能力看起来真的不容乐观。</p><p>重要事情就留给明天吧。</p><h3 id="section-1">🌌2021 8 20</h3><p>确定了，并不是要否定自己初中的的学习方法，但也要改变初三末期对学习的看法。</p><p>「悔相道之不察兮，延伫乎吾将反。回朕车以复路兮，及行迷之未远。」</p><p>现在看来写作业应该是学好习的必要条件。</p><p>真正的成功不是逃避自己的不足，经过成熟的思考迎难而上才部分正确。</p><p>学OI不应该成为逃避文化课的借口。</p><p>学OI不应该成为颓废的借口。</p><h3 id="section-2">🌌2021 8 21</h3><p><code>hide: true</code></p><h3 id="section-3">🌌2021 8 22</h3><p>尽管 8.20 说的颇有道理。</p><p>但是我不能在此放弃努力学习 OI。</p><p>或许可以说为了“不要出意外”，要负责任，但是这些都不是阻挡我在高一上学期努力学习OI的理由，或者自甘堕落的借口。</p><p>我所看到，所听到的，都是强者在胜利后的“一己之言”，他们在当时有什么我没有的条件，付出了我没付出的什么，这些都是我所不知道的，调整时间的确重要，但是以调整作为借口，这是大忌。</p><p>在弱省，在一个充满颓意的东北，必须强迫自己接受，承受自己所改变不了的。</p><p>没周的做题计划也不应该取消，以着题目难度不一为借口？这种话你还好意思再说嘛？</p><p>这一个效率=0的一周，就当他是军训吧。</p><p>不必无故纠结过去的失败，重要的，能改变的还在现在和将来。</p><p>如果不具有强大的心灵，就应该不惧困难，不给自己找颓靡的借口。</p><p>现在 2021.8.22 19:20 前路漫漫，但是我已经没有什么好害怕的了。</p><p>「起风了,唯有努力生存。」</p><h3 id="section-4">🌌2021 8 31</h3><p>上周很忙碌，心情一会好，一会差，这周是差的。</p><p>心情应该一定取决于睡眠。</p><p>心情不好。</p><p>差死了。</p><p>睡觉！。</p><h3 id="section-5">🌌2021 9 3</h3><p>本应该很开心的。</p><p>看不惯有的人。</p><p>似乎是价值观不符。</p><p>似乎是自己太过傲慢。</p><p>不管了，记录一下at罢了。</p><p>有些事情，也应该释怀了。☄️</p><p>atcoder 的精髓似乎就是 rephrase</p><p>🪐</p><h3 id="section-6">🌌2021 9 5</h3><p>上午去打了疫苗。</p><p>下午颓颓颓，想学画画。</p><p>我觉得我有画画的天赋。。。</p><p>想学。</p><hr /><p>总是感觉在做梦。</p><p>我现在记不住初中每一回大型考试的具体答案。</p><p>我现在记不住天宇一次次天宇杯，阶段联系的题目。</p><p>我记不住3+3考试的题目。</p><p>我记不住我曾经对自己充满信心的世锦赛的答案。</p><p>要是让现在的我重新来过呢？</p><p>我可能只能在前几次 OI 比赛能得到更好的分数，我还记得 OI 比赛的题目。</p><p>如果让我重置一次人生呢？</p><p>或许这只是一场梦，让我醒来后呢？</p><p>我会不会重新走一次现在的道路？</p><p>我是不是就是在一个叫做”我想学计算机“的梦里？</p><p>谁知道呢！</p><p>我从未羡慕过自己。</p><p>我在很多方面的确什么也做不好。</p><p>我在人迹交往上，的确一窍不通。</p><p>我在情绪控制上也的确十分失败。</p><p>不。</p><p>我还是会羡慕自己的，只不过我更羡慕我身边的一些人。</p><p>我是个中国人。</p><p>我能够自由的发表自己对别人的看法，能发出心声（身边的十分善良，非常感谢他们能够接纳我的SB发言）。</p><p>尽管老师更喜欢学他们这个学科好的，老师也并没有对我这样学的欠佳的学生厌恶。</p><p>尽管中考压力客观上很大，我也通过主观上颓靡，使自己没有完全崩溃。</p><p>我去过NOI2021收获了一段对我而言非凡的经历。</p><hr /><p>突然想到初一的那个和同学说的”当时的梦想“实现了，但没完全实现。</p><p>很遗憾他高中不在我们学校了。</p><p>只能让那段时光封闭了吧。</p><p>在某些层面上我的确输惨了。。</p><hr /><p>1192 词。</p><h3 id="twice-update-on-9-5">twice update on 9 5</h3><p>sumsung 的屏幕我之前很卡以为被骗了。</p><p>现在才知道原来是刷新率没有调高。</p><p>😓</p><p>上周我开始半脱产。</p><p>还是比较好的。</p><p>我的心理状态还是没有得到严格控制。</p><p>现在听到noi那几个夜晚听的歌曲也还是会十分感伤。</p><p>我当时真有些结束了的感觉。</p><p>《如约而至》负全责！！！！！！</p><p>最终也没能相约老地方😂</p><p>但我也没能释怀我所有的悲伤。</p><p>all right!~~~~</p><h3 id="section-7">🌌2021 9 10</h3><p>今天又是星期五，中午放学。</p><p>周五什么作业也没写，心情也比较怅然。</p><p>学了学数学竞赛。</p><p>很自闭，但我相信我并不是从思想上都不适合。</p><p>我一定能行的。</p><p>效率极低。</p><p>2*abcF 下午的大把时间，被浪费了。</p><p>控制心情可以靠喝水了。</p><p>前路光明，还只是我的一厢情愿。</p><p>不知道。</p><p>好多事情已经在头脑中，也打算写出，可是终下不了笔。</p><p>左三右三也没有交。</p><p>看到今天的wjh,nx,myc，我真的似乎看到NOI前几天我身边人的状态，但还是wjh,myc他们更和我亲近？</p><p>他们并没有颓靡，但是看得出挺紧张的。</p><p>似乎颓靡只属于吉林的信息学。</p><p>我并不只是很在乎这次高联。就像NOI我并不是很在乎那个考试，而是，承载考试的整个NOI——余姚的校园，组委会，别的大佬，交朋友？</p><p>学数学的高联后就学习文化课了。</p><p>楼下的自习室，似乎就有空无一人了，我还是不能在那里长久的待呢。</p><p>I(ce) - scream?</p><p>Fighting dreamers?</p><p>学数学的他们身上我似乎看到了，他们对脱产的留恋，（？只是似乎），为着追求的紧张，lth最后也说出了一个让我非常敏感的词 “心理医生”。</p><p>好熟悉呀。。。。</p><p>我认为，同时希望 他们不会变成现在的我。</p><p>我想和像why,wst什么的聊聊天，可是最终我还是要付出最长时间和自己聊天，在心里聊，在大脑中聊，在作文里聊，渴望着老师给上一句评语，是有评语，但最终只是告知我作业质量不佳。</p><p>还是在躲避呀。</p><p>jump out of the window</p><p>记忆犹新？</p><p>跟风？在没有完全了解一个人前就尊崇为大哥？失败后把责任全推给“他”？</p><p>我不是赢不来我的perfect time。</p><p>我只是太容易忘却了。</p><p>我想是金碧辉煌的酒店里的一块漆黑的金刚石？我发出的光芒我只会以为是我的阴影？</p><p>不知道，我的身体告诉我要去睡觉了。</p><p>all right,update at 2021.9.10</p><hr /><h3 id="section-8">🌌2021 9 12</h3><p>回朕车以复路兮,及行迷之未远。</p><p>不要再陷入一部作品中无法自拔呀！</p><hr /><h3 id="section-9">🌌2021 9 21</h3><p>对OI的热情不能被磨去呀。</p><p>看着前人写的一片片博客，他们描述的生活，描述的OI是如此的美好。</p><p>的确我只能看到别的光鲜的一面，但是如此会看自己是否太过布满了阴霾？</p><p>希望的确始终客观存在，只不过我不去接受罢了。</p><figure><img src="\img\9.png" alt="image-20210921152212540" /><figcaption aria-hidden="true">image-20210921152212540</figcaption></figure><p>ORZ JCY学长</p><p>如果是一年前，两年前，我可能还是会自大的说出：“中考是什么傻逼，到了高中就一定会顺利这样的话语。”</p><p>但是现在，我已经彻彻底底进入了高中，高一一班，吴波老师的班级里。</p><p>我的轨道再次奇迹般地和他们重合到一起。</p><p>但是这次，我一定不会陷入之前所陷入的那样的漩涡。</p><p>一定的。生活应该重新充满希望，当然这样的希望不应是我去请来的，求来的，而应该是我“拿来的”。</p><hr /><p>我一定要主动刷难题，这样思维才会提升，而不是沉溺于简单题无法自拔，自我满足，不能啊Q</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Connectivity 2</title>
    <link href="/2021/09/03/abc213G/"/>
    <url>/2021/09/03/abc213G/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://atcoder.jp/contests/abc213/tasks/abc213_g">Link</a></p><h3 id="题解">题解</h3><p>比较有趣。</p><p>如果从单纯的做题角度，这个题似乎就没有那么有趣了，对我而言。</p><p>大意，给你个图，每条边都可以保留或切断，问有多少种方式，使得最终 <span class="math inline">\(1,k\)</span> 联通。</p><hr /><p><span class="math inline">\(n\leq 17\)</span> 很容易想到bitmask(状压)。</p><p>如果对于边的状压，不好处理连通性，也有太多状态。</p><p>那么就从连通性直接状压。</p><p><span class="math inline">\(f(S)\)</span> 表示提取 <span class="math inline">\(S\)</span> 点集，在 <span class="math inline">\(S\)</span> 中点联通的方案数。</p><p>由于只考虑子图，为了叙述方便记录 <span class="math inline">\(cnt(S)\)</span> 表示上述 <span class="math inline">\(S\)</span> 子图的边的个数。</p><hr /><p>全部联通这个要求显然是难的。</p><p>正难则反，朴素容斥一下。</p><p>算出随意切边的情况减去不连通。</p><p>接下来的转移比较巧妙，通过枚举任一 <span class="math inline">\(x\in S\)</span>。</p><p>考虑 <span class="math inline">\(x\)</span> 在什么连通块中，若 <span class="math inline">\(x\)</span> 恰好在 <span class="math inline">\(T\subset S\)</span> 中，那么 <span class="math inline">\(T\)</span> 与 <span class="math inline">\(\overline T\)</span> 之间一定没有边，此时可以让 <span class="math inline">\(\overline T\)</span> 随机连边。</p><p>仔细思考这样所枚举不连通的一定不重不漏。 <span class="math display">\[\text{trans : }f(S)=\sum_{x\in T\subset S} f(T)2^{cnt(\overline T)}\]</span></p><p><span class="math display">\[\text{calculate ans : } a_k=\sum_{1\in T,k\in T} f(T)2^{cnt(\overline T)}\]</span></p><p>$ $</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>bitmask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Coprime Solitaire</title>
    <link href="/2021/08/31/abc210F/"/>
    <url>/2021/08/31/abc210F/</url>
    
    <content type="html"><![CDATA[<p>现在很晚了，但是这个神必题卡了我真的好久好久。。。。。(before noi until present).........</p><p>（你可以通过我被这个SB题卡发现我真是个菜B)</p><h3 id="题意"><a href="https://atcoder.jp/contests/abc210/tasks/abc210_f">题意</a></h3><h3 id="题解">题解</h3><p>显然 naive 的连边，如果 <span class="math inline">\(\gcd(a_i,a_j)\)</span>,<span class="math inline">\(a_i \rightarrow b_j\)</span> 那么如果选 <span class="math inline">\(a_i\)</span> 必须不能选 <span class="math inline">\(a_j\)</span> ,显然应该选 <span class="math inline">\(b_j\)</span> 。剩下3种情况同理。</p><p>做 2-sat 就好。</p><p>但显然 <span class="math inline">\(n^2\)</span> 条边，傻了。</p><p>那么你发现如果 <span class="math inline">\(\gcd(a,b)\)</span> <span class="math inline">\(P_a\)</span> 交 <span class="math inline">\(P_b\)</span> 不为空集。</p><p>那就可以新建节点 <span class="math inline">\(f_p\)</span> 表示 如果当 <span class="math inline">\(p\mid a\)</span> 应该向prefix全连边的点。</p><p>很好更新，记录 prefix,suffix 就没了。</p><p>被这个东西卡我是真傻逼。</p><p>明天开始好好学了！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分解质因数</tag>
      
      <tag>2-sat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stirling number</title>
    <link href="/2021/08/19/stirling-number/"/>
    <url>/2021/08/19/stirling-number/</url>
    
    <content type="html"><![CDATA[<p>斯特林数。</p><p>感觉斯特林数从构造角度能更好理解吧。</p><p>未更新完毕，待更新。</p><span id="more"></span><h3 id="part-0-上升幂下降幂">part 0 上升幂，下降幂</h3><p><span class="math inline">\(x^{\overline n}=\prod_{i=x}^{x+n-1}i\)</span></p><p><span class="math inline">\(x^{\underline n}=\prod_{i=x-n+1}^{x} i\)</span></p><p>为什么引入？</p><p>我们发现对于差分运算下降幂与微分运算对普通幂有着类似方面。</p><p>而上升幂的性质要比下降幂要简洁，所以引出上升幂。</p><p>简单结论 <span class="math inline">\(x^{\overline n}=(-1)^n(-x)^{\underline n}\)</span>,<span class="math inline">\(x^{\underline n}=(-1)^n(-x)^{\overline n}\)</span>​。</p><p>很显然的是 <span class="math inline">\(x^{\overline n},x^{\underline n}\)</span> 都是 <span class="math inline">\(n\)</span> 次多项式。</p><h3 id="part1-第一类斯特林数">part1 第一类斯特林数</h3><p>斯特林数是为了将普通幂将下降幂/上升幂联系起来。</p><p>第一类斯特林数是用普通幂表示上升幂。</p><p>相比较组合意义，用构造的理解更加便捷。</p><p>定义满足以下的 <span class="math inline">\(\begin{bmatrix}n\\m\end{bmatrix}\)</span> 称为第一类斯特林数。 <span class="math display">\[x^{\overline n}=\sum_{i=0}^{n}\begin{bmatrix}n\\i\end{bmatrix}x^i\]</span> 那么他是如何具有像组合意义那样的递推式的呢？</p><p>考虑： <span class="math display">\[x^{\overline {n+1}}=(x+n)x^{\overline{n}}=(x+n)\sum_{i=0}^{n}\begin{bmatrix}n\\i\end{bmatrix}x^i=\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}x^{i+1}+n\begin{bmatrix}n\\i\end{bmatrix}x^i\]</span> <span class="math display">\[[x^i]x^{\overline {n+1}}=[x^i]\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}x^{i+1}+n\begin{bmatrix}n\\i\end{bmatrix}x^i\]</span> <span class="math display">\[\begin{bmatrix}n+1\\i\end{bmatrix}=\begin{bmatrix}n\\i-1\end{bmatrix}+n\begin{bmatrix}n\\i\end{bmatrix}\]</span> <span class="math display">\[\begin{bmatrix}n\\m\end{bmatrix}=\begin{bmatrix}n-1\\m-1\end{bmatrix}+(n-1)\begin{bmatrix}n-1\\m\end{bmatrix}\]</span> 下降幂转普通幂也可以根据 <span class="math inline">\(x^{\overline n}=(-1)^n(-x)^{\underline n}\)</span> 得到类似结论。</p><hr /><h3 id="part-2-第二类斯特林数">part 2 第二类斯特林数</h3><p>第二类斯特林数是用下降幂表示普通幂。</p><p>定义满足以下的 <span class="math inline">\(\begin{Bmatrix}n\\m\end{Bmatrix}\)</span> 称为地二类斯特林数。 <span class="math display">\[x^n=\sum_{i=0}^{n}\begin{Bmatrix}n\\i\end{Bmatrix}x^{\underline i}\]</span> <span class="math display">\[x^{n+1}=x\cdot x^{n}=x\sum_{i=0}^{n}\begin{Bmatrix}n\\i\end{Bmatrix}x^{\underline i}=\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}x^{\underline {i+1}}+i\begin{Bmatrix}n\\i\end{Bmatrix}x^{\underline i}\]</span> <span class="math display">\[[x^i]x^{n+1}=[x^i]x\cdot x^{n}\]</span> <span class="math display">\[\begin{Bmatrix}n+1\\i\end{Bmatrix}=\begin{Bmatrix}n\\i-1\end{Bmatrix}+i\begin{Bmatrix}n\\i\end{Bmatrix}\]</span> <span class="math display">\[\begin{Bmatrix}n\\m\end{Bmatrix}=\begin{Bmatrix}n-1\\m-1\end{Bmatrix}+m\begin{Bmatrix}n-1\\m\end{Bmatrix}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>stirling number</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SAM</title>
    <link href="/2021/08/19/review-sam/"/>
    <url>/2021/08/19/review-sam/</url>
    
    <content type="html"><![CDATA[<p>sam，后缀自动机复习。</p><p>待更新。</p><span id="more"></span><p>会过sam,但是忘了，网上教程像是一步一步喂你饭真心很烦。。。</p><p>还是得自己写一写，上次自学的时候总结了一些，但那时候还觉得别的写的可能好一点，真是巨大错误。。。</p><hr /><p><span class="math inline">\(endpos\rightarrow right\)</span> 集合。</p><p><span class="math inline">\(fail\rightarrow parent\)</span>​ 树。</p><p><span class="math inline">\(right\)</span> 集合中最大的长度 <span class="math inline">\(l\)</span>。</p><p>注意sam的构造方式是增量构造，你需要管插入的串的正确性，其余的自然正确。</p><p>插入一个字符，我们需要把以这个字符为结尾的所有串插入parent树。</p><p>为了描述简单易懂现在往 i 位，插入 c，字符串记为 s。</p><p>首先，从上一个最后的后缀往上跳，看dag什么时候有 c 的出边。</p><p>注意parent 树跳父亲本质在缩短后缀。</p><ol type="1"><li><p>如果没有，那么新建节点 w，parent树父亲是根，相当于把 s[k:i] <span class="math inline">\(k\leq n\)</span> 全部插入，用 w代替了。</p><p>然后把刚才跳过的父亲的 c 出边全连到 w。</p><p>考虑刚才跳父亲本质上在跳插入前串的后缀。</p></li><li><p>否则设当前dag有 c出边的点为 d，<span class="math inline">\(trans(d,c)=x\)</span>。</p><p>那么尽管 d 是原串一个后缀，x 也有可能不是仅仅是新加入后缀，而有可能比新加入的要长。</p><p>eg: c='b',d="aaa",x="ccaaab"。</p><p>这个 x是要比我们插入 c 后的后缀 "aaab" 长，也就是说我们新加入的 <span class="math inline">\(right\)</span> 集合更大应该做父亲。</p><p>所以我们就判断一下 <span class="math inline">\(l(d)\)</span> 与 <span class="math inline">\(l(x)\)</span> 的关系。</p><ol type="1"><li><p>如果 <span class="math inline">\(l(d)=l(x)+1\)</span>​ 那么就是插入后后缀和 x 长度一样，不用当爹，直接新建节点 w，按照 1那样把符合的新状态在 dag 上连边。w 在 parent 树上直接认 x 为爹。</p><p>本质上在把一部分后缀直接插入，作为 w，剩下的都是原自动机可以表示的。</p></li><li><p>否则 <span class="math inline">\(l(d)&lt;l(x)+1\)</span> 我们必须把这个 x 所在的 <span class="math inline">\(right\)</span> 拆开。</p><p>我们就把集合<span class="math inline">\(right_x\)</span>​​​ 拆成 <span class="math inline">\(A=\{d+c\}\)</span>​​​ 和 <span class="math inline">\(B=\{k\in right_x\mid length(d+c)&lt;length(k)\}\)</span>，注意 <span class="math inline">\(length\)</span> 含义是字符串长度​​​​ 。</p><p>同理新建 w，dag连新边，w认 <span class="math inline">\(A\)</span> 为爹，<span class="math inline">\(B\)</span> 认 <span class="math inline">\(A\)</span> 为爹。</p><p>注意 A,B dag 连边情况和 x 一样，还有记得把以前dag向 x 连边的改成向 A 连边。</p><p>本质上在把一部分后缀直接插入，作为 w；特殊独立出来 d+c 这个后缀；然后别的也是原先自动机可以表示，只不过多了点改边操作。</p></li></ol></li></ol><p>注意我们一个个插入后缀本质上是吧所有字串都插入了。</p><p>​</p><p>注意：每一个parent树上结点，可以对应一个dag上结点，为什么，考虑我们往字符串后加字符，这些后缀不会发生改变。</p>]]></content>
    
    
    <categories>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sam</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF IO交互 学习</title>
    <link href="/2021/08/19/pre-CF-Interaction/"/>
    <url>/2021/08/19/pre-CF-Interaction/</url>
    
    <content type="html"><![CDATA[<p>我们需要使用 <code>testlib.h</code>。</p><p><code>command</code></p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">(./std &lt; /dev/fd/<span class="hljs-number">3</span> | ./interactor <span class="hljs-keyword">in</span> out) <span class="hljs-number">3</span>&gt;&amp;<span class="hljs-number">1</span> | :<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>interaction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本多项式</title>
    <link href="/2021/08/19/basic-poly/"/>
    <url>/2021/08/19/basic-poly/</url>
    
    <content type="html"><![CDATA[<p>本文简单介绍一下基本多项式理论。</p><p>持续更新中。</p><span id="more"></span><p>因为是简单介绍，只说明做法，不给予严格证明，以及前人是如何想出的这个方法。</p><h3 id="多项式乘法">多项式乘法</h3><h4 id="多项式乘法与和卷积">多项式乘法与和卷积</h4><p><span class="math inline">\(A=\sum\limits_{i=0}^{n}a_ix^i,B=\sum\limits_{i=0}^{n}b_ix^i\)</span>。</p><p>显然有 <span class="math inline">\(A\times B=\sum\limits_{i=0}^n\sum\limits_{j=0}^na_ib_jx^{i+j}=\sum\limits_{d=0}^n\sum\limits_{i+j=d}^na_ib_jx^d\)</span>。</p><p><span class="math inline">\(C=A\times B,C(d)=\sum\limits_{i+j=d}^na_ib_jx^d\)</span>。</p><p>这玩意就是和卷积，可见和卷积与多项式乘法有着千丝万缕的关系。</p><h4 id="快速傅里叶变换">快速傅里叶变换</h4><p>众所周知，一个 <span class="math inline">\(n-1\)</span> 次多项式（函数）可以用 <span class="math inline">\(n\)</span> 个不同的点唯一确定出来。</p><p>而如果考虑两个多项式 <span class="math inline">\(f,g\)</span>，当<span class="math inline">\(x=x_0\)</span> 时，<span class="math inline">\(f\times g\ (x_0)=f(x_0)\times g(x_0)\)</span> 。</p><p>这个很好理解。</p><p>所以点值表达乘积就是直接将相同横坐标的 <span class="math inline">\(y\)</span> 乘。</p><p>那么如何将多项式 <span class="math inline">\(f\)</span> 转成点值。</p><p>代入复数，用 <span class="math inline">\(n\)</span> 次单位根做 <span class="math inline">\(x\)</span>。</p><p>即 <span class="math inline">\(x^n=1\)</span> 的 <span class="math inline">\(n\)</span> 个复数解，记录以 <span class="math inline">\(x\)</span> 轴正方向，逆时针第一个复根为 <span class="math inline">\(w\)</span>，所有单位根就是 <span class="math inline">\(w^0,w^1,\cdots,w^{n-1}\)</span>。</p><p>目标：求 <span class="math inline">\(\forall \ i,F(k)=\sum\limits_{j=0}^{n-1}a_j(w^i)^j\)</span>。</p><p>我们将次方奇数偶数分开考虑 <span class="math inline">\(F(k)=\sum\limits_{j=0}^{n}a_j(w^k)^j=\sum\limits_{j=0}^{n/2-1}a_{2j}(w^k)^{2j}+w^k\sum\limits_{j=0}^{n/2-1}a_{2j+1}(w^k)^{2j}\)</span>。</p><p><span class="math inline">\(F(k)=\sum\limits_{j=0}^{n}a_j(w^k)^j=\sum\limits_{j=0}^{n/2-1}a_{2j}(w^{2k})^{j}+w^k\sum\limits_{j=0}^{n/2-1}a_{2j+1}(w^{2k})^{j}\)</span>。</p><p>由于 <span class="math inline">\((w^k)^2=(w^{k+n/2})^2\)</span> （<span class="math inline">\(w^n=1\)</span>)。</p><p>所以 <span class="math inline">\(F(k)\)</span> 与 <span class="math inline">\(F(k+n/2)\)</span> 只差一点点，就是 <span class="math inline">\(w^k\)</span> 项的正负号 （<span class="math inline">\(w^k=-w^{k+n/2}\)</span>）。</p><p>原本你要求 <span class="math inline">\(F(w^0),F(w^1),\cdots F(w^{n-1})\)</span>,现在只要求 <span class="math inline">\(F(w^0),F(w^1),\cdots F(w^{n/2-1})\)</span>。</p><p>范围直接缩小一倍。那么对于接下来的 <span class="math inline">\(F_0(w^{2k}),F_1(w^{2k})\)</span>（系数是奇数(1)还是偶数(0)）也可以递归下求。</p><p>递归效率缓慢，能够优化。</p><p>发现本质上每次将 <span class="math inline">\(k\)</span>,缩小一半的操作其实是想要最后把 <span class="math inline">\(w^0\)</span> 算出，然后计算出别的。</p><p>可以如图按照一定顺序把 <span class="math inline">\(a_i\times (w^0)^i\)</span> 按顺序排开，然后合并。</p><p>大概。。。</p><p>这个顺序<strong>通过观察</strong> 发现是二进制反过来 ，所以能快速求出。</p><p>代码解读一下。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> pie=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(<span class="hljs-built_in">complex</span> *a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;lim;i++) <span class="hljs-keyword">if</span>(i&lt;rev[i]) swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> mid=<span class="hljs-number">1</span>;mid&lt;lim;mid=mid&lt;&lt;<span class="hljs-number">1</span>)<span class="hljs-comment">//从下向上合并，mid 代表合并之前每块的长度</span><br>&#123;<br><span class="hljs-function"><span class="hljs-built_in">complex</span> <span class="hljs-title">wn</span><span class="hljs-params">(<span class="hljs-built_in">cos</span>(p/mid),<span class="hljs-built_in">sin</span>(p/mid))</span></span>;<span class="hljs-comment">// 合并后那个的w^k,模长都是1，用角度表示。</span><br>                                          <span class="hljs-comment">// 比如说 mid=lim/2 时,wn这个的角度就是 pie/(lim/2)=(2*pie)/lim</span><br>          <span class="hljs-comment">// 就是最初的单位根。</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> r=mid&lt;&lt;<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>;j&lt;lim;j+=r)<span class="hljs-comment">//跳块，r就是合并后块长</span><br>&#123;<br><span class="hljs-function"><span class="hljs-built_in">complex</span> <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-number">1.0</span>,<span class="hljs-number">0.0</span>)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;mid;k++,w=w*wn) <span class="hljs-comment">//w 就是你乘的 w^k (因为你更新得更新 w^0,w^k,w^2k,... 处的点值)</span><br>&#123;<br><span class="hljs-built_in">complex</span> x=a[k+j],y=w*a[k+j+mid];<br>a[k+j]=x+y;<br>a[k+j+mid]=x-y;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>一般人不用点值表达，所以必须要有逆傅里叶变换。</p><p><strong>不难发现</strong> 由于范德蒙德矩阵在 <span class="math inline">\(A_{i,j}=w^{ij}\)</span> 有着巨NB的性质，<span class="math inline">\(A^{-1}_{i,j}=w^{-ij}\)</span>。 （前面那个 <span class="math inline">\(-1\)</span> 的意思是逆矩阵）</p><p>所以只要把上文代码中的 <code>wn(cos(p/mid),sin(p/mid))</code> 改成 <code>wn(cos(-p/mid),sin(-p/mid))</code> 即可。</p><p>证明是个构造证明，我也不会从暴力手算 <span class="math inline">\(A_{i,j}\)</span> 逆矩阵出发证明，而只会验证 <span class="math inline">\(A\times B=\epsilon\)</span>,<span class="math inline">\(B\)</span> 即为你构造的那个逆矩阵。</p><h4 id="快速数论变换">快速数论变换</h4><p>把单位根换成原根有相同性质。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多项式</tag>
      
      <tag>gf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本数论</title>
    <link href="/2021/08/19/basic-number-theory/"/>
    <url>/2021/08/19/basic-number-theory/</url>
    
    <content type="html"><![CDATA[<p>说一下一些基本数论算法的实现和简洁证明。</p><p>持续更新中。</p><span id="more"></span><ol type="1"><li><p><span class="math inline">\(exgcd\)</span></p><p>目的：求解方程 <span class="math inline">\(ax+by=(a,b)\)</span> 的一组特解。</p><p>做法：<del>由于他叫exgcd</del>，我们就按求 <span class="math inline">\(\gcd\)</span> 方法试一下。 <span class="math display">\[\begin{aligned}不妨设 (a,b)=1,a&gt;b\\a\cdot x+b\cdot y=&amp;1\\b\cdot y+(a\bmod b+\lfloor\frac{a}{b}\rfloor b)\cdot x=&amp;1\\提取b\\b\cdot(y+\lfloor \frac{a}{b}\rfloor x)+(a\bmod b)x=&amp;1\\问题化归，求解\ bx_1+(a\bmod b)y_1=&amp;1\\\end{aligned}\]</span> <span class="math inline">\(\mathcal{Code}\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;<br>    exgcd(b,a%b,y,x); y-=(a/b)*x;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>为啥能求逆元？ <span class="math display">\[\begin{aligned}ax+by&amp;=1\\ax+by&amp;=1\pmod{b}\\ax&amp;=1\pmod{b}\end{aligned}\]</span> 显然 <span class="math inline">\(x\)</span> 是 <span class="math inline">\(a\)</span> 在 <span class="math inline">\(\bmod b\)</span> 意义下的逆元</p></li><li><p><span class="math inline">\(excrt\)</span></p><p>目的：合并若干线性同余方程组。 <span class="math display">\[\begin{cases}x\equiv a_1\pmod{p_1}\\x\equiv a_2\pmod{p_2}\\\ \ \ \ \vdots\\x\equiv a_n\pmod{p_n}\end{cases}\]</span> 问题本质等价，合并两个方程。</p><p><span class="math inline">\(x\equiv a_1\pmod{p_1},x\equiv a_2\pmod{p_2}\)</span></p><p>若存在解则解一定能表达成 <span class="math inline">\(x=x_0+k\cdot lcm(p_1,p_2)\)</span>,<span class="math inline">\(x_0\)</span> 是一个特解。</p><p>显然 <span class="math inline">\(p_1\mid lcm(p_1,p_2),p_2\mid lcm(p_1,p_2)\)</span>。</p><p>现在目的找到这样的一个特解 <span class="math inline">\(k\)</span>。 <span class="math display">\[k=k_1\cdot p_1+a_1,k=k_2\cdot p_2+a_2\Rightarrow k_1\cdot p_1+a_1=k_2\cdot p_2+b_2\\\Rightarrow k_1\cdot p_1-k_2\cdot p_2=b_2-b_1\]</span> 可以用 <span class="math inline">\(exgcd\)</span> 求一组 <span class="math inline">\(k_1,k_2\)</span> 特解。</p><p>·</p></li><li><p><span class="math inline">\(Miller\ rabin\)</span></p><ol type="1"><li><p>首先费马小定理判断一波,<span class="math inline">\(p\in \text{prime} \Leftrightarrow \forall (a,p)=1,a^{p-1}\equiv1\pmod{p}\)</span>。</p></li><li><p>如果 <span class="math inline">\(a^{2}\equiv 1\pmod{p}\)</span>,如果 <span class="math inline">\(p\)</span> 是质数，那么必定有 <span class="math inline">\(p\mid(a-1)\)</span>,或者 <span class="math inline">\(p\mid(a+1)\)</span>。</p><p>否则 <span class="math inline">\(p\)</span> 是合数。</p><p><span class="math inline">\(a^{p-1}\equiv 1\pmod{p}\)</span>。</p><p>此时如果 <span class="math inline">\(p\)</span>是质数，<span class="math inline">\(a^{\frac{p-1}{2}}\equiv 1\ or\ -1\pmod{p}\)</span></p><p>如果是 <span class="math inline">\(-1\)</span> 的时候，继续不下去，只得暂时假装他是素数。</p><p>否则继续检查 <span class="math inline">\(a^{\frac{p-1}{2}}\equiv 1\pmod{p}\)</span></p><p>本质上我们就是通过看 <span class="math inline">\(a^b\equiv 1\pmod{p}\)</span> 这种形式来看 <span class="math inline">\(p\)</span> 是否为质数。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">mr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> b=x<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(!(b&amp;<span class="hljs-number">1</span>)) b&gt;&gt;=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> k=qpow(p,b,x);<br>    <span class="hljs-keyword">while</span>(b&lt;=x<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">int</span> muls=k*k%x;<br>        <span class="hljs-keyword">if</span>(muls==<span class="hljs-number">1</span>&amp;&amp;(k!=<span class="hljs-number">1</span>&amp;&amp;k!=x<span class="hljs-number">-1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        k=muls;b&lt;&lt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k!=<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">int</span> p[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!(x&amp;<span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">8</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x==p[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(mr(x,p[i])==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当 <span class="math inline">\(p\)</span> 的值域是<code>long long</code> 范围时，乘法可能会需要快速乘。</p></li></ol></li><li><p>找阶&amp;原根。</p><p>这个东西说实话只要真正了解定义就能如同行云流水般解决了。</p><ol type="1"><li><p>阶</p><p>最小的使得 <span class="math inline">\(a^x\equiv 1\pmod{p}\)</span> 的正整数 <span class="math inline">\(x\)</span>,被称为 <span class="math inline">\(a\bmod p\)</span> 的阶。</p><p>由于 <span class="math inline">\(a^{\phi(p)}\equiv 1\pmod{p}\)</span>,所以 <span class="math inline">\(ord_p(a)\mid\phi(p)\)</span>。</p><p>证明很显然，如果不整除，可以用类似辗转相除的方法推出，<span class="math inline">\(\exists \ x&lt;ord_p(a),a^x\equiv 1\pmod{p}\)</span>。</p><p>求法可以把 <span class="math inline">\(\phi(p)\)</span> 的质因子一个一个消去，来看是否有 <span class="math inline">\(a^{\frac{\phi(p)}{k}}\equiv 1\pmod{p}\)</span>。</p><p>复杂度 <span class="math inline">\(O(pollard-\rho)+\log(n)\)</span>。</p><p>其实，如果我们知道阶的大小，也能很好知道阶为这个数的数有多少个。</p><p>若阶为 <span class="math inline">\(d\)</span>。</p><p>那么 <span class="math inline">\(ord_{n}(x)=d\)</span> 的 <span class="math inline">\(x\)</span> 一定有 <span class="math inline">\(\phi(d)\)</span> 个。</p><p>考虑我们随便找一个 <span class="math inline">\(ord_n(x)=d\)</span>,那么 <span class="math inline">\(x,x^2,cdots,x^{d-1},x^{d}\)</span> 这样的一个集合。</p><p>显然我们应该在指数上与 <span class="math inline">\(d\)</span> 互质的数。</p><p>所以 <span class="math inline">\(ord_x(x^k)\)</span> 当且仅当 <span class="math inline">\((k,d)=1\)</span>，此时也就是 <span class="math inline">\([1,d]\)</span> 与 <span class="math inline">\(d\)</span> 互质的数，也就是 <span class="math inline">\(\phi(d)\)</span> 个。</p></li><li><p>原根</p><p>满足 <span class="math inline">\(ord_p(a)=\phi(p)\)</span> 的 <span class="math inline">\(a\)</span> 被叫做 <span class="math inline">\(p\)</span> 的一个原根。</p><p>原根性质：若 <span class="math inline">\(g\)</span> 为 <span class="math inline">\(p\)</span> 其中一个原根，那么 <span class="math inline">\(1,g,g^2\cdots g^{\phi(p)-1}\)</span> 互不相同。</p><p>证明可以用反证法。</p><p>由于 如果 <span class="math inline">\((k,p)=1\)</span>,有 <span class="math inline">\(0,k,2k,\cdots,(p-1)k\bmod p\)</span> 一定互不相同。</p><p>也是反证，如果 <span class="math inline">\(xk\equiv yk\pmod{p}\)</span>,那么 <span class="math inline">\((x-y)k\equiv 0\pmod{p}\)</span>,与 <span class="math inline">\((k,p)=1\)</span> 矛盾。</p><p>所有 <span class="math inline">\(p\)</span> 有 <span class="math inline">\(\phi(\phi(p))\)</span> 个原根。</p><p>原根有很多，随机找可以在 <span class="math inline">\(O(\frac{p}{\phi(\phi(p))})\)</span> 的期望次找到。</p><p>设 <span class="math inline">\(\phi(p)=\prod p_i^{\alpha_i}\)</span>。</p><p>那么判断一个数 <span class="math inline">\(x\)</span> 是不是原根就看 是否 <span class="math inline">\(\forall \ k,x^\frac{\phi(p)}{p_k}\not \equiv 1\pmod{p}\)</span>。</p><p>复杂度 <span class="math inline">\(O(pollard-\rho)+\frac{p}{\phi(\phi(p))}\log(n)\)</span>。</p></li></ol></li><li><p><span class="math inline">\(pollard-\rho\)</span></p><p>在 <span class="math inline">\(\mathcal(O(\sqrt p)\)</span>，<span class="math inline">\(p\)</span> 为 <span class="math inline">\(n\)</span> 最小质因子的复杂度，找到 <span class="math inline">\(n\)</span> 的一个因数。</p><p>考虑对于最小质因子 <span class="math inline">\(p\)</span>，我们随机枚举，枚举到 <span class="math inline">\(p\)</span> 的倍数的概率为 <span class="math inline">\(\frac{1}{p}\)</span>。</p><p>根据生日悖论，我们随机枚举，发生碰撞的概率则为 <span class="math inline">\(\frac{1}{\sqrt p}\)</span>。</p><p>似乎问题马上就解决了。</p><p>但是考虑我们并不知道 <span class="math inline">\(p\)</span> 的具体值，判断碰撞也只能使用 <span class="math inline">\(\gcd(\mid a-b\mid,n)\)</span> 这么来判断。</p><p>那该怎么办？</p><p><span class="math inline">\(pollard\)</span> 发现了一种伪随机数列 <span class="math inline">\(a_{i+1}=a_i^2+c\bmod m\)</span>。</p><p>可以证明该数列的形状为一条链加上一个环。</p><p>如果我们认为该数列是纯随机的那，环和链的长度均为期望 <span class="math inline">\(\sqrt m\)</span> 级别的，根据生日悖论。</p><hr /><p>现在我们的任务就是给定 <span class="math inline">\(c,a_0\)</span> 的条件下找到这个环。</p><p>但是，注意这样一点，我们并不能得到 <span class="math inline">\(a\)</span> 的值，因为我们甚至都得不到 <span class="math inline">\(p\)</span> 的值。</p><p>我们接下来做的都是用 <span class="math inline">\(\bmod n\)</span> 的数列，反应 <span class="math inline">\(\bmod p\)</span> 的数列。</p><p>找环的过程可以使用 <span class="math inline">\(a_i,a_{2i}\)</span> 看什么呢时候冲突。</p><p>设链长为 <span class="math inline">\(l\)</span>，环长为 <span class="math inline">\(m\)</span>。</p><p>显然当 <span class="math inline">\(i=km&gt;l\)</span> 时，<span class="math inline">\(a_i=a_{l+(i-l)}=a_{l+(i-l+km)}=a_{i+km}=a_{2i}\)</span></p><p>也就是说，碰撞一定会产生。</p><p>在考虑 <span class="math inline">\(\bmod{p}\)</span> 的数列，环和链长均为期望 <span class="math inline">\(\sqrt p\)</span> 级别的，并且一定会发生碰撞，那么找到 <span class="math inline">\(p\)</span> 的次数，一定是期望 <span class="math inline">\(\sqrt p\)</span> 次。</p><p>那么一个复杂度大概为 <span class="math inline">\(\mathcal{O(\log_2 n\log n\sqrt p)}\)</span> 的 <span class="math inline">\(pollard-\rho\)</span> 算法出现了。</p><hr /><p>考虑在 <span class="math inline">\(a_i,a_{2i}\)</span> 找环过程，我们是对每一组 <span class="math inline">\(\mid a_i-a_{2i}\mid\)</span> 都和 <span class="math inline">\(n\)</span> 求 <span class="math inline">\(\gcd\)</span> 了。</p><p>这让我们有将所有 <span class="math inline">\(\mid a_i-a_{2i}\mid\)</span> 乘起来一起做 <span class="math inline">\(\gcd\)</span>。</p><p>考虑 <span class="math inline">\(\gcd(a,b)=\gcd(a,b\bmod a)\)</span>，我们可以让 <span class="math inline">\(\mid a_{i}-a_{2i}\mid\)</span> 按 <span class="math inline">\(\bmod n\)</span> 乘积。</p><p>那就可以分块，每 <span class="math inline">\(128\)</span> 分成一块，看 <span class="math inline">\(\gcd\)</span>，这样我们可以认为一次找因数的复杂度被均摊成 <span class="math inline">\(\mathcal{O(\sqrt p)}\)</span>。</p><p>如果 <span class="math inline">\(\sqrt p\)</span> 比较小时，<span class="math inline">\(128\)</span> 会太大，所以可以考虑倍增。</p><p>复杂度可以认为是 <span class="math inline">\(\mathcal{O(\log_2 n\sqrt p)}\)</span>。由于每次找到因数后 <span class="math inline">\(n\)</span> 的最小因数会改变，所以复杂度可能会更优，但是具体怎么证明我不是很会，在具体应用时你可以认为前面那个 <span class="math inline">\(\log_2\)</span> 因子会十分的小，甚至忽略。</p><p><span class="math inline">\(\mathcal{O(\log_2 n \sqrt p)}\)</span> 是期望复杂度上界。</p><hr /><p>实现，边界。</p><ol type="1"><li>如果发现 <span class="math inline">\(a_i=a_{2i}\)</span> 立马停止，重新换 <span class="math inline">\(a_0,c\)</span> 重新 <span class="math inline">\(pollard-\rho\)</span>。</li><li>如果 <span class="math inline">\(n=4\)</span> 那么 <span class="math inline">\(a_i=a_{2i}\)</span> 据说不可避免，可以特判掉。</li><li>如果 <span class="math inline">\(n\)</span> 为质数，立马停止。</li></ol><hr /><p>大概代码：</p><p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">nxt</span><span class="hljs-params">(ll a,ll c,ll mod)</span></span>&#123;<br>    ll tmp=mul(a,a,mod)+c;<br>    <span class="hljs-keyword">return</span> tmp&gt;=mod?tmp-mod:tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pollard</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    ll a1=<span class="hljs-number">1ll</span>*rand()*rand()%n,c=<span class="hljs-number">1ll</span>*rand()*rand()%n;<br>    ll a2=a1;<br>    a1=nxt(a1,c,n),a2=nxt(nxt(a2,c,n),c,n);<br>    <span class="hljs-keyword">int</span> lim=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(a1!=a2)&#123;<br>        ll v=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=lim&amp;&amp;a1!=a2;i++,a1=nxt(a1,c,n),a2=nxt(nxt(a2,c,n),c,n))&#123;<br>            ll backv=v;<br>            v=mul(v,<span class="hljs-built_in">abs</span>(a1-a2),n);<br>            <span class="hljs-keyword">if</span>(!v) <span class="hljs-keyword">return</span> gcd(<span class="hljs-built_in">abs</span>(a1-a2),n);<br>        &#125;<br>        ll g=gcd(v,n);<br>        <span class="hljs-keyword">if</span>(g&gt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> g;<br>        <span class="hljs-keyword">if</span>(lim&lt;<span class="hljs-number">128</span>) lim&lt;&lt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pollard(n);<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;ll&gt; f;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">factor</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(prime(n))&#123;<br>        f.push_back(n);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    ll fac=pollard(n);<br>    <span class="hljs-keyword">if</span>(prime(fac))&#123;<br>        f.push_back(fac);<br>        <span class="hljs-keyword">return</span> factor(n/fac);<br>    &#125;<br>    factor(fac);<br>    factor(n/fac);<br>&#125;<br></code></pre></div></td></tr></table></figure></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分解质因数</tag>
      
      <tag>数论</tag>
      
      <tag>miller-rabin</tag>
      
      <tag>pollard-rho</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些想法</title>
    <link href="/2021/08/10/thought-in-8-10/"/>
    <url>/2021/08/10/thought-in-8-10/</url>
    
    <content type="html"><![CDATA[<p>分享一点 OI 相关想法。</p><p>本来打算这篇文章是面向同学，大家写的，可是鄙人实在是文笔不济，想了想，还是以这样一种说闲话的方式写一些吧。</p><span id="more"></span><hr /><p>codeforces memory?</p><h3 id="part-1-rating逆流成河">part 1 rating?逆流成河？</h3><p>我的第一个 codeforces 账号是 <a href="https://codeforces.com/profile/zkq666">zkq666</a> 于将近2年前在西安集训时，注册的。</p><p>当时我还是一个刚初二的菜鸟，几个月前，在佳木斯的时候，大概通过几次小型校内集训，自以为的，道听途说地，单方面自己时有一定的实力。</p><p>而不出所料地在 csp中被JL弱省人吊打，甚至没有拿一等奖。</p><p>在交大附中的宿舍里，我得知了自己是 noip 二等奖rank1，当时也是真的很难受，消弭了很长时间，但是当时我也是十分不成熟，消弭的原因不是因为自己实力凹，而只是因为同学拿奖了，我没有。</p><p>当时我的训练计划是机械的，麻木的，只是对着知识点一个个漫无目的的 <strong>背诵</strong> ,如今我对那是的自己也是十分悔恨，我自认为自己的初一，初二的一年半因为一些主观，客观的原因是白白浪费。</p><p>是因为自己的虚荣心？是因为一些杂七杂八的东西？</p><p>但是相信，”那过去的，就会成为亲切的怀恋“。</p><p>没有那段的颓靡经历，我相信，自己现在或许还没有摸到OI的门路。</p><p>扯远了，学长们在机房做着atcoder,谈论着codeforces。</p><p>就像跟风一样，我也注册了atcoder和codeforces的账号，只不过一次都没有跟着打过。</p><hr /><p>可能是集训后期了，我可能因为上火，发烧了。</p><p>我清晰的记住了cjy讲课的时候，我脑子的混沌。</p><p>我清晰的记住了我和亮老师量体温时发现我39度多时的惊讶。</p><p>我甚至也清晰地记住了那辆接我从学校到武警医院的出租车，以及我在车上手的颤抖，脑子中甚至想着自己会不会就这么挂了（（（</p><p>烧半夜后就退了，我第一次清醒的体会到 现代医学完爆流感（然后几个月就COVID19了（（</p><p>和昌老师聊了会，等着针孔边的血液也全凝结后，也就停下来聊天。</p><p>我想，那次是我第一次靠外界使得自己冷静下罢。</p><hr /><p>安然回到长春，在西安的时候，一次偶然吃饭时听ls和hxx说到wc的事了，当时我也因为考的垃圾，还啥也不知道，也就没放在心上。</p><hr /><h3 id="part-2-渡口边的踟蹰">part 2 渡口边的踟蹰</h3><p>COVID19，当时我并未意识到他多么可恨。</p><p>在家重复重复的生活？网课时候看起来说是要”待机“，然后学OI，结果是去颓废。</p><p>当时考了几次 noi-online，自己也是 csp 复仇心切，但也就冲了一次 25%。</p><p>疫情期间，我的学习效率时缓慢的，学习方向也没有被即使的拨乱反正，但是那段时光是我最快乐的，最有成就感的。</p><p>包括不限于我做出来我第一个 音mad（bgm是断桥残雪），我搭建了一个属于自己的 hexo 博客，可能被老师认为是竞赛学的挺好，即”有二等奖水平”的竞赛生。</p><p>但是那段时光的颓废还是我不忍直视的，如果我当时觉悟再高一点，学习方法在科学一点，在真正了解一点OI的局势，或许也可以保留着快乐，也更加高效。</p><p>说实话那段的颓废，也是我初三后期的心结吧。</p><p>我很庆幸我的 blog version 1.0.0 我还留着一个镜像站。</p><p>就在说说省选吧。</p><p>具体可以看镜像站的博客 <a href="https://phonticas.github.io/2020/06/21/JLOI%E6%B8%B8%E8%AE%B0/">JLOI2020</a>。</p><p>说实话，我没有想到的是当时，我的觉悟已经够高了，只不过没有人给我指引一个正确的方向。可能的当时我和学长交往还只是在于表面吃饭罢。</p><p>我相信，如果初三最后的时候我看到这个博客的话，这个在当时一年前的博客，一定会很怅然，也不会爆发了吧。</p><p>也是在这个时候我的codeforces账号也开了第一场div3，第一次嘛，我也很不适应，看着英文题面，以为必须提交文件，使用着现在看起来蹩脚的 devc,对于类似 acm/icpc IOI CF 赛制十分不熟悉，不知道该如何调题，不知道rating机制...... and so on</p><p>反正就是很惨了。</p><p>rating 逆流成河。。。</p><hr /><h3 id="part-3-imitator">part 3 Imitator?</h3><p>暑假，ls中考完了，高中生去长沙了，ls成为大哥了。</p><p>看着ls超然于世间的样子，当时的我十分羡慕，我十分向往这样的感觉，可能在当时我的脑海里，初三最后结束，中考英语考完铃响最后就是“羽化登仙”的时候了。</p><p>我开始模仿，我开始学习别人的说话方式，听的歌曲（包括concidance)，开始着力写议论文，玩知乎，等等等。</p><p>我曾傻傻的以为，在这片东北的打雪地里，只要，一步一个脚印踩着前人的足迹，就可以成功。</p><p>另外说一下，和ls出去吃饭，偶然也认识了个隔壁校好朋友qyb了吧。</p><hr /><p>我开始和同学在机房打cf。</p><p>那场div2，我报零了。</p><p>看着同学都开始切了2道题，而我还是两个 wa on pretest2时，我承认，我那时的心态崩了，我做到一半时，我跑了出去，和wrx一起吃了午饭。</p><p>可能那个时候是我最容易心态炸裂吧。</p><p>但是我没有，可能是不甘心承认失败，可能是也没怎么在意？</p><p>我重开了一个cf小号，这个我认为超级明智的决定。</p><p>小号还是十分的成功靠着加分到了 specialist,青名。</p><p>那个暑假，我成长了许多。</p><p>我开始适应了比赛，或许能把一场正式ccf比赛，当成一场大型线下 cf 打。</p><p>我开始对中考紧张，这个在我现在看来绝对不是一件完全错的事情。</p><p>我开始了模仿学长基本国策。</p><p><img src="\img\4.png" /></p><hr /><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="\img\5.png" /></div><div class="group-image-wrap"><img src="\img\6.png" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="\img\7.png" /></div></div></div><p>当时我就对学习生涯有深入的思考。</p><p>现在看来自己初三阶段真的是太不成熟了。</p><hr /><p>「等到人已不再奔忙，等到心也不再轻狂」</p><hr /><h3 id="part-4-imitator">part 4 Imitator!</h3><p>事情可能是从这时候开始脱离我的预期的。</p><p>初三这年的一些变故，可能真正的脱离我的预期。</p><p>首先好像在一场小号从 pupil -&gt; specialist 的第二天，apio我最后一个来，靠着 A,B,C仨暴力，拿了个垫底Ag，远远超出了我的预期。</p><p>接下来几个月，我也从 specialist一点一点爬expert甚至到了 candidate master。</p><p>「原来在红光的照射下，蓝色校服真的能变成紫色呢」</p><p>这是因为我几乎每天晚上都去青华校区，小门旁警卫室上有个大灯，也不知道怎么回事，有一天我看自己裤子突然就变成紫色了，然后一股恍如隔世的感觉。</p><p>校庆的时候，和wgy混在一群高中生&amp;初中OIer中，大灯一道、照也分不清是蓝是紫。</p><p>一场场cf，一次次紧张地等待着 system test，给我带来的增益是明显的。</p><p>另外说一下一个小插曲，学长组织了个校内acm，挺有意思。</p><p>和同班同学syh组了各队，队名是reoreoreoreo（当时看Jojo魔怔了。</p><p>作题做得很开心，抢到了好几个题的首A，最后好像也落rank2 2道题吧。</p><p>很愉快的一次经历。</p><p>说回来，csp 考的烂似乎就是因为 t1，别的分低也就是因为自己菜吧。</p><p>noip似乎没挂分，但是也不是很高的样子，也说明了我和别人的差距。</p><p>总而言之，初三的上学期，日子是美好的，是能听到高中课的，是没有中考的压力的，当时我唯一担心的就只有体育了。</p><p>那段美好的使馆想想也是很短暂，我没有珍惜好呀。</p><p>只有失去了，才知晓曾经的美满。</p><hr /><h3 id="part5-我便化乌有">part5 我便化乌有</h3><p>寒假时，我的一种异样的情绪开始形成。</p><p>期待了很久的 wc 搞成了线上，让我十分不能接受，当时我十分想认识南方同学。</p><p>期间我还因为自身情绪，发脾气给 ymD老师，现在我也觉得十分惭愧。</p><p>和lxn谈了谈，聊了聊，尽管大方向时绝对没错的，但是客观上，我的“走极端”的心理还是继续生长。</p><p>还好wc我依靠着加边加边并查集查询！狗到了一个 Ag，当时也是很庆幸。</p><p>但是我的心态从此便走偏了。</p><p>或许是 wc Ag，或者是 cf cm。</p><p>我似乎对自己包邮过高的期望。</p><p>我逐渐开始讨厌学校，文化课。</p><p>同时老师也在强调这 中考的重要，开始面向中考学习/讲课。</p><p>最重大的一件事可能就是我在承受不了不会写议论文，而没和wyx老师商量就投降，皈依记叙文。</p><hr /><p>几次竞赛生会议，听个T的招生老师说了说，我心中便只剩对高中的向往，而这个是建立在我受不了中考模式。</p><hr /><p>体育中考呢，我十分感谢why可以每天陪我跑步，练实心球。</p><p>计时跑完步，和我聊聊天，但我还是觉得当时我自己有点不恰当的优越感，和why的说辞里或许充满了说教意味，也是那个时候，我似乎认为我的生活中只剩下 OI了，危险的想法，我甚至放弃了和同班同学交好。。。。</p><p>现在看来这个想法大错特错，而当时似乎还感觉自己有一种优越感，以为生活中只有OI就不会颓了是吗？这显然是不对的！而只是基于我对疫情时候的颓废所反感。</p><p>本来就不成熟的心智被过度自信冲昏了。</p><p>thusc？镇中那次旅游？NOI2021？</p><p>thusc让我第一次看到了学军这样的浙江大学校，虽然只是窥得一面，我个人便喜欢上了杭州这个城市，学军在我心里地位高大了起来。</p><p>NOI前的镇中集训，我也识到浙江的同学的强，他们的努力，镇中OI氛围的好。</p><p>求之不得？求之不得。</p><p>十年饮冰，难凉一腔热血，只不过现在我的思绪早已不在回忆，剩下的或者说更加细节的可能会在不久的将来，等我能在有一个不眠夜的巧境在说吧。</p><p>update 8.11 over。</p><p>我写的很乱，很流水账，各位还是姑妄听之，想D就D吧，因为写的比较晚比较乱，说的不清楚，但这些只能交给之后更强，更加有能力的我来解决，来补充吧，而到目前，我中学的故事也是尾声，如果高中能创造更好的，我也会继续更新的。</p><h3 id="thanks-for-listeningreading">thanks for listening/reading!</h3><p>[]\8.png)</p><p>this is only the cover of the book which is called 'My OI journey'.</p>]]></content>
    
    
    
    <tags>
      
      <tag>回忆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bzoj5348</title>
    <link href="/2021/08/06/bzoj5348/"/>
    <url>/2021/08/06/bzoj5348/</url>
    
    <content type="html"><![CDATA[<p>题意：</p><p>你有一个随机数生成器，最初给定一个 <span class="math inline">\(0\leq x\leq n-1\)</span> 的整数作为随机种子.</p><p>这个随机数生成器会每次输出 <span class="math inline">\(x\)</span> 并将 <span class="math inline">\(x^k \bmod n\)</span> 作为新的 <span class="math inline">\(x\)</span>。</p><p>你很快发现这个随机数生成器很渣。为了证明它很渣，你想要求出有多少个随机种子，使得这个随机数生成器会输出初始种子无穷多次。</p><span id="more"></span><p>数据范围：<span class="math inline">\(n,k\leq 10^{18}\)</span>。</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">Sample.in<br>n,k<br>Sample.out<br>ans<br><br>------<br><br>Sample.in<br>10 2<br>Sample.out<br>4<br></code></pre></div></td></tr></table></figure><hr /><p>首先，我们注意这样一个事。</p><p>当 <span class="math inline">\(n\in \text{prime}\)</span> 怎么做？</p><p>方程怎么写？</p><p><span class="math display">\[x^{k^t}\equiv x\pmod{n}\]</span></p><p>那么由于无论何时 <span class="math inline">\((x,n)=1\)</span>，阶始终存在，所以有：</p><p><span class="math display">\[k^t\equiv 1\pmod{ord_n(x)}\]</span></p><p>也就是说：</p><p><span class="math display">\[\gcd(k,ord_n(x))=1\]</span></p><p>当我们知道阶为多少时，我们显然可以求出这个集合的大小。</p><p>我们现在枚举阶：</p><p><span class="math display">\[\begin{aligned}\sum_{d\mid\phi(n)} \phi(d)[\gcd(d,k)=1]\\\sum_{d\mid \phi(n),\gcd(d,k)=1}\phi(d)\end{aligned}\]</span></p><p>显然我们令 <span class="math inline">\(T\)</span> 为 <span class="math inline">\(\phi(n)\)</span> 剔除所有 <span class="math inline">\(k\)</span> 因子的结果。</p><p><span class="math inline">\(T\)</span> 的求法可以用以下代码体现： <figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(gcd(phi,k)!=<span class="hljs-number">1</span>)&#123;<br>    phi/=gcd(phi,k);<br>&#125;<br></code></pre></div></td></tr></table></figure></p><p>那么此时狮子可化简为：</p><p><span class="math display">\[\begin{aligned}\sum_{d\mid T} \phi(d)=T\end{aligned}\]</span></p><p>这是好的，那么我们有没有办法使得 <span class="math inline">\(n\not \in \text{prime}\)</span> 使用类似方法做呢？</p><p>考虑如果对于 <span class="math inline">\(n\not \in \text{prime}\)</span> 如果我们钦定 <span class="math inline">\(\gcd(x,n)=1\)</span>，上述做法依然成立。</p><p>现在问题被这个 <span class="math inline">\(\gcd\)</span> 卡住了，那就考虑 <span class="math inline">\(\gcd\)</span> 会产生什么厉害东西。</p><p><span class="math inline">\(g=\gcd(x,n)\)</span>，我们考虑这样一个事，如果存在 <span class="math inline">\(p\)</span>，使得 <span class="math inline">\(p^a\mid\mid x,p^b\mid\mid n,a&lt;b\)</span>。</p><p>那么这样 <span class="math inline">\(x^d\)</span>，<span class="math inline">\(d\)</span> 足够大时，<span class="math inline">\(p^b\mid x^d\)</span>，这样 <span class="math inline">\(x^d\)</span> 不可能和 <span class="math inline">\(x\)</span> 同余。</p><p>所以 <span class="math inline">\(g,x,n\)</span> 存在关系。</p><p><span class="math inline">\(\gcd(g,\frac{n}{g})=1,\gcd(g,\frac{x}{g})=1\)</span>。</p><p>那么设 <span class="math inline">\(x=g\cdot X,n=g\cdot N\)</span></p><p><span class="math display">\[\begin{aligned}x^{k^t}\equiv x\pmod{n}\\(gX)^{k^t}\equiv gX\pmod{gN}\\g^{k^t}X^{k^t}\equiv gX\pmod{gN}\\\end{aligned}\]</span></p><p>等式两边同除 <span class="math inline">\(g\)</span>。</p>$$<span class="math display">\[\begin{aligned}g^{k^t-1}X^{k^t}\equiv X\pmod{N}\\g^{k^t-1}X^{k^t-1}\equiv 1\pmod{N}\\k^t-1\equiv 0\pmod{ord_{N}(gX)}\\k^t\equiv 1\pmod{ord_{N}(gX)}\end{aligned}\]</span><p>$$</p><p>很眼熟是吧。</p><p>由于这个 <span class="math inline">\(gX\)</span> 似乎并不那么平凡，我们只能先猜测这个的答案就是上面的答案。</p><hr /><p>也就是猜测 <span class="math inline">\(gX\)</span> 与满足 <span class="math inline">\(k^t\equiv1\pmod{ord_{N}(x)}\)</span> 的 <span class="math inline">\(x\in[1,N)\)</span> 一一对应。</p><p>显然 <span class="math inline">\(ord_{N}(gX)=ord_N(gX\bmod N),\gcd(gX,N)=1\)</span>，所以每一个 <span class="math inline">\(gX\)</span> 能仅对应一个满足的 <span class="math inline">\(x\)</span>。</p><hr /><p>接下来考虑 <span class="math inline">\(gX\)</span> 在 <span class="math inline">\(\bmod N\)</span> 意义下互不相等。</p><p>反证法：如果 <span class="math inline">\(gA\equiv gB\pmod{N},gA\not \equiv gB\pmod{n}\)</span>，直接产生矛盾。（有关 <span class="math inline">\(A\equiv B\pmod{N}\)</span> 的矛盾）</p><hr /><p>接下来考虑是否每一个满足的 <span class="math inline">\(x\)</span> 都有一个 <span class="math inline">\(gX\)</span> 与之对应。</p><p>因为 <span class="math inline">\(\gcd(g,N)=1\)</span> 显然存在逆元。</p><p><span class="math inline">\(gX\equiv x\pmod{N},X=g^{-1}x\pmod{N}\)</span></p><p>显然能够对应。</p><p>所以当 <span class="math inline">\(g\)</span> 确定时，<span class="math inline">\(k^t\equiv 1\pmod{ord_{N}(gX)}\)</span> 满足的 <span class="math inline">\(gX\)</span> 个数就是上面所说的 <span class="math inline">\(x\)</span> 的个数。</p><p>所以我们可以枚举 <span class="math inline">\(g\)</span>，从而算出结果。</p><p>复杂度 <span class="math inline">\(\mathcal{O(pollard-rho(n)+2^{\omega(n)}\log^2(n))}\)</span></p><p>后面可能是单 <span class="math inline">\(\log\)</span> 但问题不大，复杂度瓶颈在于 <span class="math inline">\(pollard-rho(n)\)</span>，即分解质因数复杂度。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br><span class="hljs-comment">//从今天开始戒掉#define int long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">mul</span><span class="hljs-params">(ll a,ll b,ll mod)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a&gt;=mod) a%=mod;<br>    <span class="hljs-keyword">if</span>(b&gt;=mod) b%=mod;<br>    ll tmp=a*b-ll((<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)a/mod*b+<span class="hljs-number">0.5</span>)*mod;<br>    <span class="hljs-keyword">return</span> tmp&lt;<span class="hljs-number">0</span>?tmp+mod:tmp;<br>&#125;<br>ll p[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a,ll b,ll mod)</span></span>&#123;<br>    ll k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=mul(k,a,mod);<br>        a=mul(a,a,mod);b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">chk</span><span class="hljs-params">(ll mod,ll p)</span></span>&#123;<br>    ll res=qpow(p,mod<span class="hljs-number">-1</span>,mod);<br>    ll b=mod<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(res!=<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(b%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>        b/=<span class="hljs-number">2</span>;<br>        ll r=qpow(p,b,mod);<br>        <span class="hljs-keyword">if</span>(r==mod<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(r!=<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">prime</span><span class="hljs-params">(ll x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)&#123;<br>        <br>        <span class="hljs-keyword">if</span>(x==p[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(x%p[i]==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(chk(x,p[i])==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//mt19937 rnd(time(0));</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">nxt</span><span class="hljs-params">(ll a,ll c,ll mod)</span></span>&#123;<br>    ll tmp=mul(a,a,mod)+c;<br>    <span class="hljs-keyword">return</span> tmp&gt;=mod?tmp-mod:tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pollard</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    ll a1=<span class="hljs-number">1ll</span>*rand()*rand()%n,c=<span class="hljs-number">1ll</span>*rand()*rand()%n;<br>    ll a2=a1;<br>    a1=nxt(a1,c,n),a2=nxt(nxt(a2,c,n),c,n);<br>    <span class="hljs-keyword">int</span> lim=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(a1!=a2)&#123;<br>        ll v=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=lim&amp;&amp;a1!=a2;i++,a1=nxt(a1,c,n),a2=nxt(nxt(a2,c,n),c,n))&#123;<br>            ll backv=v;<br>            v=mul(v,<span class="hljs-built_in">abs</span>(a1-a2),n);<br>            <span class="hljs-keyword">if</span>(!v) <span class="hljs-keyword">return</span> gcd(<span class="hljs-built_in">abs</span>(a1-a2),n);<br>        &#125;<br>        ll g=gcd(v,n);<br>        <span class="hljs-keyword">if</span>(g&gt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> g;<br>        <span class="hljs-keyword">if</span>(lim&lt;<span class="hljs-number">128</span>) lim&lt;&lt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pollard(n);<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;ll&gt; f;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">factor</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(prime(n))&#123;<br>        f.push_back(n);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    ll fac=pollard(n);<br>    <span class="hljs-keyword">if</span>(prime(fac))&#123;<br>        f.push_back(fac);<br>        <span class="hljs-keyword">return</span> factor(n/fac);<br>    &#125;<br>    factor(fac);<br>    factor(n/fac);<br>&#125;<br>ll n,k;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">getv</span><span class="hljs-params">(ll v,ll ph)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(gcd(ph,k)!=<span class="hljs-number">1</span>)&#123;<br>        ph/=gcd(ph,k);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ph;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;ll&gt; a,b;<br><span class="hljs-keyword">int</span> lim;<br>ll ans;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,ll res,ll ph)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==a.size())&#123;<br>        <span class="hljs-keyword">if</span>(res&gt;<span class="hljs-number">1</span>) ans+=getv(res,ph);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    dfs(n+<span class="hljs-number">1</span>,res,ph);<br>    dfs(n+<span class="hljs-number">1</span>,res*a[n],ph*b[n]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k;<br>    f.clear();<br>    factor(n);<br>    ll N=n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;f.size();i++)&#123;<br>        <span class="hljs-keyword">if</span>(f[i]!=f[i<span class="hljs-number">-1</span>])&#123;<br>            ll res=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(N%f[i<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>) N/=f[i<span class="hljs-number">-1</span>],res=res*f[i<span class="hljs-number">-1</span>];<br>            a.push_back(res);<br>            b.push_back(res/f[i<span class="hljs-number">-1</span>]*(f[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>));<br>        &#125;<br>    &#125;<br>    a.push_back(N);<br>    b.push_back(N/(f.back())*(f.back()<span class="hljs-number">-1</span>));<br>    lim=a.size();<br>    dfs(<span class="hljs-number">0</span>,<span class="hljs-number">1ll</span>,<span class="hljs-number">1ll</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans+<span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>pollard-rho</tag>
      
      <tag>阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arc122D</title>
    <link href="/2021/08/05/arc122E/"/>
    <url>/2021/08/05/arc122E/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://atcoder.jp/contests/arc122/tasks/arc122_e">Link</a></p><h3 id="sol">sol</h3><p>贪心思路显然，我们先把选一定没事的放在后面，接下来化归成子问题。</p><p>什么时候选一定没事，也就是 <span class="math inline">\(a_i\)</span> 具有一个质因子 <span class="math inline">\(p\)</span>,使得 <span class="math inline">\(p\)</span> 在 <span class="math inline">\(a_i\)</span> 中次数最高。</p><p>形式化表示：设 <span class="math inline">\(a_i=\prod_{k}p_k^{\alpha_{i,k}}\)</span>。</p><p>那么 <span class="math inline">\(a_i\)</span> 选一定没事，当且仅当 存在 <span class="math inline">\(k\)</span> , <span class="math inline">\(\forall j\not = i,\alpha_{i,k}&gt;\alpha_{j,k}\)</span>。</p><p>因为 <span class="math inline">\(a_i\)</span> 放在后面不会使前面的子问题更劣，所以贪心正确，如果不存在这样的 <span class="math inline">\(a_i\)</span> ，说明这个序列 <span class="math inline">\(a\)</span> 无解，，这里可以反证，考虑最后一个数。</p><p>那么如何判断 <span class="math inline">\(a_i\)</span> 是否拥有最大质因子呢？</p><p>考虑对于 <span class="math inline">\(a,b,a=\prod p_i^{\alpha_i}\)</span>, <span class="math inline">\(b=\prod p_i^{\beta_i}\)</span> ,我们想求: <span class="math inline">\(k=\prod p_i^{\alpha_i}(\alpha_i&gt;\beta_i)\)</span>。</p><p>给出一个较简单的方法。</p><p>求出 <span class="math inline">\(\gcd(a,b)\)</span>,我们看 <span class="math inline">\(\frac{a}{\gcd(a,b)}\)</span> 有多少因子在 <span class="math inline">\(\gcd(a,b)\)</span> 中，那么递归做 <span class="math inline">\(\gcd\)</span> 即可。</p><p>可见代码。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> G=gcd(a,b);<br>    a/=G;<br>    <span class="hljs-keyword">int</span> res=a;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">int</span> g=gcd(res,G);<br>        <span class="hljs-keyword">if</span>(g==<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>        G/=g,a*=g;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>有一点值得注意，因为我们相当是把 <span class="math inline">\(\gcd(a,b)\)</span> 拆分成 <span class="math inline">\(a\)</span> 的因子，<span class="math inline">\(b\)</span> 的因子两部分，所以当算出一次 <span class="math inline">\(\gcd\)</span> 时要把 <span class="math inline">\(G\leftarrow \frac{G}{\gcd}\)</span>.</p><p>全部代码 <a href="https://atcoder.jp/contests/arc122/submissions/24784163">code</a></p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arc116E</title>
    <link href="/2021/08/04/arc116E/"/>
    <url>/2021/08/04/arc116E/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://atcoder.jp/contests/arc116/tasks/arc116_e">Link</a></p><hr /><h3 id="题解">题解</h3><p>答案显然具有单调性。</p><p>二分，对于 <span class="math inline">\(mid\)</span> 我们计算最少需要几个点使得可以全部覆盖整个树。</p><p>我们有一个显然的贪心，对于以 <span class="math inline">\(u\)</span> 为跟的子树，我们选 <span class="math inline">\(u\)</span> 当且仅当子树内最深的到 <span class="math inline">\(u\)</span> 的距离恰好为 <span class="math inline">\(mid\)</span>。</p><p>如何证明？</p><p>考虑如果不是这样，我们找到最深的一个选的 <span class="math inline">\(u\)</span> 不满足上述贪心策略。</p><p>跳 <span class="math inline">\(u\)</span> 父亲，显然 <span class="math inline">\(fa_u\)</span> 不劣于 <span class="math inline">\(u\)</span>。</p><p>考虑 <span class="math inline">\(fa_u\)</span> 能更多照顾到 <span class="math inline">\(u\)</span> 子树外的点，而且此时 <span class="math inline">\(u\)</span> 子树内依旧合法。</p><hr /><p>有了贪心策略就很简单了。</p><p>我们维护 <span class="math inline">\(a_u\)</span> 表示 <span class="math inline">\(u\)</span> 子树内所选的点还能支持多远。</p><p><span class="math inline">\(b_u\)</span> 表示 <span class="math inline">\(u\)</span> 子树内不能被覆盖到的点距离 <span class="math inline">\(u\)</span> 的距离。注意 <span class="math inline">\(u\)</span> 距离 <span class="math inline">\(u\)</span> 0个距离。</p><p>考虑 <span class="math inline">\(\min_{(u,v)}{a_v-1}\)</span> 和 <span class="math inline">\(\min_{(u,v)}b_v+1\)</span> 关系即可。</p><p>记 <span class="math inline">\(p=\min_{(u,v)}a_v-1,q=\min_{(u,v)}b_v+1\)</span></p><ol type="1"><li><p>如果 <span class="math inline">\(p\geq q\)</span> 证明 <span class="math inline">\(u\)</span> 子树内不能被覆盖的点可以通过其他所选点覆盖。</p><p>此时 <span class="math inline">\(b_u=-1\)</span>,<span class="math inline">\(a_u=p\)</span></p></li><li><p>否则如果 <span class="math inline">\(p=mid\)</span> 代表必须采取行动选 <span class="math inline">\(u\)</span> 覆盖，此时 <span class="math inline">\(b_u=-1,a_u=mid\)</span>。</p></li><li><p>否则，我们不覆盖，但是此时所选点也不会在产生贡献，所以我们可以直接 <span class="math inline">\(a_u=0,b_u=q\)</span>。</p></li></ol><p><a href="https://atcoder.jp/contests/arc116/submissions/24770350">code</a></p><h3 id="吐槽">吐槽</h3><p>at 的题解很奇怪，不是很懂为什么要提到 <code>dynamic programming</code>,也不解释 贪心策略。</p><p>这个贪心策略还是很明显的，但是正确性确实需要考虑，而我已经想到这个贪心，但是看到题解没提到贪心，而是放了一个 <code>dynamic programming</code> 就觉得自己错了。</p><p>希望这篇博客能帮到你吧。</p>]]></content>
    
    
    <categories>
      
      <category>贪心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>binary search</tag>
      
      <tag>greedy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arc116D</title>
    <link href="/2021/08/04/arc116D/"/>
    <url>/2021/08/04/arc116D/</url>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/arc116/tasks/arc116_d">题意</a>很简洁。</p><p>让你求有多少个长度为 <span class="math inline">\(N\)</span> 的序列 <span class="math inline">\(A\)</span>，使得 <span class="math inline">\(\sum_{i=1}^{n}A_i=m,\sum_{\oplus}A_i=0\)</span>.</p><span id="more"></span><hr /><p>暴力 dp 效率不高。</p><p>考虑异或的性质，我们本质上时在填一个 <span class="math inline">\(n\)</span> 行，<span class="math inline">\(\lceil\log_2 m\rceil\)</span> 列的表。</p><p>只需要保证 每一列的 1 的个数符合题意，并且和是正确的即可。</p><p>那么很容易得到 dp: <span class="math display">\[\text{dp}_n(x)=\sum_{k=0,2\mid k}\binom{n}{k}\text{dp}_{n-1}(x-2^nk)\]</span></p><p>假设 <span class="math inline">\(n,m\)</span> 同阶复杂度 <span class="math inline">\(\mathcal{O(n^2)}\)</span>。</p><p>可以考虑运算次数：</p><p><span class="math display">\[\sum_{j=1}^{\log_2 m}\sum_{i=1}^{m}\min(\frac{i}{2^j},n)\]</span></p><p>若 <span class="math inline">\(n&gt;m\)</span> 那么 <span class="math inline">\(\dfrac{i}{2^j}\leq n\)</span>。</p><p>所以原式小于等于</p><p><span class="math display">\[\sum_{j=1}^{\log_2 m}\sum_{i=1}^{m}\frac{i}{2^j}=\sum_{j=1}^{\log_2 m}\frac{1}{2^j}\sum_{i=1}^{m}i=\sum_{j=1}^{\log_2 m}\frac{1}{2^j}m^2=\mathcal{O(m^2)}\]</span></p><p>即 <span class="math inline">\(\mathcal{O(n^2)}\)</span></p><p>代码可见 <a href="https://atcoder.jp/contests/arc116/submissions/24764368">code</a></p>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>小idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>slope trick/arc123d</title>
    <link href="/2021/08/03/slope-tricks/"/>
    <url>/2021/08/03/slope-tricks/</url>
    
    <content type="html"><![CDATA[<p>通过 arc123D 讨论一下 <span class="math inline">\(\texttt{slope trick}\)</span>。</p><span id="more"></span><h3 id="part--1">part -1</h3><p><span class="math inline">\(\text{slope trick}\)</span> 顾名思义，并不是斜率优化 dp。</p><h3 id="part-0">part 0</h3><p>我并没有对 <span class="math inline">\(\text{slope trick}\)</span> 很深入的理解不具体介绍，只是讲一下 arc123D 的优化技巧。</p><p>待填坑。</p><hr /><h3 id="arc123d">arc123D</h3><p><a href="https://atcoder.jp/contests/arc123/tasks/arc123_d">link</a></p><p>考虑 <span class="math inline">\(B,C\)</span> 两个序列不好一起维护，而且 <span class="math inline">\(B_i+C_i=A_i\)</span>，所以直接只维护一个 <span class="math inline">\(B\)</span>。</p><p>那么 <span class="math inline">\(B_i\leq B_{i+1}\)</span> 且 <span class="math inline">\(C_i=A_i-B_i\geq C_{i+1}=A_{i+1}-B_{i+1}\)</span>.</p><p>所以 <span class="math inline">\(B_i\leq B_{i+1},B_{i}\leq B_{i+1}-(A_{i+1}-A_{i})\)</span>.</p><p>设 <span class="math inline">\(B_i\leq B_{i+1}-D_{i+1}\)</span>。</p><p>那么我们可以进行dp。</p><p><span class="math inline">\(\text{dp}_n(x)\)</span> 表示 <span class="math inline">\(B_n=x\)</span> 最小答案。</p><p>枚举上一个显然有转移：</p><p><span class="math display">\[\text{dp}_{n}(x)=\min _{j\leq x-D_{n}}\text{dp}_{n-1}(j)+\mid x\mid+\mid A_n-x\mid\]</span></p><p>发现这本质上是一个前缀最小，加上一个下凸函数 <span class="math inline">\(\mid x\mid+\mid A_n-x\mid\)</span>。</p><p>所以 <span class="math inline">\(\text{dp}_n(x)\)</span> 的函数图像也为下凸。</p><p>关键的来了每次加上的 <span class="math inline">\(\mid x\mid+\mid A_n-x\mid\)</span> 的斜率仅仅为 <span class="math inline">\(2\)</span>。</p><p>这给我们提供了一个有利条件，最终函数图像是下凸，函数图像被一些整点分割成一段段直线，分割点个数级别是 <span class="math inline">\(n\)</span> 的。</p><p>考虑每一次转移可以被拆分成：平移x坐标，推平最后斜率大于0的，转移即添加4个斜率变化关键点（考虑斜率为2，保证斜率连续）。</p><p>具体实现注意，<span class="math inline">\(x\)</span> 坐标和 <span class="math inline">\(slope\)</span> 都是单调的，所以只需要维护 <span class="math inline">\(x\)</span> 坐标即可，剩下的就是一个全局加，单点插入的经典题。</p><p>答案即为最后函数 <span class="math inline">\(slope=0\)</span> 的那段函数值。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">1000</span>;<br><span class="hljs-keyword">int</span> a[N],n;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e10</span>;<br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    <span class="hljs-keyword">int</span> lv=<span class="hljs-number">0</span>,ls=<span class="hljs-number">0</span>,add=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> pre=-inf;<br>        ls=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span>(!q.empty()&amp;&amp;ls&gt;<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span>(pre!=-inf)&#123;<br>                lv-=(pre-q.top())*ls;<br>            &#125;<br>            pre=q.top();<br>            ls--;q.pop();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>) add+=max(<span class="hljs-number">0ll</span>,a[i]-a[i<span class="hljs-number">-1</span>]);<br>        <span class="hljs-keyword">int</span> x1=-add,x2=a[i]-add;<br>        q.push(x1),q.push(x1);<br>        q.push(x2),q.push(x2);<br>        <span class="hljs-keyword">int</span> x=q.top()+add;<br>        lv=lv+<span class="hljs-built_in">abs</span>(x)+<span class="hljs-built_in">abs</span>(x-a[i]);<br>    &#125;    <br>    <span class="hljs-keyword">int</span> pre=-inf;<br>    ls=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty()&amp;&amp;ls&gt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span>(pre!=-inf)&#123;<br>            lv-=(pre-q.top())*ls;<br>        &#125;<br>       pre=q.top();<br>        ls--;q.pop();<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;lv;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>dp</tag>
      
      <tag>slope trick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1550D excellent arrays</title>
    <link href="/2021/07/31/cf1550D/"/>
    <url>/2021/07/31/cf1550D/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1550/problem/D">Link</a></p><span id="more"></span><hr /><h3 id="题解">题解</h3><p>首先我们观察如果 <span class="math inline">\(a_i+a_j=i+j\)</span>,那么 <span class="math inline">\(a_i-i=-(a_j-j)\)</span>。</p><p>那么我么定义一个属性值 <span class="math inline">\(v_i=a_i-i\)</span>。</p><p>那么 <span class="math inline">\(v_i\in\{d,-d\}\)</span>,肯定是最优的。</p><p>问题转化为我们选 <span class="math inline">\(\lfloor{\dfrac{n}{2}}\rfloor\)</span> 个 <span class="math inline">\(d\)</span>，选 <span class="math inline">\(\lceil{\dfrac{n}{2}}\rceil\)</span> 个 <span class="math inline">\(-d\)</span> 作为 <span class="math inline">\(v_i\)</span>。</p><p>然后 <span class="math inline">\(l\leq a_i=i+v_i\leq r\)</span>。</p><p>然后我们肯定可以确定出最小的的可以 <span class="math inline">\(-d\)</span> 的，记作 <span class="math inline">\(a\)</span>；最大的可以 <span class="math inline">\(+d\)</span> 的，记作 <span class="math inline">\(b\)</span>。</p><p>接下来我找到了两种方法。</p><ol type="1"><li><p>这个是我翻<a href="https://codeforces.com/profile/jiangly"><span class="math inline">\(\color{black}j\color{red}iangly\)</span></a>的代码，得出的答案。</p><p>我们直接枚举 <span class="math inline">\(d\in[1,\infty]\)</span>,然后确定出 <span class="math inline">\(a,b\)</span> 的区间范围。</p><p><span class="math inline">\(a=l+d,b=r-d\)</span>。</p><p>然后我们可以确定出 <span class="math inline">\(i\in[1,a)\)</span> 必须要 <span class="math inline">\(+d\)</span> , <span class="math inline">\(i\in(b,n]\)</span>，必须要 <span class="math inline">\(-d\)</span>。</p><p>然后可以选的区间为 <span class="math inline">\([a,b]\)</span> ，然后需要 <span class="math inline">\(\lfloor\frac{n}{2}\rfloor\)</span>,<span class="math inline">\(\lceil\frac{n}{2}\rceil\)</span> <span class="math inline">\(-a\)</span> 个 <span class="math inline">\(+d\)</span> 的。</p><p>考虑这个 <span class="math inline">\(d\)</span>​ 枚举状态高达 <span class="math inline">\(2\times 10^9\)</span>​ ,<span class="math inline">\(\mathcal{\color{gold}TLE}\)</span>​。</p><p>发现当 <span class="math inline">\(d\in[1,\min(1-l,r-n)]\)</span> 时，可以取满 <span class="math inline">\(\binom{n}{n/2}\)</span>。</p><p>然后就剩 <span class="math inline">\(d\in(\min(1-l,r-n),\min(1-l,r-n)+n]\)</span>。</p><p>显然复杂度为 <span class="math inline">\(\mathcal{O(n)}\)</span></p></li><li><p>这个是我的做法</p><p>我们可以枚举 <span class="math inline">\(a,b\)</span>,即上文提到的 <span class="math inline">\(a,b\)</span>。</p><p>现在我们可以反向确定 <span class="math inline">\(d\)</span>。</p><p><span class="math inline">\(d\in[1,\min(a-l,r-b)\)</span>]。</p><p><span class="math display">\[ans\leftarrow \binom{b-a-1}{\lfloor\frac{n}{2}\rfloor-a}\]</span>​​</p><p>也就是枚举 <span class="math inline">\(a,b\)</span>​。</p><p><span class="math display">\[ans=\sum_{a=1}^{n}\sum_{b=a+1}^{n}\min(a-l,r-b)\binom{b-a-1}{\lfloor\frac{n}{2}\rfloor-a}\]</span></p><p>拆 <span class="math inline">\(\min\)</span>​,直接看后面。 <span class="math display">\[ans=\sum_{a}\sum_{b}(a-l)\binom{b-a-1}{\lfloor\frac{n}{2}\rfloor-a}+\sum_{a}\sum_{b}(r-b)\binom{b-a-1}{\lfloor\frac{n}{2}\rfloor-a}\]</span> <span class="math inline">\(a,b\)</span> 范围不写了，没什么必要了。</p><p>现在只需要我们能快速求出 <span class="math inline">\(\sum_{i}\binom{i}{n}\)</span> 和 <span class="math inline">\(\sum_{i}i\binom{i}{n}\)</span> 即可。</p><p><span class="math inline">\(\sum_{i}\binom{i}{n}\)</span> 是个经典问题。</p><p><span class="math inline">\(\sum_{i}i\binom{i}{n}\)</span> 等价于求 <span class="math inline">\(\sum_{i}(i+1)\binom{i}{n}=\sum_{i}\frac{1}{n+1}\binom{i+1}{n+1}=\frac{1}{n+1}\sum_{i}\binom{i+1}{n+1}\)</span>​。​​也是经典问题。</p><p>done.</p><p><a href="https://codeforces.com/contest/1550/submission/122579785">code</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>combination</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>edu112/codeforces round 1555</title>
    <link href="/2021/07/31/edu112/"/>
    <url>/2021/07/31/edu112/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1555">Links</a></p><span id="more"></span><h3 id="a"><a href="https://codeforces.com/contest/1555/problem/A">A</a></h3><p>憨憨题，6,8,10的性价比都一样，奇数铁不行，只能用偶数。</p><p>偶数就直接除2。随便组合就行。特判 2,4即可。</p><hr /><h3 id="b"><a href="https://codeforces.com/contest/1555/problem/B">B</a></h3><p>憨憨题，发现直接沿着 x 轴，y 轴平移即可。</p><p>新的矩形只能放在四角，判一判平移会不会出界即可。</p><hr /><h3 id="c"><a href="https://codeforces.com/contest/1555/problem/C">C</a></h3><p>憨憨题，Alice只能选择一个 <span class="math inline">\((1,y)\)</span> 向下走到 <span class="math inline">\((2,y)\)</span>。</p><p>所以 Bob 能走的是 <span class="math inline">\(\max(suf_{y+1},pre_{y-1})\)</span>。</p><p>模拟即可。</p><hr /><h3 id="d"><a href="https://codeforces.com/contest/1555/problem/D">D</a></h3><p>憨憨题，发现因为字符集大小为 3，合法串只可能长成 <span class="math inline">\(\texttt{abcabcabc}\cdots\texttt{abc}\)</span> 的样子，所以直接就枚举字符集全排列，判一判就好了。</p><p>前缀和模拟即可，复杂度 <span class="math inline">\(\mathcal{O(6n)}\)</span></p><hr /><h3 id="e"><a href="https://codeforces.com/contest/1555/problem/E">E</a></h3><p>发现这个1与n联通等价于把选出的 segment +1，看是不是全大于0.</p><p>然后最大减最小尽可能小？</p><p>我会 <span class="math inline">\(\texttt{binary search}\)</span>​​ 发现 <span class="math inline">\(m\leq 10^6\)</span> 好像不大行。</p><p>那我会 <span class="math inline">\(\texttt{two pointers}\)</span>​ 。</p><p>先按 <span class="math inline">\(w\)</span> 排序，显然，枚举右端点，看此时合法到哪里，移动左端点。</p><p>正确性显然。</p><p>复杂度：<span class="math inline">\(\mathcal{O(n\log m)}\)</span>。</p><p><del>憨憨题考试都做不对，呜呜呜</del></p><hr /><h3 id="f"><a href="https://codeforces.com/contest/1555/problem/F">F</a></h3><p>憨憨DS，睡了一觉就会了。（其实考试时都没看到，充分说明自己菜）</p><p>如何快速看一个边合不合法？</p><p>如果存在套环的情况，考虑对于对于环 <span class="math inline">\(c_1,c_2\)</span> 。</p><p>一个最大的边的子集 <span class="math inline">\(s\)</span>​​ ，如果<span class="math inline">\(s\subset c_1,s\subset c_2\)</span>​。那么 <span class="math inline">\(c_1,c_2\)</span>​​ 的异或都为一，并且<span class="math inline">\(c_1\)</span>​​ 并 <span class="math inline">\(c_2\)</span>​​ 去除 <span class="math inline">\(s\)</span>​​ 的简单回路异或就为 <span class="math inline">\(0\)</span> 不合法。</p><p>所以不可能存在套环的情况。</p><p>这就提示我们这玩意是个边仙人掌。</p><p>直接考虑树。</p><p>如果是一条连接一颗树上的两个节点的边，那么首先判断是否路径上的边都不在任意一个连通块内。</p><p>然后再看新形成的一个环的 <span class="math inline">\(\texttt{xor}\)</span> 是否为1。</p><p>如果是一条连接两个连通块的边，一定行。</p><p>LCT （le ci te) 不好写，嘤嘤嘤。</p><p>离线把最终的树建出，考虑对树的形态产生影响的边只有连接连通块的边，用并查集维护即可。</p><p>然后随便剖一剖就好了。</p><p>复杂度 <span class="math inline">\(\mathcal{O(q\log^2n)}\)</span> 大概率比 LCT 快吧（（（（。</p>]]></content>
    
    
    <categories>
      
      <category>whole round</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cf1515F &amp; cf1515G</title>
    <link href="/2021/06/15/cf1515F/"/>
    <url>/2021/06/15/cf1515F/</url>
    
    <content type="html"><![CDATA[<h2 id="cf-1515f">cf 1515F</h2><h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1515/problem/F">Link</a></p><span id="more"></span><h3 id="题解">题解</h3><p>考场时候没时间想了，毕竟D 耽误了我 1h+ 只是因为 <code>while</code> 打成了 <code>if</code> 。。。</p><p>首先这个题比较神奇的地方应该是他除了 <span class="math inline">\(\sum a_i&lt;(n-1)x\)</span> 其余情况都有解。</p><p>我胡一个证明吧。</p><p>也就是证明 <span class="math inline">\(sum \ge (n-1)x\)</span> 必然有解。</p><ul><li><p>归纳法，n=1时候显然成立，下面就是证明 <span class="math inline">\(n=t\)</span> 可以转移到 <span class="math inline">\(n=t-1\)</span> 的状态。</p></li><li><p>首先如果存在 <span class="math inline">\(a_i\ge x\)</span>,那么 <span class="math inline">\(i\)</span> 随便连都满足。</p></li><li><p>否则 <span class="math inline">\(\forall a_i&lt; x\)</span>,如果不存在 <span class="math inline">\(a_i+a_j\ge x\)</span>，那么<span class="math inline">\(\sum_{i=1}^{n-2}a_i&lt;(n-2)x,a_n+a_{n-1}&lt;x\)</span></p><p>所以 <span class="math inline">\(\sum_{i=1}^{n}a_i&lt;(n-1)x\)</span> 矛盾，所以一定存在 <span class="math inline">\(a_i+a_j\ge x\)</span>。</p></li></ul><hr /><p>注意这样的一点，设 <span class="math inline">\(a_{max}\)</span> 为最大的 <span class="math inline">\(a_i\)</span>。</p><p>如果 <span class="math inline">\(a_{max}+a_i&lt;x\)</span>，那么不管别的怎么组合，想要救这个 <span class="math inline">\(a_i\)</span> 都不可能了。</p><p>因为 <span class="math inline">\(a_{max}&lt;x\)</span>,每一个 <span class="math inline">\(a_i&lt;x\)</span> ,合并对于每一个 <span class="math inline">\(a_i\)</span> 都是劣的。</p><p>再根据上面那个结论，所以要是有解，我 <span class="math inline">\(a_{max}\)</span> 想和谁合并都可以合并。</p><hr /><p>这样我们有了一个做法，维护 <span class="math inline">\(a_{max}\)</span> 以及每一个<span class="math inline">\(i\)</span> 能到达的所有点集 。</p><p>每次找出 <span class="math inline">\(a_{max}\)</span> 并且在他属于的那个点集中，随机找一个不在他这个连通块中的。启发式合并。</p><div class="note note-info">            <p>Tips:</p><p>注意 vector 的 clear 不能释放内存！！而deque的pop_back似乎能释放内存。</p><p>一定要启发式合并，不要瞎 yy，以为是均摊的。</p><p>能到达的点集肯定是有不合法的（已经联通的），注意处理这个地方的逻辑，一定不要图省事。</p>          </div><h3 id="参考代码">参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,x,w;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">3e5</span>+<span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> fa[N];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> val[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==fa[x]) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> fa[x]=gt(fa[x]);<br>&#125;<span class="hljs-comment">// 并查集</span><br><span class="hljs-keyword">int</span> a[N];<br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>,<span class="hljs-keyword">int</span>&gt; &gt;q;<br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt;v[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    val[x]=val[x]+val[y]-w;<br>    <span class="hljs-keyword">if</span>(v[x].size()&lt;v[y].size()) swap(v[x],v[y]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> d:v[y])  v[x].push_back(d);<br>    <span class="hljs-keyword">while</span>(!v[y].empty()) v[y].pop_back();<br>    fa[y]=x;<br>&#125;<span class="hljs-comment">//启发式合并 deque</span><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;x;w=x;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i],sum+=<span class="hljs-number">1ll</span>*a[i];<br>    <span class="hljs-keyword">if</span>(sum&lt;<span class="hljs-number">1ll</span>*(n<span class="hljs-number">-1</span>)*x) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>,<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 判断无解</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) fa[i]=i,val[i]=a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>        v[x].push_back(<span class="hljs-built_in">make_pair</span>(y,i));<br>        v[y].push_back(<span class="hljs-built_in">make_pair</span>(x,i));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        q.push(<span class="hljs-built_in">make_pair</span>(val[i],i));<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ii=<span class="hljs-number">1</span>;ii&lt;n;ii++)&#123;<br>        <span class="hljs-keyword">int</span> i=q.top().second,id=gt(i);q.pop();<br>        <span class="hljs-comment">// 取出最大值，当然我们只在并查集根节点出统计即可。</span><br>        <span class="hljs-keyword">if</span>(i!=id) &#123;ii--;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; y=v[id].back();<br>        v[id].pop_back();<br>        <span class="hljs-keyword">if</span>(id==gt(y.first))&#123;<span class="hljs-comment">// 处理不合法。</span><br>            <span class="hljs-keyword">while</span>(gt(v[id].back().first)==id) v[id].pop_back();<br>            y=v[id].back();<br>            v[id].pop_back();<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;y.second&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        merge(gt(i),gt(y.first));<br>        q.push(<span class="hljs-built_in">make_pair</span>(val[gt(i)],gt(i)));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr /><hr /><hr /><h2 id="cf-1515g">cf 1515G</h2><h3 id="题意-1">题意</h3><p><a href="https://codeforces.com/problemset/problem/1515/G">Link</a></p><h3 id="题解-1">题解</h3><p>首先注意，我们不管咋走最后都要回到这个点。</p><p>所以我们走的一定是一个回路，可以是不简单回路。</p><p>所以以下讨论都在一个 scc 中讨论。(毕竟一个环必然是一个 scc，同时如果这个点不在scc中，他只可能权值为0)。</p><h4 id="lemma-1">Lemma 1</h4><p>不管 <span class="math inline">\(\bmod\)</span> 什么，如果从 <span class="math inline">\(A\rightarrow B\)</span> 有一条权值和为 <span class="math inline">\(x\)</span> 的路径，一定存在一条从 <span class="math inline">\(B\rightarrow A\)</span> 权值为 <span class="math inline">\(-x\)</span> 的路径。</p><p>由于是scc，设 <span class="math inline">\(B\rightarrow A\)</span> 之间有一条权值为 <span class="math inline">\(y\)</span> 的路径。（<span class="math inline">\(y\)</span> 具体是什么并不重要）</p><p>假设当前 <span class="math inline">\(\bmod m\)</span>，我们从 <span class="math inline">\(B\)</span> 开始，在 <span class="math inline">\(A,B\)</span> 之间往复走 <span class="math inline">\(m-1\)</span> 次，最后一次到 <span class="math inline">\(A\)</span>。</p><p>此时权值和为 <span class="math inline">\((m-1)(x+y)+y \equiv (m-1)x\equiv -x\bmod m\)</span>。</p><p>qed</p><hr /><p>所以我们现在可以神不知鬼不觉地从 <span class="math inline">\(A\)</span> 跑到任意一个 <span class="math inline">\(B\)</span> ，然后在 <span class="math inline">\(B\)</span> 那里随便走几个圈，然后神不知鬼不觉地回来。</p><p>（因为 <span class="math inline">\(A\rightarrow B\)</span> 权值为 <span class="math inline">\(x\)</span>,存在 <span class="math inline">\(B\rightarrow A\)</span> 权值为 <span class="math inline">\(-x\)</span>，这么一来一回相当于，中间的具体从 <span class="math inline">\(A\)</span> 到 <span class="math inline">\(B\)</span> 怎么走的不用管了。</p><p>那么我们现在能走出的圈的权值，只可能是所有简单圈的权值，通过线性运算得出的权值。</p><p>由于裴蜀定理，现在能表示出的圈的权值，都是 <span class="math inline">\(\gcd(l_1,l_2,\cdots,l_k)\)</span> 的倍数。<span class="math inline">\(l_i\)</span> 表示简单环的长度。</p><p>怎么找到所有简单环也是个问题。</p><p>建出dfs 树后，一条非树边连接的 <span class="math inline">\((u,v,w)\)</span> 产生了一个权值为 <span class="math inline">\(dep_u+w-dep_v\)</span> 的环。</p><p>这还不够，因为还存在两条非树边产生的环。但冷静思考一下，这个环的长度可以用两个非树边连接的环长度和表示。</p><p><img src="/img/2.png" /></p><p>如图所示，红色可以由蓝色，绿色相加而得，注意边的正反。</p><p>由于我们一直强调的线性表示，所以在 <span class="math inline">\(\gcd\)</span> 的角度下，蓝色和绿色在一起等价于红色。</p><p>我们只要算有一条非树边产生的环的 <span class="math inline">\(\gcd\)</span> 即可。</p><p><span class="math inline">\(Code\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">1000</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt; v[N],e[N];<br><span class="hljs-keyword">int</span> cnt,col[N],dfn[N],low[N],c;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt;s;<span class="hljs-keyword">bool</span> vis[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    dfn[x]=low[x]=++cnt;<br>    s.push(x);vis[x]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first;<br>        <span class="hljs-keyword">if</span>(dfn[y]==<span class="hljs-number">0</span>)&#123;<br>            tarjan(y);low[x]=min(low[x],low[y]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vis[y]) low[x]=min(low[x],dfn[y]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(low[x]==dfn[x])&#123;<br>        <span class="hljs-keyword">int</span> y=<span class="hljs-number">-1</span>;c++;<br>        <span class="hljs-keyword">while</span>(y!=x)&#123;<br>            y=s.top();s.pop();<br>            col[y]=c;vis[y]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 以上为tarjan</span><br><span class="hljs-keyword">int</span> dep[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br><span class="hljs-keyword">int</span> g[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    vis[x]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;e[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=e[x][i].first;<br>        <span class="hljs-keyword">if</span>(vis[y])&#123;<br>            g[col[x]]=gcd(g[col[x]],dep[x]+e[x][i].second-dep[y]);<br>        &#125;   <br>        <span class="hljs-keyword">else</span> &#123;<br>            dep[y]=dep[x]+e[x][i].second;<br>            work(y);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> q,a,b,u;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,w;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;w;<br>        v[x].push_back(<span class="hljs-built_in">make_pair</span>(y,w));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">if</span>(!dfn[i]) tarjan(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;v[i].size();j++)&#123;<br>            <span class="hljs-keyword">int</span> k=v[i][j].first;<br>            <span class="hljs-keyword">if</span>(col[i]==col[k]) e[i].push_back(v[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 以上为tarjan</span><br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(vis[i]==<span class="hljs-number">0</span>) work(i);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;q;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;u&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">0</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[col[u]]==<span class="hljs-number">0</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            a=b-a;<br>            <span class="hljs-keyword">if</span>(a%gcd(g[col[u]],b)!=<span class="hljs-number">0</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>        &#125;       <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小idea</tag>
      
      <tag>dsu</tag>
      
      <tag>加边加边并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arc122D</title>
    <link href="/2021/06/13/arc122D/"/>
    <url>/2021/06/13/arc122D/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://atcoder.jp/contests/arc122/tasks/arc122_d">Link</a></p><span id="more"></span><h3 id="题解">题解</h3><h4 id="hint1">hint1</h4><p>考虑权值 <span class="math inline">\(v\)</span> 的合法性。</p><p>如果 <code>Alice</code> 任意选一个 <span class="math inline">\(a_i\)</span> ,<code>Bob</code> 都有一个对策 <span class="math inline">\(a_j\)</span>, <span class="math inline">\(s.t. \ a_i\operatorname{xor} a_j\leq v\)</span>，那么 <span class="math inline">\(v\)</span> 就是合法的。</p><h4 id="hint2">hint2</h4><p>想要让 <span class="math inline">\(v\)</span> 尽可能大，所以从二进制的高位到低位依次考虑。</p><h4 id="solution">solution</h4><p>建出全局的 trie.</p><ol type="1"><li><p>对于第 <span class="math inline">\(x\)</span> 位（当前最高位） ，如果是该位是 <span class="math inline">\(0\)</span> 的数的个数与是 <span class="math inline">\(1\)</span> 的数的个数都是偶数，</p><p>那么 <code>Bob</code> 完全可以当 <code>Alice</code> 选一个这位是 <code>0</code> 的数时，也选另一个该位为 <code>0</code>的数；选该位为<code>1</code>的数时候也选另一个该位为<code>1</code>的数，从而使这位 <span class="math inline">\(\operatorname{xor}\)</span> 都为<code>0</code>。</p><p>问题变成了两个子问题，相当于在 <code>trie</code> 从节点 <span class="math inline">\(u\)</span> 的问题 ，化归到 <span class="math inline">\(x\)</span> 的两个儿子的独立问题。</p></li><li><p>否则，我们必须选择一个该位为 <span class="math inline">\(0\)</span>,一个该位为 <span class="math inline">\(1\)</span> 的数。然后问题变为上述情况。</p><p>注意如果变成上述情况，该位 <span class="math inline">\(\operatorname{xor}\)</span> 只能为 <span class="math inline">\(0\)</span>，而如果选择一个该位为 <span class="math inline">\(0\)</span>,一个该位为 <span class="math inline">\(1\)</span> 的数，那么此位 <span class="math inline">\(\operatorname{xor}\)</span> 就是 <span class="math inline">\(1\)</span>，由于是最高位，显然 <span class="math inline">\(1\)</span> 更优。</p><p>这时，问题转化为要在两个集合 <span class="math inline">\(S_1,S_2\)</span> 中选 <span class="math inline">\(x\in S_1\)</span>,使得 <span class="math inline">\(\min_{y\in S_2}{x\operatorname{xor}y}\)</span> 最大。</p><p>我们可以一个一个插入trie中，在另一个集合一个一个查询 <span class="math inline">\(\min\)</span> 然后再取<span class="math inline">\(\max\)</span>。</p></li></ol><p>注意我们分治是保证了 <span class="math inline">\(\sum size=n\)</span> 一定。</p><p>然后情况2，的复杂度是 <span class="math inline">\(\mathcal{O(size\times T)}\)</span>。</p><p>所以均摊下来是 <span class="math inline">\(\mathcal{O(nT)}\)</span></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>局部最小值</title>
    <link href="/2021/06/03/cqoi2012-partial-minimum/"/>
    <url>/2021/06/03/cqoi2012-partial-minimum/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3160">Link</a></p><p>有意思的 <span class="math inline">\(dp\)</span>。</p><span id="more"></span><hr /><p>首先不难想到把 <span class="math inline">\(X\)</span> 与周围建出偏序关系的 <span class="math inline">\(dag\)</span>，转化出来的问题大概是问你这个 <span class="math inline">\(dag\)</span> 有多少种拓扑序。</p><p>但是你会发现，你给定 <span class="math inline">\(dag\)</span> 的拓扑序有可能 “夹带私货”。</p><p>就是体现不出来 . 与周围的关系，可能存在某个 . 在你给定的拓扑序中其实是 <span class="math inline">\(X\)</span>。</p><p>这个很好办，容斥即可。</p><hr /><p>那么你怎么算给定的 <span class="math inline">\(dag\)</span> 的拓扑序呢？</p><p>发现这个 <span class="math inline">\(dag\)</span> 只有两层，一层入度为 0，而这层入度为 0的就是那些 <span class="math inline">\(X\)</span> ，考虑合法情况 <span class="math inline">\(X\)</span> 最多有 8个。</p><p>不妨设 <span class="math inline">\(num\)</span> 为 <span class="math inline">\(X\)</span> 的个数，现在问题似乎变成了：把剩下的 <span class="math inline">\(nm-num\)</span> 个点（出度为0）<strong>合法地</strong>插入这 <span class="math inline">\(num\)</span> 数”前后左右“。</p><p>设剩下的点其中一个为 <span class="math inline">\(x\)</span>。</p><p><span class="math inline">\(x\)</span> 要是想插入，那么所有 <span class="math inline">\((u,v)\)</span> 的 <span class="math inline">\(u\)</span> 必须已经被插入。</p><p><span class="math inline">\(num\leq 8\)</span>,<span class="math inline">\(num\)</span> 很小，我们就状压 <span class="math inline">\(num\)</span> 。</p><p>设 <span class="math inline">\(f_{s,x}\)</span> 表示,当前那 <span class="math inline">\(num\)</span> 个数的状态为 <span class="math inline">\(s\)</span>，剩下有 <span class="math inline">\(x\)</span> 个自由的，出度为0的，可以插入的点。</p><p>注意以下 <span class="math inline">\(dp\)</span> 方程默认从 <span class="math inline">\(f_{s,x}\)</span> 转移出去。</p><p><span class="math display">\[\large f_{s,u}\leftarrow f_{s,u}+\binom{x}{u}(x-u)! f_{s,x} (u\leq x)\]</span></p><p><span class="math display">\[\large f_{s|point(j),x+add}\leftarrow f_{s|point(j),x+add}+f_{s,x}\ (point(j)\not \subset s)\]</span></p><p>第一个表示，从剩下 <span class="math inline">\(x\)</span> 个自由的点中选 <span class="math inline">\(x-u\)</span> 个，然后把这 <span class="math inline">\(x-u\)</span> 个全排列插入序列尾。</p><p>第二个表示，选一个没选过的 <span class="math inline">\(point(j)\)</span> ,然后能新选 <span class="math inline">\(add\)</span> 个自由点，这个 <span class="math inline">\(add\)</span> 可以转移时计算。</p><hr /><p><span class="math inline">\(dp\)</span> 想怎么写就可以怎么写了，根据你状压的写法。</p><p>剩下的就只有一个 <span class="math inline">\(dfs\)</span> 枚举选的 <span class="math inline">\(X\)</span> 的点，然后容斥算一下即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,vd;<br><span class="hljs-keyword">char</span> c[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-keyword">bool</span> vs[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt;r;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">6</span>][<span class="hljs-number">9</span>];<br><span class="hljs-keyword">int</span> dx[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> dy[]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">8</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(v[dx[i]+x][dy[i]+y]==<span class="hljs-number">0</span>&amp;&amp;c[dx[i]+x][dy[i]+y]) vd--;<br>        v[dx[i]+x][dy[i]+y]++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cls</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">8</span>;i++)&#123;<br>        v[dx[i]+x][dy[i]+y]--;<br>        <span class="hljs-keyword">if</span>(v[dx[i]+x][dy[i]+y]==<span class="hljs-number">0</span>&amp;&amp;c[dx[i]+x][dy[i]+y]) vd++;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-comment">////////////////////////////////////// dp begin</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; b[<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getnum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(x)&#123;<br>        x-=(x)&amp;(-x);<br>        res++;<br>    &#125;<span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">260</span>][<span class="hljs-number">30</span>];<span class="hljs-keyword">int</span> p[<span class="hljs-number">6</span>][<span class="hljs-number">9</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">12345678</span>;<span class="hljs-keyword">int</span> f[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> comb[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<span class="hljs-built_in">memset</span>(p,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(p));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;r.size();i++)&#123;<br>        <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; x=r[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">8</span>;k++)&#123;<br>            p[x.first+dx[k]][x.second+dy[k]]|=(<span class="hljs-number">1</span>&lt;&lt;i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> av=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) <span class="hljs-keyword">if</span>(v[i][j]==<span class="hljs-number">0</span>) av++;<br>    dp[<span class="hljs-number">0</span>][av]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=r.size();i++) b[i].clear();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=(<span class="hljs-number">1</span>&lt;&lt;r.size())<span class="hljs-number">-1</span>;i++)&#123;<br>        b[getnum(i)].push_back(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=r.size();i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> s:b[i])&#123;<span class="hljs-comment">//status</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=n*m-r.size();j++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;j;k++)&#123;<br>                    dp[s][k]+=<span class="hljs-number">1ll</span>*dp[s][j]*f[j-k]%mod*comb[j][k]%mod;<br>                    dp[s][k]%=mod;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;r.size();j++)&#123;<span class="hljs-comment">//choose s | 1&lt;&lt;j</span><br>                <span class="hljs-keyword">if</span>(((<span class="hljs-number">1</span>&lt;&lt;j)&amp;s)==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">int</span> ts=(<span class="hljs-number">1</span>&lt;&lt;j)|s;<br>                    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">8</span>;k++)&#123;<br>                        <span class="hljs-keyword">int</span> tx=r[j].first+dx[k],ty=r[j].second+dy[k];<br>                        <span class="hljs-keyword">if</span>((p[tx][ty]|ts)==ts&amp;&amp;c[tx][ty]) res++;<br>                    &#125;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;=n*m-r.size();k++)&#123;<br>                        dp[ts][k+res]+=dp[s][k];dp[ts][k+res]%=mod;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[(<span class="hljs-number">1</span>&lt;&lt;(r.size()))<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-comment">//////////////////////////////////////////dp end</span><br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> X,<span class="hljs-keyword">int</span> nx,<span class="hljs-keyword">int</span> ny)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> res=solve();<br>    <span class="hljs-keyword">if</span>((r.size()-num)&amp;<span class="hljs-number">1</span>) ans-=res;<br>    <span class="hljs-keyword">else</span> ans+=res;ans%=mod;<br>    <span class="hljs-keyword">if</span>(vd==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=nx;i&lt;=nx;i++)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=ny;j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(v[i][j]) <span class="hljs-keyword">continue</span>;<br>        paint(i,j);<br>        r.push_back(<span class="hljs-built_in">make_pair</span>(i,j));<br>        dfs(X+<span class="hljs-number">1</span>,i,j);<br>        cls(i,j),r.pop_back();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=nx+<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(v[i][j]) <span class="hljs-keyword">continue</span>;<br>        paint(i,j);<br>        r.push_back(<span class="hljs-built_in">make_pair</span>(i,j));<br>        dfs(X+<span class="hljs-number">1</span>,i,j);cls(i,j);r.pop_back();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*m;i++) f[i]=<span class="hljs-number">1ll</span>*f[i<span class="hljs-number">-1</span>]*i%mod;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n*m;i++) comb[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>            comb[i][j]=(comb[i<span class="hljs-number">-1</span>][j]+comb[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]);<br>            comb[i][j]%=mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;(c[i]+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(c[i][j]==<span class="hljs-string">&#x27;X&#x27;</span>)&#123;<br>                paint(i,j);r.push_back(<span class="hljs-built_in">make_pair</span>(i,j)),num++;<br>            &#125;<br>        &#125;<br>    &#125;vd=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) <span class="hljs-keyword">if</span>(v[i][j]==<span class="hljs-number">0</span>) vd++;<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;(ans+mod)%mod;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>可能是我写的比较渣，感觉还是大概能看明白的吧。</p>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>noip2018 day1 t1</title>
    <link href="/2021/06/01/commemorate-that-fool/"/>
    <url>/2021/06/01/commemorate-that-fool/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5019">Link</a></p><div class="note note-primary">            <p>Old Memory</p>          </div><span id="more"></span><p>回首望去，他还是不忍直视当年那个抱着最美丽的幻想的，执意穿行金黄树林的小胖子。</p><p>他想骂他，在那个简单的时光中想着面子，幻想着不切实际的梦想这如今他都认为不简单的东西。</p><p>他想骂他，为什么不努力，为什么不脚踏实地。</p><p>但是他也是他，而他也将会成为他，老天用时间，信息不对等给他们两个开了一个玩笑。</p><p>他现在能做的只有继续吟啸，徐行，以此纪念这当年那个傻瓜，纪念他的梦想。</p><hr /><p>考场时，他在一个手就能数过来的我掌握的知识点中反复寻觅，同时根据学长讲的，但自己并未写过的知识点——分治，写了一个他认为很NB的分治。</p><p>当时的他只是过了样例，自己都不相信写的是正解。</p><p>在吉大外面的饭店中和同学徘徊，老师说过，要是学长们不努力，noip的分数就还是得在200左右徘徊，而他呢，这次似乎连一道题都不能确定AC。</p><p>老师来了，给他分享了t1的贪心，他当时脑子一震，当然，他还是对自己的分治抱有幻想。</p><p>而此刻，幻想彻底破灭，老师讲完，他没懂为什么分治不对，老师问懂没懂的时候也知识敷衍这点头。</p><p>day1,day2都结束了，发成绩了。</p><p>他只有 55 points 。25+0+0+0+30+0</p><p>有分的两题，分别是这道题，和填数游戏，他凭借着小学奥数瞎猜结论+手玩，以为能骗到50。。</p><p>此后他也放弃了这个题，他认为就算分治是个正确的算法，而自己一次也没有打过，甚至把学长教的二分当成分治，哈哈，算了吧。</p><p>此后的一年，两年这个想法一直没有挥散，结束了？noip2018结束了。</p><hr /><div class="note note-secondary">            <p>Present</p>          </div><p>2021.5.2</p><p>距离中考57days，他现在是初三。</p><p>"快快快，快tm给我测呀，别一直running on test 1，靠Wa on test 6了"。</p><p>又是一场4切的SB div2。</p><ul><li><p>“为什么题解长得都一样？”（有的是差不多）</p></li><li><p>“为什么题解的代码也都长一样？”</p></li><li><p>“妈的，原来是个转载的，转载有个屁用。”</p></li><li><p>“妈的，都是借鉴一个人的思路。”</p></li></ul><p>他才意识到，原来 "Wa on test 6" 是因为他少判断了一种情况，甚至他将这个特判的代码全部删掉也能对。</p><p>“这不就是个怪缝合题？”</p><p>他才想起来，这个似乎就是 noip day1 t1的一个增强版（缝合版）。</p><p>这道题题解给的是什么？我写的是什么？是tm的分治！！！！！！！！！！！！！！</p><p>这两年，他变了很多，他会了很多，也不甘于只听别人的解法。</p><p>他重新想了以下，发现 noip day1 t1 也是可以类似做的。</p><p>他考场上写的是正解。</p><p>他应该早早就有能力发现这点。</p><p>他应该早早的想一想，改一改题，而不是听别人分享他们自己的贪心，人类智慧。</p><p>他不应该只有55 points 。</p><hr /><div class="note note-success">            <p>Solution</p>          </div><p>这个题可以分治。</p><p>我们发现这个区间越长，就一定比短的优。</p><p>就最初的那段区间来说，我们最多有 <span class="math inline">\(Min_{i=1}^{r}d_i\)</span> 次覆盖整个区间的方法。</p><p>接下来会产生一个 0，而如果把 0 当作分割符，我们的区间被分成两个区间。</p><p>而不管我们减了多少，这个一段区间内的大小关系是不会变的，我们只需要找出每个区间原先的 <span class="math inline">\(Min(d)\)</span> 即可。</p><p>这个直接 <span class="math inline">\(st\)</span> 表做 。</p><p>考虑复杂度，我们每找一次 <span class="math inline">\(Min(d)\)</span> 我们就会删除一个数（变为0)，我们顶多会删除 <span class="math inline">\(n\)</span> 次。</p><p>所以复杂度为 <span class="math inline">\(\mathcal O(n\times findmin)\)</span> ，由于是 <span class="math inline">\(st\)</span> 表，<span class="math inline">\(\mathcal O(n\log n+n)\)</span>。</p><hr /><p>我现在其实特别想找出那个 <code>JL-Senior.zip</code>（也不知道是不是这个名字，反正CSP是这个名字）存着选手代码的<code>zip</code> 。</p><p>我想找出自己当年怎么写的，看能不能帮自己改一改代码，</p><p>有点懊悔自己当时得过且过，有点惋惜自己没好好学习，但这都是苍白的，因为时间已经流逝。</p><p>既然选择这般独木桥，这条人迹罕至的小路，就不能懊悔年少的无知，年少的轻狂。</p><p>做下去永远比说下去难得多。</p><p>以此，纪念那个13岁的傻瓜。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分治</tag>
      
      <tag>回忆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>anticube</title>
    <link href="/2021/05/15/agc003d/"/>
    <url>/2021/05/15/agc003d/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://atcoder.jp/contests/agc003/tasks/agc003_d">Link</a></p><p>给你 <span class="math inline">\(n\)</span> 个数，让你在这些数中间选出尽可能多的数使得，对于任意两个选出来的数，乘积不是完全立方数。</p><h3 id="题解">题解</h3><p>我们可以发现，如果 <span class="math inline">\(a\times b\)</span> 为完全立方数，那么分解质因数。</p><p><span class="math inline">\(a=\prod p_i^{a_i}\)</span>,<span class="math inline">\(b=\prod p_i^{b_i}\)</span>。那么应该有 <span class="math inline">\(\forall i,(a_i+b_i)\bmod{3}=0\)</span>。</p><p>我们把每个数的立方因子都消掉。</p><p><span class="math inline">\(A=\prod p_i^{a_i\bmod 3}\)</span>。</p><p>所以我们只需要找出对应 <span class="math inline">\(A_i+B_i=3\)</span> 的这样一组的 <span class="math inline">\(A,B\)</span> 看那一组数多( <span class="math inline">\(A,B\)</span> 指的是消去立方因子后的)。</p><p>这样的任意一个 <span class="math inline">\(A\)</span> 对会一一对应一个使得 <span class="math inline">\(A\times B=k^3\)</span> 的 <span class="math inline">\(B\)</span>。</p><p>我们只需要贪心的选择个数多的那个数即可。</p><hr /><p>如何快速分解质因数？</p><p>首先第一步消去立方因子的过程我们只需要枚举到 <span class="math inline">\(\sqrt[3]{n}\)</span> 的质数就行了，大于 <span class="math inline">\(\sqrt[3]{n}\)</span> 的数不可能是。</p><p>第二步对一个 <span class="math inline">\(A\)</span> 找 <span class="math inline">\(B\)</span> 的过程类似，首先暴力的找 <span class="math inline">\(\sqrt[3]{lim}\)</span> 以下范围的（注意这个是 <span class="math inline">\(lim\)</span> ，而不是你具体分解的 <span class="math inline">\(n\)</span>）。</p><p>剩下的形式若不是<span class="math inline">\(1\)</span> 只可能为 <span class="math inline">\(p,pq,p^2(p,q\in prime)\)</span> 三种形式（想一下二次二项式可能性只有这仨）</p><p>只用判断一下剩下的是不是完全平方数即可。</p><h3 id="复杂度分析">复杂度分析</h3><p>除去平方因子+用 <span class="math inline">\(map\)</span> 枚举 <span class="math inline">\(A\)</span> 找 <span class="math inline">\(B\)</span>。</p><p><span class="math inline">\(\mathcal{O(n\frac{\sqrt[3]{Max}}{\ln \sqrt[3]{Max}}+n\frac{\sqrt[3]{Max}}{\ln \sqrt[3]{Max}}+n\log n)}\)</span></p><p>参考代码</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">3000</span>;<br><span class="hljs-keyword">int</span> p[N],pr[N],tot,pw[N];<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; cnt;<br><span class="hljs-comment">////////////////////////// 文化课期间重写的，看起来丑很正常</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span><span class="hljs-comment">// 消去平方因子</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-keyword">int</span> X=x,tx=x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot&amp;&amp;pw[i]&lt;=x;i++)<br>        <span class="hljs-keyword">if</span>(x%p[i]==<span class="hljs-number">0</span>) <span class="hljs-keyword">while</span>(x%pw[i]==<span class="hljs-number">0</span>) x/=pw[i];<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e10</span>+<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sqt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span><span class="hljs-comment">// 判断是否为完全平方数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v=round(<span class="hljs-built_in">sqrt</span>(x));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=v<span class="hljs-number">-2</span>;i&lt;=v+<span class="hljs-number">2</span>;i++) <span class="hljs-keyword">if</span>(i*i==x) <span class="hljs-keyword">return</span> i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span><span class="hljs-comment">//A 找 B</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-keyword">int</span> X=x,tx=x,res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot&amp;&amp;p[i]*p[i]&lt;=x;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x%p[i]==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(x%p[i]==<span class="hljs-number">0</span>) x/=p[i],num++;<br>            <span class="hljs-keyword">if</span>(num==<span class="hljs-number">1</span>) res=res*p[i]*p[i];<br>            <span class="hljs-keyword">else</span> res=res*p[i];<br>            <span class="hljs-keyword">if</span>(res&gt;=inf) <span class="hljs-keyword">return</span> inf;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x*x&lt;=tx)res=res*x*x;<br>    <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// 这里大概就是判断炸没炸 1e10</span><br>        <span class="hljs-keyword">int</span> s=sqt(x);<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-number">-1</span>)<br>        &#123;<br>            res=res*x; <span class="hljs-keyword">if</span>(res&gt;=inf) <span class="hljs-keyword">return</span> inf;<br>            res=res*x; <span class="hljs-keyword">if</span>(res&gt;=inf) <span class="hljs-keyword">return</span> inf;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        res=res*s;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">int</span> n,a[<span class="hljs-number">300000</span>];<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    pr[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">2000</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pr[i]==<span class="hljs-number">0</span>) p[++tot]=i,pw[tot]=i*i*i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=tot&amp;&amp;p[j]*i&lt;=<span class="hljs-number">2000</span>;j++)<br>        &#123;<br>            pr[i*p[j]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) read(a[i]),a[i]=div(a[i]),cnt[a[i]]++;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;::iterator i=cnt.begin();i!=cnt.end();i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>((i-&gt;first)==<span class="hljs-number">1</span>)<br>        &#123;<br>            ans++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> rev=rebuild(i-&gt;first);<br>        <span class="hljs-keyword">if</span>(rev==inf) &#123;ans+=i-&gt;second;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span>(cnt.find(rev)==cnt.end()) &#123;ans+=i-&gt;second;<span class="hljs-keyword">continue</span>;&#125;<br>        ans+=max(i-&gt;second,cnt[rev]);<span class="hljs-comment">// 选多的那个</span><br>        cnt[rev]=<span class="hljs-number">0</span>,cnt[i-&gt;first]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分解质因数</tag>
      
      <tag>idea题</tag>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1519E</title>
    <link href="/2021/04/15/cf1519E/"/>
    <url>/2021/04/15/cf1519E/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1519/problem/E">Link</a></p><span id="more"></span><p>给你 <span class="math inline">\(n\)</span> 个点,<span class="math inline">\(1\leq x,y\leq10^9\)</span> 。</p><p>记 <span class="math inline">\((x&#39;,y&#39;)\)</span> 表示为 <span class="math inline">\((x+1,y)\)</span> 或者 <span class="math inline">\((x,y+1)\)</span></p><p>定义一对点合法 <span class="math inline">\((x_1,y_1),(x_2,y_2)\)</span> 当且仅当存在 <span class="math inline">\((x_1&#39;,y_1&#39;),(x_2&#39;,y_2&#39;)\)</span> 使得<span class="math inline">\((x_1&#39;,y_1&#39;),(x_2&#39;,y_2&#39;),(0,0)\)</span> 共线。</p><p>问最多能选出多少对点，注意：一个点最多只能被选择一次。</p><h3 id="题解">题解</h3><p>很显然如果 <span class="math inline">\((x_1,y_1),(x_2,y_2)\)</span> 与 <span class="math inline">\((0,0)\)</span> 贡献，当且仅当这两个点斜率相同，即 <span class="math inline">\(\frac{y_1}{x_1}=\frac{y_2}{x_2}\)</span>。</p><p>而这个 <span class="math inline">\(\frac{x_1}{y_1}\)</span> 相当于 这个点的属性值。</p><p>那么问题转换为给你 <span class="math inline">\(n\)</span> 个点，每个点有两种可能的属性值。</p><p>让你每次选出两个存在相同属性的点，问最多选多少个。</p><hr /><p>我最初的想法是想把 这个平面上的 <span class="math inline">\((x,y)\)</span> 看成点，而选择一对 <span class="math inline">\((x,y)\)</span> 看成一个类似匹配的东西。</p><p>但是 1.5h 我也没什么有价值的idea。（如果能类似这么做还请大佬不吝赐教）</p><hr /><p>正解是这样的，我们把 斜率看成点，而把这个 <span class="math inline">\((x,y)\)</span> 看成连接两个可能的斜率的边。</p><p>我们发现，两个移动后可能共线的 <span class="math inline">\((x,y)\)</span> 必定是图中连接3个点的两条边，也就是至少有一个公共点的两条边。</p><p>现在做法应该比较明晰了。</p><p>注意我们的匹配不是针对点的，而是针对边的。</p><p>具体做法是建出 <span class="math inline">\(dfs\)</span> 树，我们把结点连向儿子的边匹配，如果剩下一条边的话 即 <span class="math inline">\(sz_x\bmod 2=1\)</span>。我们就将剩下这条与 <span class="math inline">\((x\rightarrow son_x)\)</span> 这条边匹配，并且在 <span class="math inline">\(fa_x\)</span> 的匹配时不计算这条边。</p><p>容易发现这样匹配一定是最优的。</p><p><span class="math inline">\(why?\)</span> 考虑如果没有全部匹配，一定是只剩下 <span class="math inline">\(root\rightarrow son_r\)</span> 这一条边。那么发现总边数也一定是奇数，不存在全部匹配的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">10000</span>;<br><span class="hljs-keyword">int</span> a[N],b[N],c[N],d[N];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">frac</span>&#123;</span><span class="hljs-keyword">int</span> a,b;&#125;;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (frac a,frac b)&#123;<br>    <span class="hljs-keyword">if</span>(a.a==b.a) <span class="hljs-keyword">return</span> a.b&lt;b.b;<br>    <span class="hljs-keyword">return</span> a.a&lt;b.a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br><span class="hljs-keyword">inline</span> frac <span class="hljs-keyword">operator</span> / (frac a,frac b)&#123;<br>    frac c;<br>    c.a=a.a*b.b;<br>    c.b=a.b*b.a;<br>    <span class="hljs-keyword">int</span> g=gcd(c.a,c.b);<br>    c.a/=g,c.b/=g;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-built_in">map</span>&lt;frac,<span class="hljs-keyword">int</span>&gt; mp;<br><br>frac x,y,f[N][<span class="hljs-number">5</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><span class="hljs-keyword">int</span> x,v;&#125;;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(node a,node b)&#123;<br>    <span class="hljs-keyword">if</span>(a.v==b.v) <span class="hljs-keyword">return</span> a.x&lt;b.x;<br>    <span class="hljs-keyword">return</span> a.v&lt;b.v;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt; ans,v[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> tot;<span class="hljs-keyword">bool</span> vis[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> dep[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> fa,<span class="hljs-keyword">int</span> faid)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[x]=dep[fa]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first,w=v[x][i].second;<br>        <span class="hljs-keyword">if</span>(dep[y]==<span class="hljs-number">0</span>) dfs(y,x,w);<br>    &#125;<br>    <span class="hljs-keyword">int</span> pre=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first,w=v[x][i].second;<br>        <span class="hljs-keyword">if</span>(dep[y]&gt;dep[x])&#123;<br>            <span class="hljs-keyword">if</span>(vis[w]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(pre==<span class="hljs-number">0</span>) pre=w;<br>            <span class="hljs-keyword">else</span>&#123;<br>                vis[pre]=vis[w]=<span class="hljs-number">1</span>;<br>                ans.push_back(<span class="hljs-built_in">make_pair</span>(pre,w));<br>                pre=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pre&amp;&amp;faid)&#123;<br>        vis[pre]=vis[faid]=<span class="hljs-number">1</span>;<br>        ans.push_back(<span class="hljs-built_in">make_pair</span>(pre,faid));<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> id=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i]&gt;&gt;d[i];<br>        x=frac&#123;a[i]+b[i],b[i]&#125;;<br>        y=frac&#123;c[i],d[i]&#125;;<br>        f[i][<span class="hljs-number">1</span>]=x/y;<br>        x=frac&#123;a[i],b[i]&#125;;<br>        y=frac&#123;c[i]+d[i],d[i]&#125;;<br>        f[i][<span class="hljs-number">2</span>]=x/y;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">2</span>;++k)&#123;<br>            <span class="hljs-keyword">if</span>(mp[f[i][k]]==<span class="hljs-number">0</span>) &#123;tot++,mp[f[i][k]]=tot;<span class="hljs-keyword">continue</span>;&#125;<br>        &#125;<br>        v[mp[f[i][<span class="hljs-number">1</span>]]].push_back(<span class="hljs-built_in">make_pair</span>(mp[f[i][<span class="hljs-number">2</span>]],i));<br>        v[mp[f[i][<span class="hljs-number">2</span>]]].push_back(<span class="hljs-built_in">make_pair</span>(mp[f[i][<span class="hljs-number">1</span>]],i));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++) <span class="hljs-keyword">if</span>(dep[i]==<span class="hljs-number">0</span>) dfs(i,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans.size()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:ans)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;x.first&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;x.second&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小idea</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>noi2016循环之美</title>
    <link href="/2021/03/28/beauty-of-cycle/"/>
    <url>/2021/03/28/beauty-of-cycle/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1587">循环之美</a></p><span id="more"></span><h3 id="step1">step1</h3><p>首先根据小学知识，如果 <span class="math inline">\(k=10\)</span> ,那么如果分数 <span class="math inline">\(\frac{a}{b},(a,b)=1\)</span> 想要纯循环，必须满足 <span class="math inline">\(2\not\mid b,5\not\mid b\)</span>。</p><p>可以猜测如果 <span class="math inline">\(k\not =10\)</span> 时，<span class="math inline">\(\frac{a}{b}\)</span> 纯循环 <span class="math inline">\(\Leftrightarrow\)</span> <span class="math inline">\((b,k)=1\)</span>。</p><p>那么如何证明呢?</p><p>只要余数出现循环代表商出现循环。</p><p>考虑余数形式一定是 <span class="math inline">\(a,ak\bmod b,ak^2\bmod b,ak^3\bmod b,\cdots\)</span>。</p><p>如果有 <span class="math inline">\(ak^i\equiv ak^j\pmod{b}\)</span>,由于 <span class="math inline">\((a,b)=1\)</span>,所以 <span class="math inline">\(a\)</span> 存在逆元，所以 <span class="math inline">\(k^i\equiv k^j\pmod{b}\)</span>。</p><p>当 <span class="math inline">\((k,b)=1\)</span>,<span class="math inline">\(k\)</span> 存在逆元，显然有 <span class="math inline">\(1\equiv k^{j-i}\pmod{b}\)</span>，是纯循环。</p><p><span class="math inline">\(\frac{k^{i}}{g^t}\equiv\frac{k^j}{g^t}\pmod{\frac{b}{g^t}}\)</span>,由于一次可能除不尽，所以 <span class="math inline">\(i\)</span> 为最小的使 <span class="math inline">\((\frac{k^i}{g^t},\frac{b}{g^t})=1\)</span> 的 <span class="math inline">\(i\)</span>, <span class="math inline">\(g=\gcd(k,b)\)</span>。</p><p>那么 原始化为 <span class="math inline">\(\frac{k^{i}}{g^t}\equiv\frac{k^i}{g^t}k^{j-i}\pmod{\frac{b}{g^t}}\)</span>,<span class="math inline">\(k^{j-i}\equiv 1\pmod{\frac{b}{g^t}}\)</span>，这个的循环节显然会比 <span class="math inline">\(k^{j-i}\equiv1\pmod{b}\)</span> 要小，所以不是纯循环。</p><h3 id="step2">step2</h3><p>问题分析的很清楚了。</p><p>有拆第一个 <span class="math inline">\(gcd=1\)</span> 的；有拆第二个 <span class="math inline">\(gcd=1\)</span> 的，而我选择都拆。。。 <span class="math display">\[\begin{aligned}&amp;\sum_{i=1}^m\sum_{j=1}^n[(i,k)=1][(i,j)=1]\\&amp;\sum_{i=1}^m[(i,k)]=1\sum_{j=1}^n\sum_{d\mid i,d\mid j}\mu(d)\\&amp;\sum_{d=1}^n\mu(d)\sum_{d|i}^m[(i,k)]=1\sum_{j=1,d|j}^n1\\&amp;\sum_{d=1}^n\mu(d)\sum_{d|i}^m\ \ \sum_{t|i,t|k}\mu(t)\lfloor\frac{n}{d}\rfloor\\&amp;\sum_{t|k}\mu(t)\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\sum_{d|i,t|i}^m1\\&amp;\sum_{t|k}\mu(t)\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\frac{m}{lcm(d,t)},\frac{m}{lcm(d,t)}=\frac{m(d,t)}{d\cdot t}\\&amp;\sum_{t|k}\mu(t)\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\lfloor\frac{m(d,t)}{dt}\rfloor\\&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\lfloor\frac{mg}{dt}\rfloor[(d,t)=g]\\&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{d=1}^{n/g}\lfloor\frac{n}{dg}\rfloor\mu(dg)\lfloor\frac{m}{dt}\rfloor[(d,t)=1]\\&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{h|t}\mu(h)\sum_{d=1}^{n/gh}\lfloor\frac{n}{dgh}\rfloor\mu(dgh)\lfloor\frac{m}{dth}\rfloor\\\end{aligned}\]</span> 冷静一下。</p><hr />$$<span class="math display">\[\begin{aligned}&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{h|t}\mu(h)\sum_{d=1}^{n/gh}\mu(dgh)\lfloor\frac{\frac{n}{gh}}{d}\rfloor\lfloor\frac{\frac{m}{th}}{d}\rfloor\\\end{aligned}\]</span><p>$$</p><p>整除分块的形式一目了然。</p><p>问题转化为求解 <span class="math inline">\(\sum_{i=1}^{n}\mu(Ti)\)</span>。 <span class="math display">\[\begin{aligned}g(n,T)=&amp;\sum_{i=1}^{n}\mu(Ti)\\=&amp;\sum_{i=1}^{n}\mu(T)\mu(i)[(T,i)=1]\\=&amp;\mu(T)\sum_{i=1}^{n}\mu(i)\sum_{f|i,f|T}\mu(f)\\=&amp;\mu(T)\sum_{f|T}\mu(f)\sum_{i=1}^{n/f}\mu(if)=\mu(T)\sum_{f|T}\mu(f)g(n/f,f)\\\end{aligned}\]</span> 这个直接记忆化。</p><p>然后做完了。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>筛法</tag>
      
      <tag>整除分块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>loj509</title>
    <link href="/2021/03/10/loj509/"/>
    <url>/2021/03/10/loj509/</url>
    
    <content type="html"><![CDATA[<h3 id="step1">step1</h3><p>首先显然有 <span class="math inline">\(|KX|=\sqrt{a},|YL|=\sqrt{b}\)</span>。</p><p>所以延长 <span class="math inline">\(KX,YL\)</span> ,不难发现：<span class="math inline">\(|KL|=\sqrt{(\sqrt{a}+\sqrt{b})^2+1^2}\)</span>。</p><p><span class="math inline">\(S=|KL|^2=(\sqrt{a}+\sqrt{b})^2+1=a+b+1+2\sqrt{ab}\)</span>。</p><p>问题转化：求 <span class="math inline">\(\sum_{i=1}^n\sum_{j=1}^m[i\times j\in 完全平方数]\)</span>。</p><hr /><h3 id="step2">step2</h3><p>以下说的 <span class="math inline">\(i,j\)</span> 都是满足 <span class="math inline">\(i\times j\)</span> 是完全平方数的 <span class="math inline">\(i,j\)</span>。</p><p>所以，我们发现，如果 <span class="math inline">\(p|i,p|j，\ \ p\in prime\)</span> 那么 <span class="math inline">\(i,j\)</span> 的 <span class="math inline">\(p\)</span> 因子的奇偶性相同。</p><p>思路大概明晰了，我们尝试提取 <span class="math inline">\(i,j\)</span> 的平方因子。</p><p><span class="math inline">\(i=a\times x,j=b\times y\)</span>。</p><p><span class="math inline">\(a,b\)</span> 均是完全平方数。</p><p>那么 <span class="math inline">\(x\times y\)</span> 也为完全平方数。</p><p><span class="math inline">\(x,y\)</span> 剩余了啥？ <span class="math inline">\(x,y\)</span> 的任意 <span class="math inline">\(p_i\)</span> 因子就行都相同，此时还只可能为 <span class="math inline">\(0\ or \ 1\)</span>。</p><p>发现 <span class="math inline">\(x=y\)</span>。</p><hr /><h3 id="step3">step3</h3><p>枚举 <span class="math inline">\(x\)</span> 。</p><p>原式可写为 ： <span class="math display">\[\begin{aligned}\sum_{x=1}^{n}[\sqrt{x}\not\in\mathbb{Z}]\sum_{a=1}^{n/x}[\sqrt{a}\in \mathbb{Z}]\sum_{b=1}^{m/x}[\sqrt{b}\in\mathbb{Z}]\\\sum_{x=1}^{n}[\sqrt{x}\not\in\mathbb{Z}]\lfloor\sqrt{\lfloor\frac{n}{x}\rfloor}\rfloor\lfloor\sqrt{\lfloor\frac{m}{x}\rfloor}\rfloor\\\sum_{x=1}^{n}\mu(x)^2 \lfloor\sqrt{\lfloor\frac{n}{x}\rfloor}\rfloor\lfloor\sqrt{\lfloor\frac{m}{x}\rfloor}\rfloor\end{aligned}\]</span> 是不是可以 <span class="math inline">\(\mathcal{O(n)}\)</span> 求了呢？一个大大的 <span class="math inline">\(n\leq 1.5\times 10^{16}\)</span> 打在你脸上。</p><hr /><h3 id="step4">step4</h3><p>发现显然可以整除分块，但是复杂度不是很优，还要求 <span class="math inline">\(\sum\mu(i)^2\)</span> 。</p><h4 id="如何求-summui2">如何求 <span class="math inline">\(\sum\mu(i)^2\)</span></h4><p>考虑 <span class="math inline">\(\mu\)</span> 本质是在对于因数个数容斥。</p><p>正难则反。我们考虑容斥，我们先 naive 地求出 <span class="math inline">\(\sum_{p}\sum_{i=1}^{n}[p^2|i,\sqrt{i}\in\mathbb{Z}]\)</span>,就是平方因子包括 <span class="math inline">\(p\)</span> 的数的个数。</p><p>形式化地写出： <span class="math inline">\(\sum_{p}\lfloor\frac{n}{p^2}\rfloor\)</span></p><p>但是此时我们算重了，我们算重的是两个质数积的平方的因数，所以类似的有平方因子包含 <span class="math inline">\(p_i\cdot p_j\)</span> 的。</p><p>形式化写出：<span class="math inline">\(\sum _{t=p_i\cdot p_j}\lfloor \frac{n}{t^2}\rfloor\)</span>。</p><p>利用 <span class="math inline">\(\mu\)</span> 对因子的容斥。 <span class="math display">\[\sum_{i=1}^n \mu^2(i)\\=\sum_{i=1}^n\mu(i) \lfloor\frac{n}{i^2}\rfloor\\=\sum_{i=1}^{\lfloor\sqrt{n}\rfloor}\mu(i) \lfloor\frac{n}{i^2}\rfloor\\\]</span> 此部分复杂度为 <span class="math inline">\(\mathcal{O(n^\frac{1}{4})}\)</span>。</p><hr /><p>复杂度为什么对？怎么保证？</p><p>发现<span class="math inline">\(\sqrt{\frac{n}{x}}\)</span> ，当 <span class="math inline">\(1\leq x\leq n^\frac{1}{3}\)</span> 时取值个数只可能为 <span class="math inline">\(n^\frac{1}{3}\)</span>。</p><p>当 <span class="math inline">\(n^{\frac{1}{3}}&lt;x\leq n\)</span> 时，取值范围为 <span class="math inline">\([1,\sqrt{\frac{n}{n^{\frac{1}{3}}}}]=[1,n^{\frac{1}{3}}]\)</span>。</p><p>若用 <span class="math inline">\(t=\sqrt{\frac{n}{x}}\)</span> , 那么 <span class="math inline">\(x=\frac{n}{t^2}\)</span>。</p><p>我们现在用积分算复杂度。</p><p>第一部分： <span class="math display">\[\int_{1}^{n^\frac{1}{3}}{x}^{\frac{1}{4}}dx\\={x^{\frac{5}{4}}}{\Big|}^{n^{\frac{1}{3}}}_0\\=n^{\frac{5}{12}}\]</span> 第二部分： <span class="math display">\[\int_{1}^{n^\frac{1}{3}}({\frac{n}{t^2}})^{\frac{1}{4}}dt\\=n^{\frac{1}{4}}\int_{1}^{n^\frac{1}{3}}x^{-\frac{1}{2}}dt\\={n^{\frac{1}{4}}x^{\frac{1}{2}}}\Big|^{n^{\frac{1}{3}}}_0\\=n^{\frac{1}{4}}\cdot n^{\frac{1}{6}}=n^{\frac{5}{12}}\]</span> 发现这个 <span class="math inline">\(\mathcal{O(n^\frac{5}{12})}\)</span> 常数不是很优。</p><p>可以预处理一部分的 <span class="math inline">\(\sum\mu(x)^2\)</span> 然后降低常数，（或许可以证明能降低复杂度下界）</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>筛法</tag>
      
      <tag>整除分块</tag>
      
      <tag>mu容斥</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf323c</title>
    <link href="/2021/03/06/cf323c/"/>
    <url>/2021/03/06/cf323c/</url>
    
    <content type="html"><![CDATA[<p>比较水的一个题。</p><p>主要是考虑这个排列的性质。</p><p>如果只考虑一次询问，让你把在 <span class="math inline">\(a:[l_1,r_1]\)</span> 里的与 <span class="math inline">\(b:[l_2,r_2]\)</span> 的相同数的个数求出来。</p><p>我们有这样一种思路，把 <span class="math inline">\(a_x\)</span> 一个一个加进去，直到 <span class="math inline">\(x=l_1-1\)</span>。 记录当前状态，然后接着加入，直到 <span class="math inline">\(x=r\)</span> ，记录状态。</p><p>把这两个状态分别求出在 <span class="math inline">\(b:[l_2,r_2]\)</span> 里面有多少个。在相减，便是所求。</p><p>线段树维护即可，设 <span class="math inline">\(p_i\)</span> 表示 <span class="math inline">\(i\)</span> 在 <span class="math inline">\(b\)</span> 中的位置。那么加入 <span class="math inline">\(a_x\)</span> 操作等价于在 <span class="math inline">\(b\)</span> 的 <span class="math inline">\({p_{a_x}}\)</span> 处加 <span class="math inline">\(1\)</span> ，然后区间求和。</p><p>那么多次询问用主席树记录状态即可。</p><p>代码不放了。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>主席树</tag>
      
      <tag>小idea题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zjoi2015 幻想乡战略游戏</title>
    <link href="/2021/03/01/zjoi2015/"/>
    <url>/2021/03/01/zjoi2015/</url>
    
    <content type="html"><![CDATA[<p>这里提供一个复杂度比较对的树剖做法。</p><p>这个题分为两步。</p><p>首先我们要找到那个使得 <span class="math inline">\(\sum\limits_{i=1}dist(u,i)d_i\)</span> 最小的 <span class="math inline">\(u\)</span> 。</p><p>其实这个点是有定义的。</p><p>考虑我们怎么定义重心的（或者说重心的性质）。</p><p>有重心 <span class="math inline">\(u\)</span> 为使得 <span class="math inline">\(\sum\limits_{i=1}dist(u,i)\)</span> 最小的 <span class="math inline">\(u\)</span>。</p><p>那么本题所定义的可以理解成带权重心。</p><p>考虑如何求带权重心。</p><p>首先随便定一个根，把这棵树转化成有根树。其中整个树的权值和为 <span class="math inline">\(all\)</span> ,点 <span class="math inline">\(x\)</span> 的子树权值和为 <span class="math inline">\(sum_x\)</span>。</p><p>那么如果当前在点 <span class="math inline">\(x\)</span> ，如果 <span class="math inline">\(x\)</span> 的某一个儿子 <span class="math inline">\(y\)</span> 更满足使 <span class="math inline">\(\sum dist(y,i)d_i\)</span> 的条件，那么必须满足 <span class="math inline">\((all-sum_y)\cdot w&lt;sum_y\cdot w\)</span> ,也就是 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span> 。</p><p>那么把 <span class="math inline">\(x\)</span> 的重心转到 <span class="math inline">\(y\)</span> 一定更优，由于此时 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span> 所以只可能有一个儿子满足转移条件。</p><p>如果 <span class="math inline">\(x\)</span> 的儿子只存在等于或者不存在 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span>，那么 <span class="math inline">\(x\)</span> 遍为重心。</p><p>所以现在只需要维护子树权值和，找到最深的满足 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span> 的 <span class="math inline">\(y\)</span> 便为所求位置。</p><p>这个可以通过用 <span class="math inline">\(dfs\)</span> 序列建出线段树，在线段树上 找到一个最靠后，满足 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span> 的 <span class="math inline">\(y\)</span>,在线段树上二分即可。</p><p>由于一条链的 <span class="math inline">\(dfs\)</span> 序严格单调增，所以可以二分。</p><p>那么现在要求解答案。(<span class="math inline">\(f_i\)</span> 表示 <span class="math inline">\(u\)</span> 的第 <span class="math inline">\(i\)</span> 级祖先,<span class="math inline">\(sum_j\)</span> 表示以 <span class="math inline">\(j\)</span> 为根的子树权值和。)。 <span class="math display">\[\begin{aligned}\sum_{i} dist(u,i)&amp;=\sum_i dep(u)+dep(i)-2\cdot dep(lca(u,i))\\&amp;=dep(u) \sum_i 1+\sum_i dep(i)+\sum_i dep(lca(u,i))\\\sum_idep(lca(u,i))&amp;=\sum_{j=1}dep_{f_i} (sum_{f_{j}}-sum_{f_{j-1}})\\&amp;=\sum_{j=1}dep_{f_i}\cdot sum_{f_j}-\sum_{j=0}dep_{f_{j+1}}sum_j=\sum_{j=1}(dep_{f_{j}}-{dep_{f_{j+1}}})sum_j\\&amp;=\sum_{j=1} w_jsum_j\end{aligned}\]</span> 怎么维护？</p><p>链剖维护的充要条件是维护的信息可以合并，线段树区间修改的充要条件是可以 <span class="math inline">\(O(1)\)</span> pushdown，同时可以合并。</p><p>设 <span class="math inline">\(v_j=w_jsum_j\)</span> ,我们现在要维护 <span class="math inline">\(v_j\)</span> 的区间和，同时要能对 <span class="math inline">\(sum_j\)</span> 区间修改。</p><p>考虑一段区间怎么快速更新和，显然有 <span class="math inline">\(\sum_{j=l}^{r}w_j(sum_j+v)=\sum_{j=l}^rw_jsum_j+v\cdot sum_{j=l}^rw_j\)</span>。</p><p>发现只需要维护区间的 <span class="math inline">\(w_j\)</span> 的和，便能更新区间的 <span class="math inline">\(v_j\)</span> 的和，而 <span class="math inline">\(w_j\)</span> 的值不变，是 <span class="math inline">\(j\)</span> 的一个属性所以很好维护。</p><p>那么这道题就做完了。时间复杂度 <span class="math inline">\(\mathcal{O(n\log n\log n)}\)</span> 。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt;v[N];<span class="hljs-keyword">int</span> fa[N],w[N];<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> c=getchar();x=<span class="hljs-number">0</span>;<span class="hljs-keyword">bool</span> f=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(c&gt;<span class="hljs-string">&#x27;9&#x27;</span>||c&lt;<span class="hljs-string">&#x27;0&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">1</span>;c=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>) x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+c-<span class="hljs-string">&#x27;0&#x27;</span>,c=getchar();<br>    <span class="hljs-keyword">if</span>(f) x=-x;<br>&#125;<br><span class="hljs-keyword">int</span> sz[N],dfn[N],hson[N],dep[N],dis[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    fa[x]=f;sz[x]=<span class="hljs-number">1</span>;<span class="hljs-keyword">int</span> mx=<span class="hljs-number">0</span>;dep[x]=dep[f]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first,z=v[x][i].second;<br>        <span class="hljs-keyword">if</span>(y==f) <span class="hljs-keyword">continue</span>;dis[y]=dis[x]+z;<br>        w[y]=z;dfs(y,x);sz[x]+=sz[y];<br>        <span class="hljs-keyword">if</span>(sz[y]&gt;mx) mx=sz[y],hson[x]=y;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> top[N],cnt,num[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">redfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> tp)</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[x]=++cnt;num[cnt]=x;top[x]=tp;<br>    <span class="hljs-keyword">if</span>(hson[x]) redfs(hson[x],x,tp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first;<br>        <span class="hljs-keyword">if</span>(y==f||y==hson[x]) <span class="hljs-keyword">continue</span>;<br>        redfs(y,x,y);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seg</span>&#123;</span><br>    <span class="hljs-keyword">int</span> l,r,tag,mx,v,sumv;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[pos].l=l,t[pos].r=r;<br>    <span class="hljs-keyword">if</span>(l==r) <br>    &#123;<br>        t[pos].v=w[num[l]];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    build(pos&lt;&lt;<span class="hljs-number">1</span>,l,mid);build(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    t[pos].v=t[pos&lt;&lt;<span class="hljs-number">1</span>].v+t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[pos].tag==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> tag=t[pos].tag;t[pos].tag=<span class="hljs-number">0</span>;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>].tag+=tag,t[pos&lt;&lt;<span class="hljs-number">1</span>].mx+=tag;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].tag+=tag,t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx+=tag;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>].sumv+=tag*t[pos&lt;&lt;<span class="hljs-number">1</span>].v;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sumv+=tag*t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;=t[pos].l&amp;&amp;t[pos].r&lt;=y)<br>    &#123;<br>        t[pos].sumv+=v*t[pos].v;<br>        t[pos].tag+=v;t[pos].mx+=v;<span class="hljs-keyword">return</span> ;<br>    &#125;<br>    pushdown(pos);<br>    <span class="hljs-keyword">int</span> mid=t[pos].l+t[pos].r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(y&lt;=mid) modify(pos&lt;&lt;<span class="hljs-number">1</span>,x,y,v);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;mid) modify(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y,v);<br>    <span class="hljs-keyword">else</span> modify(pos&lt;&lt;<span class="hljs-number">1</span>,x,y,v),modify(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y,v);<br>    t[pos].mx=max(t[pos&lt;&lt;<span class="hljs-number">1</span>].mx,t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx);<br>    t[pos].sumv=t[pos&lt;&lt;<span class="hljs-number">1</span>].sumv+t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sumv;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[pos].l==t[pos].r) <span class="hljs-keyword">return</span> t[pos].l;<br>    pushdown(pos);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx&gt;v) <span class="hljs-keyword">return</span> query(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,v);<br>    <span class="hljs-keyword">return</span> query(pos&lt;&lt;<span class="hljs-number">1</span>,v);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;=t[pos].l&amp;&amp;t[pos].r&lt;=y) <span class="hljs-keyword">return</span> t[pos].sumv;<br>    pushdown(pos);<br>    <span class="hljs-keyword">int</span> mid=t[pos].l+t[pos].r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(y&lt;=mid) <span class="hljs-keyword">return</span> ask(pos&lt;&lt;<span class="hljs-number">1</span>,x,y);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;mid) <span class="hljs-keyword">return</span> ask(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y);<br>    <span class="hljs-keyword">return</span> ask(pos&lt;&lt;<span class="hljs-number">1</span>,x,y)+ask(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y);<br>&#125;<br><span class="hljs-keyword">int</span> val[N];<br><span class="hljs-keyword">int</span> v1,v2;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;res&quot;,&quot;w&quot;,stdout);</span><br>    read(n),read(q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x,y,z;read(x),read(y);read(z);<br>        v[x].push_back(<span class="hljs-built_in">make_pair</span>(y,z));v[y].push_back(<span class="hljs-built_in">make_pair</span>(x,z));<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);redfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> all=<span class="hljs-number">0</span>;<br>    build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x,y;read(x),read(y);all+=y;val[x]+=y;v1+=y;v2+=y*(dis[x]);<br>        <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)<br>        &#123;<br>            modify(<span class="hljs-number">1</span>,dfn[top[x]],dfn[x],y);<br>            x=fa[top[x]];<br>        &#125;<br>        <span class="hljs-keyword">int</span> pos=num[query(<span class="hljs-number">1</span>,all)],ans=<span class="hljs-number">0</span>;<br>        x=pos;<br>        <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)<br>        &#123;<br>            ans+=ask(<span class="hljs-number">1</span>,dfn[top[x]],dfn[x]);<br>            x=fa[top[x]];<br>        &#125;<br>        ans=v2+dis[pos]*v1<span class="hljs-number">-2</span>*ans;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>重链剖分</tag>
      
      <tag>重心性质</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二项式反演</title>
    <link href="/2021/02/15/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/"/>
    <url>/2021/02/15/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/</url>
    
    <content type="html"><![CDATA[<p>鸽了好久的二项式反演。</p><span id="more"></span><p>反演本质上是给你一个数列 <span class="math inline">\(g\)</span> ，<span class="math inline">\(g_n=\sum\limits_{i=0}^{n}a_{n,i}f_i\)</span> 。</p><p>让你去求 <span class="math inline">\(f\)</span> 。</p><p>发现其实本质上是一个 行向量<span class="math inline">\(g\)</span>，等于另外一个行向量 <span class="math inline">\(f\)</span>，乘上系数矩阵。</p><p>反演的过程相当于求出了系数矩阵的逆矩阵。</p><p>二项式反演想说的是什么呢？ <span class="math display">\[g_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}f_i\Leftrightarrow f_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}g_i\]</span> 证明后说，当你发现这两个式子竟然如此相似的时候，你应该感到十分震惊对不对。</p><p>因为这个系数矩阵的逆矩阵竟然是他自己。 <span class="math display">\[g_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}f_i\Leftrightarrow f_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}g_i\\同时显然有 g_n=\sum\limits_{i=0}^{n}\binom{n}{i}f_i\Leftrightarrow f_n=\sum\limits_{i=0}^{n} (-1)^{n-i}\binom{n}{i}g_i\]</span></p><p>那先考虑证明。</p><ol type="1"><li><p>运用 <span class="math inline">\(EGF\)</span> 的知识，有： <span class="math display">\[\frac{g_n}{n!}=\sum_{i=1}^{n}\frac{1}{(n-1)!}\cdot\frac{f_i}{i!}\]</span> 上式显然是卷积形式，设 <span class="math inline">\(G\)</span> 是 <span class="math inline">\(g_n\)</span> 的生成函数 ，<span class="math inline">\(F\)</span> 是 <span class="math inline">\(f_n\)</span> 的生成函数。 <span class="math display">\[\begin{aligned}G&amp;=e^{x}\times F\\F&amp;=G\times e^{-x}\\[n]e^{-x}&amp;=\frac{(-1)^n}{n!}\\\frac{f_n}{n!}&amp;=\sum\limits_{i=0}^{n}\frac{(-1)^{n-i}}{(n-i)!}\cdot\frac{g_i}{i!}\\f_n&amp;=\sum\limits_{i=0}^{n}(-1)^{n-i}\binom{n}{i}g_i\end{aligned}\]</span></p></li><li><p>直接带入。 <span class="math display">\[\begin{aligned}f_n&amp;=\sum\limits_{i=0}^{n}(-1)^{n-i}\frac{n!}{i!\times (n-i)!}\sum_{j=0}^{i}\frac{i!}{j!\times(i-j)!}f_j\\f_n&amp;=\sum_{j=0}^{n}\frac{n!}{j!}\sum_{i=j}^{n}(-1)^{n-i}\frac{f_j}{(n-i)!(i-j)!}\\f_n&amp;=\sum_{j=0}^{n}\frac{n!}{j!}f_j\sum_{i=0}^{n-j}(-1)^i\frac{1}{i!((n-j)-i)!}\\f_n&amp;=\sum_{j=0}^{n}\binom{n}{j}f_j\sum_{i=0}^{n-j}(-1)^i\binom{n-j}{i}\\f_n&amp;=\sum_{j=0}^{n}\binom{n}{j}f_j(1-1)^{n-j}\\\end{aligned}\]</span> 显然只有当 <span class="math inline">\(n=j\)</span> 时，后面的系数才不是 <span class="math inline">\(0\)</span>。</p><p>也就是 <span class="math inline">\(f_n=\sum\limits_{j=n}^{n}\binom{n}{j}f_j\)</span> ,也就是 <span class="math inline">\(f_n=f_n\)</span>。</p></li></ol><p><del>你知道二项式反演的四种写法吗？</del></p><p>有 ： <span class="math display">\[g_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}f_i\Leftrightarrow f_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}g_i\]</span> 这个证明可以由初始系数矩阵，翻转行列证明。由于初始的矩阵的逆矩阵等于本身，性质比较好。</p><p>可以说明初始矩阵的转置的逆矩阵也是该矩阵的转置。</p><p><span class="math inline">\(A=A^{-1}\Leftrightarrow A^T={A^T}^{-1}\)</span></p><p>所以我们现在有4种二项式反演形式。 <span class="math display">\[\begin{aligned}g_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}f_i&amp;\Leftrightarrow f_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}g_i\\g_n=\sum\limits_{i=0}^{n}\binom{n}{i}f_i&amp;\Leftrightarrow f_n=\sum\limits_{i=0}^{n} (-1)^{n-i}\binom{n}{i}g_i\\g_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}f_i&amp;\Leftrightarrow f_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}g_i\\g_n=\sum_{i=n}^{}\binom{i}{n}f_i&amp;\Leftrightarrow f_n=\sum_{i=n}^{}(-1)^{i-n}\binom{i}{n}g_i\end{aligned}\]</span> 例题</p><p><a href="https://www.luogu.com.cn/problem/P4859">已经没有什么好害怕的了</a></p><p><a href="https://www.luogu.com.cn/problem/CF285E">Positions in Permutations</a></p><p>[<a href="https://www.luogu.com.cn/problem/P5401">CTS2019]珍珠</a></p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数学</tag>
      
      <tag>数论</tag>
      
      <tag>二项式反演</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JLOI2015 骗我呢</title>
    <link href="/2021/02/15/JLOI2015/"/>
    <url>/2021/02/15/JLOI2015/</url>
    
    <content type="html"><![CDATA[<p>把大小关系看成一条边。</p><span id="more"></span><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5ld2ucd2.png" /></p><p>发现，最长的路径，就是从 <span class="math inline">\((1,x)\rightarrow(n,y)\)</span> 的这样长度为 <span class="math inline">\(m\)</span> 的路径。</p><p>现在一共有 <span class="math inline">\(m+1\)</span> 种不同数值，所以每条路径只会有 <span class="math inline">\(1\)</span> 处可以选择比正常大 <span class="math inline">\(1\)</span> 的数值。</p><p>所以假如要选某一个点作为 <span class="math inline">\(+1\)</span> 的点，此时，他左上的的点都不能选。</p><p>所以可以有以下爆搜的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,ans;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> down)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==n+<span class="hljs-number">1</span>) &#123;ans++;<span class="hljs-keyword">return</span> ;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=down;i&lt;=m;i++) dfs(x+<span class="hljs-number">1</span>,i);<br>    dfs(x+<span class="hljs-number">1</span>,max(down<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr /><p>发现这个选的状态可以理解成走格子。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6yvatxj4.png" /></p><p>假如上次选的是红色节点，那么红色圈起来的就是可选。</p><p>可以选的状态，相当于每次向右下走，接下来向上走能到的节点状态。</p><p>那么可以用一条只往 右下，上，走的路径，代表一种状态。</p><p>这个代表是双射，证明比较显然。</p><p>任何一种状态可以用一条路径表示，这个显然。</p><p>一条路径，可以代表一种状态，就是看那一步是向右下走。</p><p><span class="math inline">\(tips\)</span></p><p>注意这个最下一排，我们要新建一排 虚点使其可以转移。</p><p>为了统计最后一列的和，可以新建一排虚点，然后把路径个数和转成到点 <span class="math inline">\((n+1,m+1)\)</span> 的路径个数。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/yit8z40d.png" /></p><p>统计路径大概的 <span class="math inline">\(dp\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,ans;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">1000</span>][<span class="hljs-number">1000</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m+<span class="hljs-number">1</span>;i++) dp[<span class="hljs-number">1</span>][i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        dp[i][<span class="hljs-number">0</span>]=dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m+<span class="hljs-number">1</span>;j++) dp[i][j]=dp[i<span class="hljs-number">-1</span>][j+<span class="hljs-number">1</span>]+dp[i][j<span class="hljs-number">-1</span>], dp[i][j]%=mod;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m+<span class="hljs-number">1</span>;i++) ans+=dp[n][i],ans%=mod;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr /><p>把这个斜着的图“转正”。</p><p>本质上相当于是一个矩形，有两条线限制，不能经过这两条线的点。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/p5p81po3.png" /></p><p>如果只有一条线限制，可以用折线法，构造双射。</p><p>如果我们对于每一条线折一次线，会用重复，比如说，我们假设经过 第一条线叫做 <span class="math inline">\(A\)</span> ，经过第二条线叫做 <span class="math inline">\(B\)</span>。注意，假如连续经过<span class="math inline">\(A\ or \ B\)</span> ，我们只算一次。</p><p>那么 <span class="math inline">\(AB\)</span> 。会被 <span class="math inline">\(A\)</span> 算一遍 ，<span class="math inline">\(B\)</span> 算一遍。</p><p>这时我们要减去 <span class="math inline">\(AB,BA\)</span> 。此时还会有类似问题 。于是考虑容斥，这个类似前缀容斥。</p><p>即对 <span class="math inline">\(ABAB\cdots\)</span> 这种串进行容斥。</p><p><span class="math inline">\(tips\)</span></p><p>具体就是每次把一条直线根据另一条直线对称，然后把终点关于“对称后”这条新直线，再次对称。</p><p>由于每次问题都可以化归成经过两条直线的路径数，而且直线斜率均为 <span class="math inline">\(1\)</span>，我们可以只维护截距，这样很好计算对称后的坐标，新的截距等你所维护的东西。</p><p>折线法代码。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>,N=<span class="hljs-number">3e6</span>+<span class="hljs-number">10</span>;;<br><span class="hljs-keyword">int</span> f[N],finv[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a%mod;a=a*a%mod,b&gt;&gt;=<span class="hljs-number">1</span>;&#125;<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br>inline pair&lt;int,int&gt; ref(int x,int y,int d)&#123;return make_pair(y-d,x+y-(y-d));&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reflect</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> a+a-b;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">comb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">0</span>||m&lt;<span class="hljs-number">0</span>||n&lt;m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> f[n]*finv[n-m]%mod*finv[m]%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;n++,m+=<span class="hljs-number">2</span>;<br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;finv[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n+n+m;i++) f[i]=f[i<span class="hljs-number">-1</span>]*i%mod;<br>    finv[n+n+m]=qpow(f[n+n+m],mod<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n+n+m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--) finv[i]=finv[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%mod;<br>    <span class="hljs-keyword">int</span> x,y,a,b,ans=<span class="hljs-number">0</span>;<br>    x=n<span class="hljs-number">-1</span>,y=n+m<span class="hljs-number">-1</span><span class="hljs-number">-1</span>;a=<span class="hljs-number">-1</span>,b=m;<br>    ans=comb(x+y,x);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2</span>;j++)<br>    &#123;<br>        x=n<span class="hljs-number">-1</span>,y=n+m<span class="hljs-number">-1</span><span class="hljs-number">-1</span>;a=m,b=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">2</span>) swap(a,b);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n+n+m;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pot=ref(x,y,a);x=pot.first,y=pot.second;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>)<br>                &#123;<br>                    a=reflect(b,a);<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pot=ref(x,y,a);<br>                    x=pot.first,y=pot.second;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    b=reflect(a,b);<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pot=ref(x,y,b);<br>                    x=pot.first,y=pot.second;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>) <br>            &#123;<br>                ans-=comb(x+y,x);<br>                <span class="hljs-keyword">if</span>(ans&lt;<span class="hljs-number">0</span>) ans+=mod;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <br>            &#123;<br>                ans+=comb(x+y,x);<br>                <span class="hljs-keyword">if</span>(ans&gt;=mod) ans-=mod;<br>            &#125;<br>        <br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">23 233</span><br><span class="hljs-comment">938980383</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数学</tag>
      
      <tag>折线法</tag>
      
      <tag>idea题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wc2021 t3 fib</title>
    <link href="/2021/02/14/wc2021-t3-fib/"/>
    <url>/2021/02/14/wc2021-t3-fib/</url>
    
    <content type="html"><![CDATA[<p>wc 2021 的 T3。</p><span id="more"></span><p>今天有点晚了，写一下这个题的大体思路。</p><p>首先由题意： <span class="math display">\[F_n=F_{n-1}+F_{n-2},F_0=a,F_{1}=b\]</span> 记录斐波那契数列为 <span class="math inline">\(f_i,f_0=0\)</span> ，特殊定义 <span class="math inline">\(f_{-1}=1\)</span>。 <span class="math display">\[有\ F_n=a\cdot f_{n-1}+b\cdot f_{n}\]</span> 问题转换成 给你 <span class="math inline">\(a,b\)</span>,让你求使得 <span class="math inline">\(a\cdot f_{n-1}+b\cdot f_{n}\equiv 0\pmod{m}\)</span> 最小的 <span class="math inline">\(n\)</span>。</p><ol type="1"><li><p>首先，当 <span class="math inline">\(m\)</span> 为质数的时候很好做，因为 <span class="math inline">\(a,b,f_n,f_{n-1}\)</span> 的逆元都存在，可以直接移项，做除法。</p></li><li><p>其次由于斐波那契在 <span class="math inline">\(\bmod m\)</span> 的情况下是纯循环的（暂时不会证明），假如 <span class="math inline">\(m=\prod p_i\)</span> ，我们也是也已轻松合并的。</p></li><li><p>但是并不是所有的 <span class="math inline">\(m\)</span> 都可以分解成一堆会不相同的素数积，考虑 <span class="math inline">\(m=\prod p_i^{\alpha_i}\)</span>，合并似乎还是很好合并。（本质上就是求一堆同余方程组的最小解），问题转化为解决 <span class="math inline">\(m=p^{\alpha}\)</span> 的问题。</p></li><li><p><span class="math inline">\(update\)</span> 我想了一下，发现合并并不显然，这里可能是最重要的一步，</p></li></ol><p>假设现在我们有一个对于 <span class="math inline">\(F_x \bmod p^\alpha=0\)</span> 的最小解，而他的循环节可能并不是斐波那契 <span class="math inline">\(f_x \bmod p^\alpha=0\)</span> 的循环节。</p><p>有结论 <span class="math inline">\(F_x \bmod p^\alpha=0\)</span> 的循环节，肯定是 <span class="math inline">\(f_x \bmod p^\alpha=0\)</span> 的循环节的因数。</p><p>证明：</p><ol type="1"><li><p>显然 <span class="math inline">\(f_x\bmod p^\alpha =0\)</span> 的循环节肯定是 <span class="math inline">\(F_x\bmod p^\alpha=0\)</span> 的循环节，根据 <span class="math inline">\(F_n\)</span> 表达式可知。</p></li><li><p>设 <span class="math inline">\(F_x\bmod p^\alpha=0\)</span> 最小解为 <span class="math inline">\(x_1\)</span>，第二小解为 <span class="math inline">\(x_2\)</span> 。</p><p>那么有结论 <span class="math inline">\(x2-x1\)</span> 是一个循环节，证明可能比较感性。</p><p>当前 <span class="math inline">\(F_x\)</span> 数列长得样子应该是： <span class="math display">\[\cdots,-k,0,k,k,2k,\cdots,f_i\times k,\cdots,-t,0,t,2t,\cdots\]</span> 就是 <span class="math inline">\(0\equiv f_i\times k\pmod{p^\alpha}\)</span>,有两种可能 <span class="math inline">\(p^\alpha\mid f_i\)</span>, <span class="math inline">\(p^\beta\mid k,p^{\alpha-\beta}\mid f_i\)</span> 。</p><p>第一种可能证明显然，第二种可能因为有 <span class="math inline">\(t\)</span> 是数倍的 <span class="math inline">\(k\)</span> ，那么显然也有 <span class="math inline">\(p^\beta\mid t\)</span> ,接下来的证明显然。</p></li><li><p>如果这个新循环节不是 <span class="math inline">\(f_x\bmod p^\alpha=0\)</span> 的循环节，那可以根据类似上面的证明，证明出 <span class="math inline">\((l_1,l_2)\)</span> 也是一个循环节，<span class="math inline">\(l_1,l_2\)</span> 分别为之前的两个循环节（新循环节，和斐波那契自带的循环节）。 <span class="math inline">\((l_1,l_2)\)</span> 显然也是 <span class="math inline">\(l_2\)</span> 的一个因数。</p></li></ol><p>如是我们为了找到解的循环节可以去找斐波那契循环节的因数，然后判断该长度是否为循环节。这样一定可以找到最小的循环节。</p><p><span class="math inline">\(10^5\)</span> 范围内数的因子 <span class="math inline">\(\leq 128\)</span> 此处暴力即可。</p><ol start="5" type="1"><li>由于 <span class="math inline">\(m=p^{\alpha}\)</span> ,逆元可能不存在，按照基本套路，我们使用乘法方程，并且提取每一个数的 <span class="math inline">\(p\)</span> 因子</li></ol><p>为了之后表达方便，令 <span class="math inline">\(a&#39;,b&#39;\)</span> 表示现在的 <span class="math inline">\(a,b\)</span>。 <span class="math display">\[   a&#39;=a\cdot p^{A}\ ,\ b&#39;=b\cdot p^{B}\ ,\ f_{n-1}=c\cdot p^{C}\ ,\ f_{n}=d\cdot p^D\ ( \ a,b,c,d\perp p)   \]</span> 原方程化为： <span class="math display">\[   a\times p^A\cdot c\times p^C+b\times p^B\cdot d\times p^D\equiv 0\pmod{p^\alpha}   \]</span></p><p><span class="math display">\[   (ac)\times p^{A+C}+(bd)\times p^{B+D}\equiv 0\pmod{p^\alpha}   \]</span></p><p>这个方程成立有两种情况：</p><ol type="1"><li><span class="math inline">\(A+C\ge \alpha\)</span>,<span class="math inline">\(B+D\ge \alpha\)</span>。</li><li><span class="math inline">\(ac\equiv bd\pmod{p^{\alpha-(A+C)}}\)</span>，且 <span class="math inline">\(A+C=B+D\)</span></li></ol><p>成立条件：</p><ol type="1"><li><p>在线处理 <span class="math inline">\(C\ge \alpha-A,D\ge \alpha-B\)</span> 相当于二维数点（可能会有简单方法？）（由于 <span class="math inline">\(A,B,C,D\)</span> 都很小直接暴力就行）。</p></li><li><p>显然等价: <span class="math display">\[\frac{a}{b}\equiv \frac{d}{c}\pmod{p^{\alpha-(A+C)}},A-B=D-C\]</span></p></li><li><p>预处理 ，对每一个 <span class="math inline">\(m\)</span> 的质因数 <span class="math inline">\(p_i\)</span>，首先处理出成立条件 <span class="math inline">\(1\)</span> 成立的答案。其次考虑成立条件 <span class="math inline">\(2\)</span> ,预处理的过程此时我们知道 <span class="math inline">\(C,c,D,d,\alpha\)</span> ，不知道 <span class="math inline">\(A,a,B,b\)</span> 。发现 <span class="math inline">\(A\leq \log_{p}^{m}\)</span> , 即<span class="math inline">\(A\)</span> 的值域很小 ，此时暴力枚举 <span class="math inline">\(A\)</span> ，此时可以计算出 <span class="math inline">\(B\)</span> 的取值，从而可以处理出 <span class="math inline">\(\frac{d}{c}\bmod p^{\alpha-(A+C)}\)</span>,将其存进表。</p></li></ol><p>不难发现，此处复杂度为枚举 <span class="math inline">\(A\)</span> 的复杂度，即 <span class="math inline">\(\mathcal{O(\sum\limits _{i=1}^{k}p_i^{\alpha_i}\alpha_i)}\)</span>或者<span class="math inline">\(\mathcal{O(\sum\limits _{i=1}^{k}p_i^{\alpha_i}\alpha_i^2)}\)</span> 。(看你成立条件 <span class="math inline">\(1\)</span> 的具体处理方法)。</p><p>询问时候，对于每个 <span class="math inline">\(m\)</span> 的质因数 <span class="math inline">\(p_i\)</span> ，我们可以枚举 <span class="math inline">\(C\)</span> 然后，可以算出 <span class="math inline">\(\frac{a}{b} \bmod {p^{\alpha-(A+C)}}\)</span> 的值，暴力查表，找到一组特解。</p><p>不难发现，此处的复杂度为枚举 <span class="math inline">\(C\)</span> 的复杂度，和寻找循环节的复杂度，即 <span class="math inline">\(\mathcal{O(\sum\limits_{i=1}^{k}d(3p_i^{\alpha_i})+\sum \limits _{i=1}^k\alpha_i)}\)</span>。</p><p>代码写的可能比较丑。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;tr1/unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> T,m;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> c=getchar();x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(c&gt;<span class="hljs-string">&#x27;9&#x27;</span>||c&lt;<span class="hljs-string">&#x27;0&#x27;</span>) c=getchar();<br>    <span class="hljs-keyword">while</span>(c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>) x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+c-<span class="hljs-string">&#x27;0&#x27;</span>,c=getchar();<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; divs[<span class="hljs-number">300010</span>];<br><span class="hljs-keyword">int</span> p[<span class="hljs-number">10</span>],k[<span class="hljs-number">10</span>],t[<span class="hljs-number">10</span>],loop[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">int</span> f[<span class="hljs-number">10</span>][<span class="hljs-number">300010</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<span class="hljs-keyword">return</span> gcd(b,a%b);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a%p;a=a*a%p,b=b&gt;&gt;<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ppow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a;a=a*a,b=b&gt;&gt;<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-keyword">namespace</span> Inv<br>&#123;<br>    <span class="hljs-keyword">int</span> phi[<span class="hljs-number">100010</span>],pr[<span class="hljs-number">100010</span>],p[<span class="hljs-number">100010</span>],tot=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">100000</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pr[i]==<span class="hljs-number">0</span>) p[++tot]=i,phi[i]=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=tot&amp;&amp;p[j]*i&lt;=<span class="hljs-number">100000</span>;j++)<br>            &#123;<br>                pr[i*p[j]]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    phi[i*p[j]]=p[j]*phi[i];<span class="hljs-keyword">break</span>;<br>                &#125;<br>                phi[i*p[j]]=(p[j]<span class="hljs-number">-1</span>)*phi[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> m)</span></span>&#123;<span class="hljs-keyword">return</span> qpow(x,phi[m]<span class="hljs-number">-1</span>,m);&#125;<br>&#125;<br><br>inline pair&lt;int,int&gt; nump(int x,int p,int ki)<br>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(ki,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span>(x%p==<span class="hljs-number">0</span>) k++,x/=p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(min(k,ki),x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;<br>    exgcd(b,a%b,y,x); y-=(a/b)*x;<br>&#125;<br><span class="hljs-keyword">int</span> can[<span class="hljs-number">10</span>][<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br>tr1::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; z[<span class="hljs-number">10</span>][<span class="hljs-number">20</span>][<span class="hljs-number">20</span>][<span class="hljs-number">40</span>];<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Inv::init();<br>    read(T),read(m);<br>    <span class="hljs-keyword">int</span> mm=m;<br>    <span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(m%i==<span class="hljs-number">0</span>)<br>        &#123;<br>            p[++tot]=i;t[tot]=<span class="hljs-number">1</span>;k[tot]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(m%i==<span class="hljs-number">0</span>) m/=i,t[tot]*=i,k[tot]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> MAXX=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(m&gt;<span class="hljs-number">1</span>) p[++tot]=m,t[tot]=m,k[tot]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<br>    &#123;<br>        f[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;f[i][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-number">6</span>*t[i];j++)<br>        &#123;<br>            <br>            f[i][j]=(f[i][j<span class="hljs-number">-1</span>]+f[i][j<span class="hljs-number">-2</span>])%t[i]; <br>            <span class="hljs-keyword">if</span>(f[i][j<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;f[i][j]==<span class="hljs-number">1</span>)<br>            &#123;<br>                loop[i]=j<span class="hljs-number">-1</span>; <span class="hljs-comment">// 0-&gt; loop -&gt; 2loop ...and so on </span><br>                MAXX=max(MAXX,loop[i]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; vc=nump(f[i][j<span class="hljs-number">-1</span>],p[i],k[i]),vd=nump(f[i][j],p[i],k[i]);<br>            <span class="hljs-keyword">int</span> C=vc.first,c=vc.second,D=vd.first,d=vd.second;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a=max(<span class="hljs-number">0ll</span>,k[i]-C);a&lt;=k[i];a++) <br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b=max(<span class="hljs-number">0ll</span>,k[i]-D);b&lt;=k[i];b++) can[i][a][b]=j;<br>            <span class="hljs-keyword">int</span> tmp=ppow(p[i],k[i]-C);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> A=<span class="hljs-number">0</span>;A+C&lt;k[i];A++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> res=d*Inv::inv(c,tmp)%tmp;<br>                <span class="hljs-keyword">if</span>(z[i][A][D-C+k[i]][C].count(res)==<span class="hljs-number">0</span>)<br>                z[i][A][D-C+k[i]][C][res]=j;<br>                tmp/=p[i];<br>            &#125;<span class="hljs-comment">// z : p_i , A -&gt; D-C  -&gt; d/c</span><br>        &#125; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=loop[i]*<span class="hljs-number">2</span>;j++) f[i][j]=(f[i][j<span class="hljs-number">-1</span>]+f[i][j<span class="hljs-number">-2</span>])%t[i];<br>    &#125;<br>    <span class="hljs-comment">/////////////////</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=MAXX;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j*i&lt;=MAXX;j++) divs[i*j].push_back(i);<br>    &#125;<br>    m=mm;<br>    <span class="hljs-keyword">int</span> a0=<span class="hljs-number">0</span>,m0=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> a,b,aa,bb,A,B;<br>        read(aa),read(bb);<br>        aa%=m,bb%=m;<br>        <span class="hljs-keyword">if</span>(aa==<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-built_in">endl</span>;;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span>(bb==<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">continue</span>;&#125;<br>        a0=<span class="hljs-number">0</span>,m0=<span class="hljs-number">1</span>;<span class="hljs-keyword">bool</span> FLG=<span class="hljs-number">0</span>,fag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<br>        &#123;<br>            <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; va=nump(aa,p[i],k[i]),vb=nump(bb,p[i],k[i]);<br>            a=va.second,A=va.first;<br>            b=vb.second,B=vb.first;<br>            <span class="hljs-keyword">int</span> ans=<span class="hljs-number">-1</span>,tmp;<br>            <span class="hljs-keyword">if</span>(aa%t[i]==<span class="hljs-number">0</span>) &#123;ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>(bb%t[i]==<span class="hljs-number">0</span>) &#123;ans=<span class="hljs-number">1</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>(can[i][A][B]!=<span class="hljs-number">0</span>) &#123;ans=can[i][A][B];<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>((a*f[i][<span class="hljs-number">0</span>]+b*f[i][<span class="hljs-number">1</span>])%t[i]==<span class="hljs-number">0</span>)&#123;ans=<span class="hljs-number">1</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            tmp=ppow(p[i],k[i]-A);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> C=<span class="hljs-number">0</span>;A+C&lt;k[i];C++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> res=a*Inv::inv(b,tmp)%tmp;<br>                res=-res+tmp+tmp;<br>                res%=tmp;<br>                <span class="hljs-keyword">if</span>(z[i][A][A-B+k[i]][C].count(res))<br>                &#123;<br>                    ans=z[i][A][A-B+k[i]][C][res];<br>                    <span class="hljs-keyword">goto</span> chk;<br>                &#125;<br>                tmp/=p[i];<br>            &#125;<br>            chk:;<br>            ans%=loop[i];<br>            <span class="hljs-keyword">if</span>(ans==<span class="hljs-number">-1</span>) &#123;<br>                FLG=<span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> M=<span class="hljs-number">0</span>,A=ans;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:divs[loop[i]])<br>            &#123;<br>                <span class="hljs-keyword">if</span>((aa*f[i][x+ans<span class="hljs-number">-1</span>]+bb*f[i][x+ans])%t[i]==<span class="hljs-number">0</span>) <br>                &#123;<br>                    M=x;<span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">/////////////////////////////////////</span><br>            <span class="hljs-keyword">int</span> g=gcd(M,m0);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(A-a0)%g!=<span class="hljs-number">0</span>)&#123;<br>                fag=<span class="hljs-number">1</span>;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> x,y;<br>            exgcd(m0/g,M/g,x,y);<br>            x%=(M/g),x+=(M/g),x%=(M/g);<br>            <span class="hljs-keyword">int</span> MM=m0;<br>            m0=m0/g*M;x=x*((A-a0)/g)%m0+m0;x%=m0;<br>            a0=x%m0*MM%m0+a0;a0%=m0;<br>            a0+=m0;a0%=m0;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(FLG==<span class="hljs-number">1</span>||fag==<span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,a0);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>fib循环节</tag>
      
      <tag>人类智慧题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>点分治</title>
    <link href="/2021/02/13/point-divide/"/>
    <url>/2021/02/13/point-divide/</url>
    
    <content type="html"><![CDATA[<p>点分治 &amp; 点分树 的一些理解。</p><span id="more"></span><h2 id="点分治">点分治</h2><h3 id="什么是点分治">什么是点分治</h3><p>点分治，是树分治的一种。</p><p>树分治包括了点分治，边分治，链分治。</p><p>点分治主要处理两点间路径信息的问题。</p><h3 id="点分治怎么用">点分治怎么用</h3><p>拿最基本的<a href="https://www.luogu.com.cn/problem/P3806">问题</a>入手，给你一棵树，让你统计树上距离为 <span class="math inline">\(k\)</span> 的点对个数。</p><p>形式的说 <span class="math inline">\(\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}[dist(i,j)=k]\)</span>。</p><h4 id="naive-sol1"><span class="math inline">\(naive\ sol1\)</span></h4><p>当我们知道一个端点 <span class="math inline">\(i\)</span> 的时候，我们可以 <span class="math inline">\(\mathcal{O(n)}\)</span> 的求出该点的贡献，每个点都 <span class="math inline">\(\mathcal{O(n)}\)</span> 计算，总复杂度<span class="math inline">\(\mathcal{O(n^2)}\)</span>。</p><h4 id="naive-sol2"><span class="math inline">\(naive\ sol2\)</span></h4><p>考虑分治，随机选一个点 <span class="math inline">\(u\)</span> ，把点 <span class="math inline">\(u\)</span> 删掉，算出剩下的每个连通块的子问题和。同时把经过点 <span class="math inline">\(u\)</span> 的链的答案统计出来。</p><p>由于分治，复杂度为 <span class="math inline">\(\mathcal{O(dep\times n)}\)</span> ,<span class="math inline">\(dep\)</span> 为分治层数。</p><h4 id="right-sol"><span class="math inline">\(right\ sol\)</span></h4><p>发现让分治层数最小，本质上是让每次分治时产生的最大的连通块最小。因为此时分治层数可以看成最大的连通块变成 <span class="math inline">\(1\)</span> 的次数。</p><p>发现这个定义本质上就是找重心。在重心心处分治。</p><p>由于中心的性质，每一次分割后产生的最大的连通块 <span class="math inline">\(maxsz\leq\lceil\frac{sz}{2}\rceil\)</span></p><p>所以 <span class="math inline">\(dep\)</span> 一定是 <span class="math inline">\(O(\log_{2}n)\)</span> 级别的。</p><p>至于合并，也就一个 <span class="math inline">\(O(sz)\)</span> 解决的问题。</p><hr /><h2 id="点分树">点分树</h2><h3 id="什么是点分树">什么是点分树</h3><p>假如当前重心为 <span class="math inline">\(u\)</span> 我们把删去 <span class="math inline">\(u\)</span> 之后产生的新重心 <span class="math inline">\(v_{1,2,\cdots,k}\)</span> 向 <span class="math inline">\(u\)</span> 连边。</p><p>不难发现最终形态是一棵树。</p><p>我们把这棵树称作点分树。</p><h3 id="点分树有什么用">点分树有什么用</h3><p>观察点分治，我们每次合并答案都只在该连通块的重心处合并该连通块内的贡献。</p><p>所以假如谈一个点 <span class="math inline">\(u\)</span> 的贡献，那么他只可能在 <span class="math inline">\(u\)</span> 点，使 <span class="math inline">\(u\)</span> 点单独成为连通块所删除的重心 <span class="math inline">\(v\)</span>，使 <span class="math inline">\(v\)</span> 点所在连通块被从一个大连通块剥离出来而删的重心 <span class="math inline">\(z\)</span>，and so on 。</p><p>发现产生贡献的重心，全都在 点分树中 <span class="math inline">\(u\)</span> 到根的路径上。</p><p>所以我们统计答案相当于在统计一条链，而这个链的长度是 <span class="math inline">\(\mathcal{O(\log_2n)}\)</span> 级别的。</p><p>所以我们可以通过点分树来维护一些更难于直接记录的信息，以及一些修改操作。</p><p>对于点分治，点分树，有一点需要注意。</p><p>为什么点分治是对的？原因就在于，通过在重心时对链的合并，本质上就已经完成枚举树上的每一条路径了。</p><p>所以点分治本质上和那个 <span class="math inline">\(\mathcal{O(n^2)}\)</span> 的暴力时一样在枚举路径的。</p><p>所以在看到有树上问题问路径的一些情况，不妨考虑一下点分治。</p><h2 id="练手推荐">练手推荐</h2><p><a href="https://www.luogu.com.cn/problem/P6329">震波</a></p><p><a href="https://www.luogu.com.cn/problem/P2056">捉迷藏</a></p><p><a href="https://www.luogu.com.cn/problem/P4115">Qtree4</a></p><p><a href="https://www.luogu.com.cn/problem/P3241">开店</a></p><p><a href="https://www.luogu.com.cn/problem/P2664">树上游戏</a></p><p>本人实力有限，都是模板题了/kk</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>点分树+点分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1452E</title>
    <link href="/2020/12/20/cf1452E/"/>
    <url>/2020/12/20/cf1452E/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1452/problem/E">Link</a></p><span id="more"></span><h3 id="题解">题解</h3><h4 id="hint1">hint1</h4><p>如果只有一个老师的话，很好算。</p><h4 id="hint2">hint2</h4><p>我们可以通过算每一个学生的贡献，算出总体答案。</p><h4 id="sol">sol</h4><p>枚举第一个老师的左端点。</p><p>算每一个同学对第二个老师放的位置的贡献。</p><p><img src="\img\1.png" /></p><p>很容易发现这个贡献是两段等差数列，那么我们可以差分两次维护。</p><h3 id="复杂度">复杂度</h3><p><span class="math inline">\(\mathcal{O(nm)}\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,k;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2000</span>+<span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> l[N],r[N];<br><span class="hljs-keyword">int</span> sum[N],ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> f[N],cf[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;y) <span class="hljs-keyword">return</span> ;<br>    cf[x]+=v,cf[y+<span class="hljs-number">1</span>]-=v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;l[i]&gt;&gt;r[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n-k+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-built_in">memset</span>(sum,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(sum));<br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));<br>        <span class="hljs-built_in">memset</span>(cf,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(cf));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=i+k<span class="hljs-number">-1</span>;j++) sum[j]=sum[j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+k;j&lt;=n;j++) sum[j]=sum[j<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) res+=sum[r[j]]-sum[l[j]<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">int</span> x=i,y=i+k<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(y&lt;l[j]) &#123;<br>                modify(l[j]-k+<span class="hljs-number">1</span>,min(l[j],r[j]-k+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>);<br>                modify(max(l[j],r[j]-k+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>,r[j]+<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l[j]&lt;=y&amp;&amp;r[j]&gt;y)&#123;<br>                modify(x+<span class="hljs-number">1</span>,min(l[j],r[j]-k+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>);<br>                modify(max(l[j],r[j]-k+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>,r[j]-(y-l[j]),<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> tmp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            cf[j]+=cf[j<span class="hljs-number">-1</span>];<br>            tmp+=cf[j];<br>            ans=max(ans,res+tmp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>差分</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
